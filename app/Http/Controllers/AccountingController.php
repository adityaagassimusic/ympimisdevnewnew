<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\DB;
use DataTables;
use Response;
use File;
use PDF;
use Excel;
use App\AccExchangeRate;
use App\AccItem;
use App\AccItemCategory;
use App\AccActual;
use App\AccActualLog;
use App\AccBudgetNote;
use App\AccReceive;
use App\AccReceiveReport;
use App\AccModalStock;
use App\AccBudget;
use App\AccBudgetHistory;
use App\AccBudgetTransfer;
use App\AccSupplier;
use App\AccPurchaseRequisition;
use App\AccPurchaseRequisitionItem;
use App\AccPurchaseOrder;
use App\AccPurchaseOrderDetail;
use App\AccInvestment;
use App\AccInvestmentDetail;
use App\AccInvestmentBudget;
use App\AccInvoice;
use App\AccInvoiceReceiveReport;
use App\AccInvoicePaymentTerm;
use App\AccPaymentRequest;
use App\AccPaymentRequestDetail;
use App\AccSuspend;
use App\AccSuspendDetail;
use App\AccSettlement;
use App\AccSettlementDetail;
use App\AccSettlementUser;
use App\AccSettlementUserDetail;
use App\WeeklyCalendar;

use App\MisInventory;

use App\EmployeeSync;
use App\Employee;
use App\UtilityItemNumber;
use App\UtilityOrder;

use App\FixedAssetClasification;
use App\FixedAssetRegistration;
use App\FixedAssetInvoice;
use App\FixedAssetInvoiceDetail;
use App\FixedAssetTransfer;
use App\FixedAssetPic;
use App\FixedAssetAudit;
use App\FixedAssetLabel;
use App\FixedAssetDisposal;
use App\FixedAssetItem;
use App\FixedAssetDisposalScrap;
use App\FixedAssetMissing;
use App\FixedAssetCoordinate;
use App\FixedAssetCheck;
use App\FixedAssetSummary;
use App\FixedAssetCip;
use App\FixedAssetCipTransfer;
use App\FixedAssetSpLetter;
use Mails;

use App\FixedAssetNonDisposal;

use App\CodeGenerator;
use App\ApprMasters;
use App\ApprSend;
use App\ApprApprovals;

use App\CanteenPurchaseRequisition;
use App\CanteenPurchaseRequisitionItem;
use App\CanteenBudgetHistory;
use App\CanteenPurchaseOrder;
use App\CanteenPurchaseOrderDetail;
use App\CanteenItem;
use App\CanteenReceive;

use App\AccJurnal;
use App\AccJurnalDetail;
use App\AccJurnalInvoice;

use App\Approver;

use App\User;
use Carbon\Carbon;
use App\Mail\SendEmail;
use Illuminate\Support\Facades\Mail;
use Validator;

use App\MisInventoryNew;
use App\MisInventoryDetail;


class AccountingController extends Controller
{
    public function __construct()
    {
        $this->dept = ['Management Information System Department', 'Accounting Department', 'Woodwind Instrument - Assembly (WI-A) Department', 'Educational Instrument (EI) Department', 'General Affairs Department', 'Human Resources Department', 'Logistic Department', 'Maintenance Department', 'Woodwind Instrument - Parts Process (WI-PP) Department', 'Procurement Department', 'Production Control Department', 'Production Engineering Department', 'Purchasing Control Department', 'Standardization Department', 'Woodwind Instrument - Welding Process (WI-WP) Department', 'Woodwind Instrument - Surface Treatment (WI-ST) Department'];

        $this->uom = ['bag', 'bar', 'belt', 'box', 'Btg', 'Btl', 'buah', 'buku', 'Can', 'Case', 'cps', 'day', 'Drum', 'galon', 'gr','job', 'JRG', 'Kg', 'kgm', 'Lbr', 'lbs', 'month', 'License', 'Lot',  'ltr', 'lubang', 'm²', 'm3', 'Mtr', 'Pack', 'package', 'pad', 'pail', 'pair', 'pc', 'Pce', 'Unit', 'Pcs', 'Rim', 'roll', 'sample', 'Set','sheet', 'tbg', 'titik'];

        $this->uom_kantin = ['Can','Kg','Pack','Btr','Pcs','Klg','Btl','Ekor','Ball','Ikat','Tusuk','Box','Butir','Dus','Jrg','Ltr','Papan','lbr','Pouch','Roll', 'Galon', 'Loaf', 'ctn'];

        $this->transportation = ['AIR', 'BOAT', 'COURIER SERVICE', 'DHL', 'FEDEX', 'SUV-Car'];

        $this->delivery = ['CIF Surabaya', 'CIP', 'Cost And Freight ', 'Delivered At Frontier', 'Delivered Duty Paid', 'Delivered Duty Unpaid', 'Delivered Ex Quay', 'Ex Works', 'Ex Factory', 'Ex Ship', 'FRANCO', 'Franco', 'FOB', 'Flee Alongside Ship', 'Free Carrier (FCA)', 'Letter Of Credits','DAP Consignee (Surabaya Factory)'];

        // $this->dgm = 'PI1910003';
        // $this->gm = 'PI1206001';

        $this->dgm = 'PI0109004';
        $this->dgm_ps = 'PI9905001';
        $this->gm = 'PI1206001';
        $this->gm_acc = 'PI2302030';

        $this->manager_acc = 'PI9902017/Romy Agung Kurniawan'; //Pak Romy
        // $this->dir_acc = 'PI1712018/Kyohei Iida'; //Pak Ida
        $this->dir_acc = 'PI2302030/Mikinori Yano'; //Pak Ida
        // $this->presdir = 'PI1301001/Hiroshi Ura'; //Pak Ura
        $this->presdir = 'PI2111044/Hiromichi Ichimura'; //Pak Ichimura
    }

    //==================================//
    //          Master supplier         //
    //==================================//
    public function master_supplier()
    {
        $title = 'Supplier';
        $title_jp = '調達会社';

        $status = AccSupplier::select('acc_suppliers.supplier_status')->whereNull('acc_suppliers.deleted_at')
        ->distinct()
        ->get();

        $city = AccSupplier::select('acc_suppliers.supplier_city')->whereNull('acc_suppliers.deleted_at')
        ->distinct()
        ->get();

        return view('accounting_purchasing.master.supplier', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'status' => $status,
            'city' => $city,
        ))->with('page', 'Supplier')
        ->with('head', 'Supplier');
    }

    public function fetch_supplier(Request $request)
    {
        $supplier = AccSupplier::orderBy('acc_suppliers.supplier_name', 'asc');

        if ($request->get('status') != null)
        {
            $supplier = $supplier->whereIn('acc_suppliers.supplier_status', $request->get('status'));
        }

        if ($request->get('city') != null)
        {
            $supplier = $supplier->whereIn('acc_suppliers.supplier_city', $request->get('city'));
        }

        $supplier = $supplier->select('*')
        ->get();

        return DataTables::of($supplier)
        ->addColumn('action', function ($supplier)
        {
            $id = $supplier->id;
            if (str_contains(Auth::user()->role_code, 'MIS') || str_contains(Auth::user()->role_code, 'PCH')) {
                return ' 
                <a href="supplier/update/' . $id . '" class="btn btn-warning btn-xs"><i class="fa fa-edit"></i> Edit</a> 
                <a href="supplier/delete/' . $id . '" class="btn btn-danger btn-xs"><i class="fa fa-trash"></i> Delete</a>
                ';
            }else{
                return '-';       
            }
        })
        ->rawColumns(['action' => 'action'])

        ->make(true);
    }

    public function create_supplier()
    {
        $title = 'Create Supplier';
        $title_jp = '調達会社データを作成';

        return view('accounting_purchasing.master.create_supplier', array(
            'title' => $title,
            'title_jp' => $title_jp
        ))->with('page', 'Supplier');
    }

    public function create_supplier_post(Request $request)
    {
        try
        {
            $id_user = Auth::id();

            $supplier = AccSupplier::create([
             'vendor_code' => $request->get('vendor_code') ,
             'supplier_name' => $request->get('supplier_name') ,
             'supplier_currency' => $request->get('supplier_currency') ,
             'supplier_address' => $request->get('supplier_address') ,
             'supplier_city' => $request->get('supplier_city') ,
             'supplier_phone' => $request->get('supplier_phone') ,
             'supplier_fax' => $request->get('supplier_fax') ,
             'contact_name' => $request->get('contact_name') ,
             'supplier_npwp' => $request->get('supplier_npwp') ,
             'supplier_duration' => $request->get('supplier_duration') ,
             'position' => $request->get('position') ,
             'supplier_status' => $request->get('supplier_status') ,
             'supplier_status_fix' => $request->get('supplier_status_fix') ,
             'supplier_pch' => $request->get('supplier_pch_code') ,
             'created_by' => $id_user
         ]);

            $supplier->save();

            $response = array(
                'status' => true,
                'datas' => "Berhasil"
            );
            return Response::json($response);

        }
        catch(QueryException $e)
        {
            $response = array(
                'status' => false,
                'datas' => $e->getMessage()
            );
            return Response::json($response);
        }
    }

    public function update_supplier($id)
    {
        $title = 'Update Supplier';
        $title_jp = '調達会社データを作成';

        $supp = AccSupplier::find($id);

        return view('accounting_purchasing.master.edit_supplier', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'supplier' => $supp
        ))->with('page', 'Supplier');
    }

    public function update_supplier_post(Request $request)
    {
        try
        {
            $id_user = Auth::id();

            $inv = AccSupplier::where('id', $request->get('id'))
            ->update(['vendor_code' => $request->get('vendor_code') , 
                'supplier_name' => $request->get('supplier_name'), 
                'supplier_currency' => $request->get('supplier_currency') ,
                'supplier_address' => $request->get('supplier_address'), 
                'supplier_city' => $request->get('supplier_city') , 
                'supplier_phone' => $request->get('supplier_phone') , 
                'supplier_fax' => $request->get('supplier_fax') , 
                'contact_name' => $request->get('contact_name') , 
                'supplier_npwp' => $request->get('supplier_npwp') , 
                'supplier_duration' => $request->get('supplier_duration') , 
                'position' => $request->get('position') , 
                'supplier_status' => $request->get('supplier_status') , 
                'supplier_status_fix' => $request->get('supplier_status_fix') ,
                'supplier_pch' => $request->get('supplier_pch_code') ,
                'created_by' => $id_user
            ]);

            $response = array(
                'status' => true,
                'datas' => "Berhasil"
            );
            return Response::json($response);

        }
        catch(QueryException $e)
        {
            $response = array(
                'status' => false,
                'datas' => $e->getMessage()
            );
            return Response::json($response);
        }
    }

    public function delete_supplier($id)
    {
        $supplier = AccSupplier::find($id);
        $supplier->delete();
        return redirect('/index/supplier')
        ->with('success', 'Supplier has been deleted.')
        ->with('page', 'Supplier');
    }

    //==================================//
    //            Master Item           //
    //==================================//
    public function master_item()
    {
        $title = 'Purchase Item';
        $title_jp = '購入アイテム';

        // $uom = AccItem::select('acc_items.uom')
        //       ->whereNull('acc_items.deleted_at')
        //       ->distinct()
        //       ->get();
        $item_categories = AccItemCategory::select('acc_item_categories.*')->whereNull('acc_item_categories.deleted_at')
        ->get();

        return view('accounting_purchasing.master.purchase_item', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'uom' => $this->uom,
            'item_category' => $item_categories,
        ))->with('page', 'Purchase Item')
        ->with('head', 'Purchase Item');
    }

    public function fetch_item(Request $request)
    {
        $items = AccItem::select('acc_items.id', 'acc_items.kode_item', 'acc_items.kategori', 'acc_items.deskripsi', 'acc_items.uom', 'acc_items.spesifikasi', 'acc_items.harga', 'acc_items.lot', 'acc_items.moq', 'acc_items.leadtime', 'acc_items.currency', 'acc_items.quotation','acc_item_categories.category');

        $items = $items->leftjoin('acc_item_categories', 'acc_items.kategori', '=', 'acc_item_categories.category_id');

        if ($request->get('keyword') != null)
        {
            $items = $items->where('deskripsi', 'like', '%' . $request->get('keyword') . '%')
            ->orWhere('spesifikasi', 'like', '%' . $request->get('keyword') . '%');
        }

        if ($request->get('category') != null)
        {
            $items = $items->where('acc_items.kategori', $request->get('category'));
        }

        if ($request->get('penawaran') != null)
        {
            if ($request->get('penawaran') == "Ada"){
                $items = $items->whereNotNull('acc_items.quotation');
            }
            else{
                $items = $items->whereNull('acc_items.quotation');
            }
        }

        if ($request->get('barang_modal') != null)
        {
            if ($request->get('barang_modal') == "Barang Modal"){
                $items = $items->whereNotNull('acc_item_categories.category');
            }
            else{
                $items = $items->whereNull('acc_item_categories.category');
            }
        }

        $items = $items->orderBy('acc_items.id', 'ASC')
        ->get();

        return DataTables::of($items)
        ->addColumn('action', function ($items)
        {
            $id = $items->id;

            if (str_contains(Auth::user()->role_code, 'MIS') || str_contains(Auth::user()->role_code, 'PCH')) {
                return ' 
                <a href="purchase_item/update/' . $id . '" class="btn btn-warning btn-xs"><i class="fa fa-edit"></i> Edit</a> 
                <a href="purchase_item/delete/' . $id . '" class="btn btn-danger btn-xs"><i class="fa fa-trash"></i> Delete</a>
                ';
            }else{
                return '-';                
            }
        })
        ->addColumn('image', function ($items)
        {
            $item_code = $items->kode_item;
            $item_format = $items->img_kode_item;
            
            if (file_exists(public_path() .'/images/purchase_item/'.$item_code.'.jpg')) {
                return '<a onClick="uploadPhoto(\''.$item_code.'\')"><img src="'.url('images/purchase_item').'/'.$item_code.'.jpg" width="250"></a>';
            }
            else if (file_exists(public_path() .'/images/purchase_item/'.$item_code.'.png')) {
                return '<a onClick="uploadPhoto(\''.$item_code.'\')"><img src="'.url('images/purchase_item').'/'.$item_code.'.png" width="250" ></a>';
            }
            else{
                return '
                <button class="btn btn-xs btn-success" data-toggle="tooltip" onclick="uploadPhoto(\''.$item_code.'\');"><i class="fa fa-photo"></i> Upload Foto</button>
                ';
            }

        })

        ->editColumn('category', function ($items)
        {
            if ($items->category != null) {
                return '<i class="fa fa-check" style="color:green"></i>';
            }
            else{
                return '-';
            }
        })

        ->editColumn('quotation', function ($items)
        {
            if ($items->quotation != null) {
                $quote = "";
                $all_quotation = explode(",", $items->quotation);
                for ($i=0; $i < count($all_quotation); $i++) { 
                    $quote .= '<a href="../files/quotation/' . $all_quotation[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
                }
                return $quote;
            }
            else{
                return '-';
            }
        })
        ->rawColumns(['action' => 'action','image' => 'image','quotation' => 'quotation','category' => 'category'])
        ->make(true);
    }

    //==================================//
    //            Master Item           //
    //==================================//
    public function master_new_item()
    {
        $title = 'Purchase New Item';
        $title_jp = '購入アイテム';

        return view('accounting_purchasing.master.purchase_new_item', array(
            'title' => $title,
            'title_jp' => $title_jp
        ))->with('page', 'Purchase New Item')
        ->with('head', 'Purchase New Item');
    }

    public function fetch_new_item(Request $request)
    {
        $items = AccItem::select('acc_items.id', 'acc_items.kode_item', 'acc_items.kategori', 'acc_items.deskripsi', 'acc_items.uom', 'acc_items.spesifikasi', 'acc_items.harga', 'acc_items.lot', 'acc_items.moq', 'acc_items.leadtime', 'acc_items.currency', 'acc_items.quotation');


        if ($request->get('month') != null)
        {
            $items = $items->where(DB::RAW('DATE_FORMAT(created_at,"%Y-%m")'), '=', $request->get('month'));
        }

        $items = $items->orderBy('acc_items.id', 'ASC')
        ->get();

        return DataTables::of($items)
        ->addColumn('action', function ($items)
        {
            $id = $items->id;

            if (str_contains(Auth::user()->role_code, 'MIS') || str_contains(Auth::user()->role_code, 'PCH')) {
                return ' 
                <a href="purchase_item/update/' . $id . '" class="btn btn-warning btn-xs"><i class="fa fa-edit"></i> Edit</a> 
                <a href="purchase_item/delete/' . $id . '" class="btn btn-danger btn-xs"><i class="fa fa-trash"></i> Delete</a>
                ';
            }else{
                return '-';                
            }
        })
        ->addColumn('image', function ($items)
        {
            $item_code = $items->kode_item;
            $item_format = $items->img_kode_item;
            
            if (file_exists(public_path() .'/images/purchase_item/'.$item_code.'.jpg')) {
                return '<a onClick="uploadPhoto(\''.$item_code.'\')"><img src="'.url('images/purchase_item').'/'.$item_code.'.jpg" width="250"></a>';
            }
            else if (file_exists(public_path() .'/images/purchase_item/'.$item_code.'.png')) {
                return '<a onClick="uploadPhoto(\''.$item_code.'\')"><img src="'.url('images/purchase_item').'/'.$item_code.'.png" width="250" ></a>';
            }
            else{
                return '
                <button class="btn btn-xs btn-success" data-toggle="tooltip" onclick="uploadPhoto(\''.$item_code.'\');"><i class="fa fa-photo"></i> Upload Foto</button>
                ';
            }

        })

        ->editColumn('quotation', function ($items)
        {
            if ($items->quotation != null) {
                $quote = "";
                $all_quotation = explode(",", $items->quotation);
                for ($i=0; $i < count($all_quotation); $i++) { 
                    $quote .= '<a href="../files/quotation/' . $all_quotation[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
                }
                return $quote;
            }
            else{
                return '-';
            }
        })
        ->rawColumns(['action' => 'action','image' => 'image','quotation' => 'quotation'])
        ->make(true);
    }


    public function create_item()
    {
        $title = 'Create Item';
        $title_jp = '購入アイテムを作成';

        $emp = EmployeeSync::where('employee_id', Auth::user()->username)
        ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
        ->first();

        $item_categories = AccItemCategory::select('acc_item_categories.*')->whereNull('acc_item_categories.deleted_at')
        ->get();

        return view('accounting_purchasing.master.create_purchase_item', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'employee' => $emp,
            'item_category' => $item_categories,
            'uom' => $this->uom
        ))
        ->with('page', 'Purchase Item');
    }

    public function create_item_post(Request $request)
    {
        try
        {
            if ($request->file('item_file') == null) {

                $id_user = Auth::id();

                if(preg_match("/([%\;\'\"\*\?\|]+)/", $request->get('item_desc')))
                {
                    $response = array(
                        'status' => false,
                        'datas' => "Gagal"
                    );
                }
                else
                {
                    $item = AccItem::create(['kode_item' => $request->get('item_code') , 'kategori' => $request->get('item_category') , 'deskripsi' => $request->get('item_desc') , 'uom' => $request->get('item_uom') , 'spesifikasi' => $request->get('item_spec') , 'harga' => $request->get('item_price') , 'lot' => $request->get('item_lot') , 'moq' => $request->get('item_moq') , 'leadtime' => $request->get('item_leadtime') , 'currency' => $request->get('item_currency') , 'created_by' => $id_user]);

                    $item->save();

                    $response = array(
                        'status' => true,
                        'datas' => "Berhasil",
                        'id' => $item->id
                    );
                }
            }else{


            // $tujuan_upload = 'images/purchase_item';

            // if ($request->file('item_file') != NULL)
            // {
            //     $file = $request->file('item_file');
            //     $nama = $file->getClientOriginalName();
            //     $file->move($tujuan_upload,$nama);
            // }
                $validator = Validator::make($request->all(), [
                    'item_file' => 'mimes:jpg,jpeg,png,JPG,JPEG,PNG|max:10240'

                ]);

                if ($validator->fails()) {
                   $response = array(
                     'status' => false
                 );
               }else{
                   if (count($request->file('item_file')) > 0) {
                    $num = 1;
                    $file = $request->file('item_file');
                    $nama = $file->getClientOriginalName();
                    $filename = pathinfo($nama, PATHINFO_FILENAME);
                    $extension = pathinfo($nama, PATHINFO_EXTENSION);

                    $att = $request->get('item_code').'.'.$extension;

                    $file->move('images/purchase_item/', $att);
                }
                else {
                   $att = null;
               }
               $id_user = Auth::id();

               if(preg_match("/([%\;\'\"\*\?\|]+)/", $request->get('item_desc')))
               {
                $response = array(
                    'status' => false,
                    'datas' => "Gagal"
                );
            }else{
                $item = AccItem::create(['kode_item' => $request->get('item_code') , 'kategori' => $request->get('item_category') , 'deskripsi' => $request->get('item_desc') , 'uom' => $request->get('item_uom') , 'spesifikasi' => $request->get('item_spec') , 'harga' => $request->get('item_price') , 'lot' => $request->get('item_lot') , 'moq' => $request->get('item_moq') , 'leadtime' => $request->get('item_leadtime') , 'currency' => $request->get('item_currency') , 'created_by' => $id_user, 'img_kode_item' => $att]);

                $item->save();

                $response = array(
                    'status' => true,
                    'datas' => "Berhasil",
                    'id' => $item->id
                );
            }
        }
    }

    return Response::json($response);

}
catch(QueryException $e)
{
    $response = array(
        'status' => false,
        'datas' => $e->getMessage()
    );
    return Response::json($response);
}
}

public function update_item($id)
{
    $title = 'Edit Item';
    $title_jp = '購入アイテムを編集';

    $item = AccItem::find($id);

    $emp = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
    ->first();

    $item_categories = AccItemCategory::select('acc_item_categories.*')->whereNull('acc_item_categories.deleted_at')
    ->get();

    return view('accounting_purchasing.master.edit_purchase_item', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'item' => $item,
        'employee' => $emp,
        'item_category' => $item_categories,
        'uom' => $this->uom
    ))
    ->with('page', 'Purchase Item');
}

public function UploadItem(Request $request)
{
    try
    {
        $id_user = Auth::id();

        $validator = Validator::make($request->all(), [
            'foto_item_upload' => 'mimes:jpg,jpeg,png,JPG,JPEG,PNG|max:10240'
        ]);

        if ($validator->fails()) {
            $response = array(
             'status' => false
         );
        }else{
            if (count($request->file('foto_item_upload')) > 0) {
                $file = $request->file('foto_item_upload');
                $nama = $file->getClientOriginalName();
                $filename = pathinfo($nama, PATHINFO_FILENAME);
                $extension = pathinfo($nama, PATHINFO_EXTENSION);

                $att = $request->get('codes').'.'.$extension;

                $file->move('images/purchase_item/', $att);
            }
            else {
                $att = null;
            }


            $inv = AccItem::where('kode_item', $request->get('codes'))
            ->update(['created_by' => $id_user,'img_kode_item' => $att]);

            $response = array(
                'status' => true,
                'datas' => "Berhasil"
            );
        }

        return Response::json($response);

    }
    catch(QueryException $e)
    {
        $response = array(
            'status' => false,
            'datas' => $e->getMessage()
        );
        return Response::json($response);
    }
}


public function update_item_post(Request $request)
{
    try
    {
        $id_user = Auth::id();
        $items = AccItem::where('id',$request->get('id_edit'))->first();


        // $validator = Validator::make($request->all(), [
        //     'item_file_edit' => 'mimes:jpg,jpeg,png,JPG,JPEG,PNG|max:10240'

        // ]);

//         if ($validator->fails()) {
//            $response = array(
//              'status' => false
//          );
//         }
//         else{
//         if($request->file('item_file_edit') != ''){        
//             $path = public_path().'/images/purchase_item/';

//           //code for remove old file
//             if($items->img_kode_item != '' && $items->img_kode_item != null){
//              $file_old = $path.$items->img_kode_item;
//              unlink($file_old);
//          }

//           //upload new file
//          $file = $request->file('item_file_edit');
//          $nama = $file->getClientOriginalName();
//          $filename = pathinfo($nama, PATHINFO_FILENAME);
//          $extension = pathinfo($nama, PATHINFO_EXTENSION);

//          $att = $request->get('item_code').'.'.$extension;
//          $file->move($path, $att);
//      }
//      else {
//        $att = null;
//    }
// }


        $inv = AccItem::where('id', $request->get('id_edit'))
        ->update(['kode_item' => $request->get('item_code') , 'kategori' => $request->get('item_category') , 'deskripsi' => $request->get('item_desc') , 'uom' => $request->get('item_uom') , 'spesifikasi' => $request->get('item_spec') , 'harga' => $request->get('item_price') , 'lot' => $request->get('item_lot') , 'moq' => $request->get('item_moq') , 'leadtime' => $request->get('item_leadtime') , 'currency' => $request->get('item_currency') , 'created_by' => $id_user]);

        $response = array(
            'status' => true,
            'datas' => "Berhasil");

        return Response::json($response);

    }
    catch(QueryException $e)
    {
        $response = array(
            'status' => false,
            'datas' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function delete_item($id)
{
    $items = AccItem::find($id);
    $path = public_path().'/images/purchase_item/';

          //code for remove old file
    if($items->img_kode_item != ''  && $items->img_kode_item != null){
     $file_old = $path.$items->img_kode_item;
     unlink($file_old);
 }
 $items->delete();

 return redirect('/index/purchase_item')
 ->with('status', 'Item has been deleted.')
 ->with('page', 'Purchase Item');
}

public function get_kode_item(Request $request)
{
    $kategori = $request->kategori;

    $query = "SELECT kode_item FROM `acc_items` where kategori='$kategori' order by kode_item DESC LIMIT 1";
    $nomorurut = DB::select($query);

    if ($nomorurut != null)
    {
        $nomor = substr($nomorurut[0]->kode_item, -3);
        $nomor = $nomor + 1;
        $nomor = sprintf('%03d', $nomor);

    }
    else
    {
        $nomor = "001";
    }

    $result['no_urut'] = $nomor;

    return json_encode($result);
}

    //==================================//
    //       Create Item Category       //
    //==================================//
public function create_item_category()
{
    $title = 'Create Item Category';
    $title_jp = '購入アイテムの種類を作成';

    return view('accounting_purchasing.master.create_category_item', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', 'Purchase Item');
}

public function create_item_category_post(Request $request)
{
    try
    {
        $id_user = Auth::id();

        $item_category = AccItemCategory::create([
            'category_id' => $request->get('category_id') , 
            'category_name' => $request->get('category_name') , 
            'category' => $request->get('category') , 
            'group' => $request->get('group') , 
            'created_by' => $id_user
        ]);

        $item_category->save();

        $response = array(
            'status' => true,
            'datas' => "Berhasil"
        );
        return Response::json($response);

    }
    catch(QueryException $e)
    {
        $response = array(
            'status' => false,
            'datas' => $e->getMessage()
        );
        return Response::json($response);
    }
}

    //==================================//
    //          Exchange Rate           //
    //==================================//
public function exchange_rate()
{
    $title = 'Exchange Rate';
    $title_jp = '為替レート';

    return view('accounting_purchasing.master.exchange_rate', array(
        'title' => $title,
        'title_jp' => $title_jp,
    ))->with('page', 'Exchange Rate')
    ->with('head', 'Exchange Rate');
}

public function fetch_exchange_rate(Request $request)
{
    $exchange = AccExchangeRate::orderBy('acc_exchange_rates.id', 'desc');

    if ($request->get('tanggal') != null)
    {
        $exchange = $exchange->where('acc_exchange_rates.periode', $request->get('tanggal') . "-01");
    }

    $exchange = $exchange->select('*')
    ->get();

    return DataTables::of($exchange)
    ->editColumn('periode', function ($exchange)
    {
        return date('Y F', strtotime($exchange->periode));
    })
    ->addColumn('action', function ($exchange)
    {
        $id = $exchange->id;
        return '  
        <button class="btn btn-xs btn-danger" data-toggle="tooltip" title="Delete" onclick="modalDelete(' . $id . ')"><i class="fa fa-trash"></i> Delete</button>
        ';
    })
    ->rawColumns(['action' => 'action'])

    ->make(true);
}

public function create_exchange_rate(Request $request)
{
    try
    {
        $id_user = Auth::id();

        $rate = AccExchangeRate::create(['periode' => $request->get('periode') . "-01", 'currency' => $request->get('currency') , 'rate' => $request->get('rate') , 'created_by' => $id_user]);

        $rate->save();

        $response = array(
            'status' => true,
            'datas' => "Berhasil"
        );
        return Response::json($response);

    }
    catch(QueryException $e)
    {
        $response = array(
            'status' => false,
            'datas' => $e->getMessage()
        );
        return Response::json($response);
    }

}

public function delete_exchange_rate(Request $request)
{
    $exchange = AccExchangeRate::find($request->get("id"));
    $exchange->delete();

    $response = array(
        'status' => true
    );
    return Response::json($response);
}

    //==================================//
    //       Purchase Requisition       //
    //==================================//


public function purchase_requisition()
{
    $title = 'Purchase Requisition';
    $title_jp = '購入申請';

    $emp = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
    ->first();

    $staff = db::select("select DISTINCT employee_id, name, section, position from employee_syncs
        where end_date is null and (position like '%Staff%')");

    $items = db::select("select kode_item, kategori, deskripsi from acc_items where deleted_at is null");
    $dept = $this->dept;

    return view('accounting_purchasing.purchase_requisition', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'employee' => $emp,
        'items' => $items,
        'dept' => $dept,
        'staff' => $staff,
        'uom' => $this->uom
    ))
    ->with('page', 'Purchase Requisition')
    ->with('head', 'PR');
}

public function fetch_purchase_requisition(Request $request)
{
    $tanggal = "";
    $adddepartment = "";
    $restrict_dept = "";

    if (strlen($request->get('datefrom')) > 0)
    {
        $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
        $tanggal = "and A.submission_date >= '" . $datefrom . " 00:00:00' ";
        if (strlen($request->get('dateto')) > 0)
        {
            $dateto = date('Y-m-d', strtotime($request->get('dateto')));
            $tanggal = $tanggal . "and A.submission_date  <= '" . $dateto . " 23:59:59' ";
        }
    }

    if ($request->get('department') != null)
    {
        $departments = $request->get('department');
        $deptlength = count($departments);
        $department = "";

        for ($x = 0;$x < $deptlength;$x++)
        {
            $department = $department . "'" . $departments[$x] . "'";
            if ($x != $deptlength - 1)
            {
                $department = $department . ",";
            }
        }
        $adddepartment = "and A.department in (" . $department . ") ";
    }


        //Get Employee Department
    $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('department')
    ->first();

    if (str_contains(Auth::user()->role_code, 'MIS') || str_contains(Auth::user()->role_code, 'PCH') || str_contains(Auth::user()->role_code, 'ACC') || strpos($emp_dept->department, 'Procurement Department') !== false || strpos($emp_dept->department, 'Purchasing Control Department') !== false) {
        $restrict_dept = "";
    }
    else{
        $restrict_dept = "and department like '%".$emp_dept->department."%'";
    }


    $qry = "SELECT  * FROM acc_purchase_requisitions A WHERE A.deleted_at IS NULL " . $tanggal . "" . $adddepartment . "" . $restrict_dept. " order by A.id DESC LIMIT 2000";

    $pr = DB::select($qry);

    return DataTables::of($pr)
    ->editColumn('submission_date', function ($pr)
    {
        return $pr->submission_date;
    })
    ->editColumn('note', function ($pr)
    {
        $note = "";
        if ($pr->note != null)
        {
            $note = $pr->note;
        }
        else
        {
            $note = '-';
        }

        return $note;
    })
    ->editColumn('status', function ($pr)
    {
        $id = $pr->id;

        if ($pr->posisi == "user" && $pr->status == "approval")
        {
            return '<label class="label label-danger">Not Sent</a>';
        }
        else if($pr->posisi == "manager" && $pr->status == "approval")
        {
            return '<label class="label label-warning">Approval Manager</a>';
        }
        else if($pr->posisi == "dgm" && $pr->status == "approval")
        {
            return '<label class="label label-warning">Approval DGM</a>';
        }
        else if($pr->posisi == "gm" && $pr->status == "approval")
        {
            return '<label class="label label-warning">Approval GM</a>';
        }
        else if ($pr->status == "approval_acc")
        {
            return '<label class="label label-info">Diverifikasi Purchasing</a>';
        }
        else if ($pr->status == "received")
        {
            return '<label class="label label-success">Diterima Purchasing</a>';
        }

    })
    ->addColumn('action', function ($pr)
    {
        $id = $pr->id;

            // <a href="purchase_requisition/detail/' . $id . '" class="btn btn-info btn-xs" data-toggle="tooltip" title="Detail PR"><i class="fa fa-eye"></i></a>
            // <a href="javascript:void(0)" class="btn btn-xs btn-warning" onClick="editPR(' . $id . ')" data-toggle="tooltip" title="Detail PR"><i class="fa fa-edit"></i> Detail</a>

        if ($pr->posisi == "user" && $pr->status == "approval") {
            return '
            <button class="btn btn-xs btn-success" data-toggle="tooltip" title="Send Email" style="margin-right:5px;"  onclick="sendEmail('.$id.')"><i class="fa fa-envelope"></i> Send Email</button>
            <a href="javascript:void(0)" class="btn btn-xs btn-warning" onClick="editPR(' . $id . ')" data-toggle="tooltip" title="Edit PR"><i class="fa fa-edit"></i> Edit PR</a>
            <a href="purchase_requisition/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
            <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="deleteConfirmationPR('.$id.')" data-toggle="modal" data-target="#modalDeletePR"  title="Delete PR"><i class="fa fa-trash"></i> Delete PR</a>
            ';

        }

            // if($pr->status == "approval"){
            //     return '

            //     <a href="purchase_requisition/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
            //     ';
            // }
        else{
            if($pr->status == "approval"){
                return '<a href="purchase_requisition/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a> <button class="btn btn-xs btn-primary" data-toggle="tooltip" title="Resend Email" style="margin-right:5px;"  onclick="ResendEmail('.$id.')"><i class="fa fa-envelope"></i> Email Reminder</button>';
            }else{
                return '<a href="purchase_requisition/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a><button class="btn btn-xs btn-info" data-toggle="tooltip" title="Tracing Item" style="margin-right:5px;"  onclick="tracing('.$id.')"><i class="fa fa-search"></i> Tracing</button>';
            }
        }


    })
    ->editColumn('file', function ($pr)
    {

        $data = json_decode($pr->file);

        $fl = "";

        if ($pr->file != null)
        {
            for ($i = 0;$i < count($data);$i++)
            {
                $fl .= '<a href="files/pr/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
            }
        }
        else
        {
            $fl = '-';
        }

        return $fl;
    })
    ->rawColumns(['status' => 'status', 'action' => 'action', 'file' => 'file'])
    ->make(true);
}

public function fetchItemList(Request $request)
{
    $items = AccItem::select('acc_items.kode_item', 'acc_items.deskripsi')
    ->get();

    $response = array(
        'status' => true,
        'item' => $items
    );

    return Response::json($response);
}

public function prgetitemdesc(Request $request)
{
    $html = array();
    $stok = '';
    $kode_item = AccItem::where('kode_item', $request->kode_item)
    ->get();

    if ($request->dept == 'Maintenance Department') {
        $mtc_inv = db::select("SELECT stock from maintenance_inventories where item_number = '".$request->kode_item."'");
        if (count($mtc_inv) > 0) {
            $stok = (int) $mtc_inv[0]->stock;
        }
    }

    foreach ($kode_item as $item)
    {
        $html = array(
            'deskripsi' => $item->deskripsi,
            'spesifikasi' => $item->spesifikasi,
            'uom' => $item->uom,
            'price' => $item->harga,
            'currency' => $item->currency,
            'moq' => $item->moq,
            'stock' => $stok,
            'peruntukan' => $item->peruntukan,
            'kebutuhan' => $item->kebutuhan,
        );

    }

    return json_encode($html);
}

public function fetchBudgetList(Request $request)
{

    // $fiscal = $request->get('fy');

    $budgets = AccBudget::select('acc_budgets.budget_no', 'acc_budgets.description')
    ->where('category', '=', 'Expenses')
    ->where('periode', '=', 'FY200')
    ->where('account_name', '<>', 'Meal')
    ->distinct();

    if ($request->get('department') == "General Affairs Department") {
        $dept = "Human Resources Department";
        $budgets->where('department', '=', $dept);
    }
    else if($request->get('department') == "Purchasing Control Department") {
        $dept = "Procurement Department";
        $budgets->where('department', '=', $dept);
    }
    else if ($request->get('department') == "Management Information System Department") {

    }
    else{
        $dept = $request->get('department');
        $budgets->where('department', '=', $dept);
    }

    $budget_all = $budgets->get();

    $response = array(
        'status' => true,
        'budget' => $budget_all
    );

    return Response::json($response);
}

public function get_exchange_rate(Request $request)
{
    $html = array();
    $date = date('Y-m') . "-01";

    if ($date == "")
    {

    }

    $rate_a = AccExchangeRate::where('periode', '=', $date)->orderBy('rate', 'DESC')
    ->get();

        // foreach ($rate_a as $rate) {
        //     $html = array(
        //       'currency' => $rate->currency,
        //       'rate' => $rate->rate
        //     );
        // }
    return json_encode($rate_a);
}

public function prgetbudgetdesc(Request $request)
{
    $html = array();

    $tahun = date('Y');
    $namabulan = date('F');
    $bulan = strtolower(date('M'));

        // $tglnow = date('Y-m-d');
        // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$tglnow'");

        // foreach ($fy as $fys) {
        //     $fiscal = $fys->fiscal_year;
        // }

    $getbulan = AccBudget::select('budget_no', 'periode')
    ->where('budget_no', $request->budget_no)
    ->first();

    if ($getbulan->periode == "FY200") {
        $bulan = strtolower(date('M'));
    }
    else{
        $bulan = "apr";
    }

        // $date = date('Y-m-d', strtotime(date('Y-m-d') . ' + 21 days'));
        // $bulan = date("m", strtotime($date));

    $budget_no = AccBudget::SELECT('*',$bulan.'_sisa_budget as budget_now')
    ->where('budget_no', $request->budget_no)->get();

    foreach ($budget_no as $budget)
    {
        $html = array(
            'description' => $budget->description,
            'amount' => $budget->amount,
            'account' => $budget->account_name,
            'category' => $budget->category,
            'apr' => $budget->apr_sisa_budget,
            'may' => $budget->may_sisa_budget,
            'jun' => $budget->jun_sisa_budget,
            'jul' => $budget->jul_sisa_budget,
            'aug' => $budget->aug_sisa_budget,
            'sep' => $budget->sep_sisa_budget,
            'oct' => $budget->oct_sisa_budget,
            'nov' => $budget->nov_sisa_budget,
            'dec' => $budget->dec_sisa_budget,
            'jan' => $budget->jan_sisa_budget,
            'feb' => $budget->feb_sisa_budget,
            'mar' => $budget->mar_sisa_budget,
            'budget_now' => $budget->budget_now,
            'namabulan' => $namabulan,
            'periode' => $budget->periode
        );

    }

    return json_encode($html);
}

public function get_nomor_pr(Request $request)
{
    $datenow = date('Y-m-d');
    $tahun = date('y');
    $bulan = date('m');
    $dept = $request->dept;
    $sect = $request->sect;
    $grp = $request->grp;

    $query = "SELECT no_pr FROM `acc_purchase_requisitions` where department = '$dept' and DATE_FORMAT(submission_date, '%y') = '$tahun' and month(submission_date) = '$bulan' order by id DESC LIMIT 1";
    $nomorurut = DB::select($query);

    if ($nomorurut != null)
    {
        $nomor = substr($nomorurut[0]->no_pr, -3);
        $nomor = $nomor + 1;
        $nomor = sprintf('%03d', $nomor);
    }
    else
    {
        $nomor = "001";
    }

    if ($dept == "Management Information System Department")
    {
        $dept = "IT";
    }
    else if ($dept == "Accounting Department")
    {
        $dept = "AC";
    }
    else if ($dept == "Woodwind Instrument - Assembly (WI-A) Department")
    {
        $dept = "AS";
    }
    else if ($dept == "Educational Instrument (EI) Department")
    {
        $dept = "EI";
    }
    else if ($dept == "General Affairs Department")
    {
        $dept = "GA";
    }
    else if ($dept == "Human Resources Department")
    {
        $dept = "HR";
    }
    else if ($dept == "Logistic Department")
    {
        $dept = "LG";
    }
    else if ($dept == "Maintenance Department")
    {
        if($sect == "Chemical Process Control Section"){
            $dept = "CM";
        }
        else{
            $dept = "PM";
        }
        
    }
    else if ($dept == "Procurement Department" || $dept == "Purchasing Control Department")
    {
        $dept = "PH";
    }
    else if ($dept == "Production Control Department")
    {
        $dept = "PC";
    }
    else if ($dept == "Production Engineering Department")
    {
        $dept = "PE";
    }
    else if ($dept == "Standardization Department")
    {
        if($sect == "Standardization Process Control Section"){
            $dept = "SR";
        }
        else{
            $dept = "QC";
        }
    }
    else if ($dept == "Woodwind Instrument - Welding Process (WI-WP) Department")
    {
        $dept = "WP";
    }
    else if ($dept == "Woodwind Instrument - Surface Treatment (WI-ST) Department"){
        $dept = "ST";
    }
    else if ($dept == "Woodwind Instrument - Parts Process (WI-PP) Department"){
        $dept = "PP";
    }

    $result['tahun'] = $tahun;
    $result['bulan'] = $bulan;
    $result['dept'] = $dept;
    $result['no_urut'] = $nomor;

    return json_encode($result);
}

public function create_purchase_requisition(Request $request)
{
    $id = Auth::id();

    $lop = $request->get('lop');

    try
    {
        $staff = null;
        $manager = null;
        $manager_name = null;
        $posisi = null;
        $dgm = null;
        $gm = null;

            //jika PE maka Pak Alok

        if($request->get('department') == "Production Engineering Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Maintenance Department' and position LIKE 'manager%'");
        }

            //Jika Pch / Proc maka pak imron
        else if($request->get('department') == "Purchasing Control Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Procurement Department' and position LIKE 'manager%'");
        }

            //Jika GA pak arief
        else if($request->get('department') == "General Affairs Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Human Resources Department' and position LIKE 'manager%'");
        }

            //Jika EI maka Assy
        else if($request->get('department') == "Educational Instrument (EI) Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Woodwind Instrument - Assembly (WI-A) Department' and position LIKE 'manager%'");
        }

        else
        {
                // Get Manager
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = '" . $request->get('department') . "' and position LIKE 'manager%'");
        }

            // Jika ada staff
        if ($request->get('staff') != "") {

            $posisi = "staff";
            $staff = $request->get('staff');

            foreach ($manag as $mg)
            {
                $manager = $mg->employee_id;
                $manager_name = $mg->name;
            }
        }

            //cek manager ada atau tidak

        else if ($manag != null)
        {
                // $posisi = "manager";
            $posisi = "user";

            foreach ($manag as $mg)
            {
                $manager = $mg->employee_id;
                $manager_name = $mg->name;
            }
        }


            // Jika gaada manager di departemen itu
        else
        {
                // $posisi = "dgm";
            $posisi = "user";
        }

            //Cek File
        $files = array();
        $file = new AccPurchaseRequisition();
        if ($request->file('reportAttachment') != NULL)
        {
            if ($files = $request->file('reportAttachment'))
            {
                foreach ($files as $file)
                {
                    $nama = $file->getClientOriginalName();
                    $file->move('files/pr', $nama);
                    $data[] = $nama;
                }
            }
            $file->filename = json_encode($data);
        }
        else
        {
            $file->filename = NULL;
        }

        $submission_date = $request->get('submission_date');
        $po_date = date('Y-m-d', strtotime($submission_date . ' + 7 days'));


        if($request->get('department') == "Human Resources Department" || $request->get('department') == "General Affairs Department" || $request->get('department') == "Standardization Department"){
            $dgm = null;

                // GM Pak Arief
            $getgm = EmployeeSync::select('employee_id', 'name', 'position')
            ->where('employee_id','=','PI9709001')
            ->first();

            $gm = $getgm->employee_id;

                // $gm = null;
        }
            //if Production Support Division Maka GM Pak Budhi
        else if($request->get('department') == "Logistic Department" || $request->get('department') == "Production Control Department" || $request->get('department') == "Purchasing Control Department" || $request->get('department') == "Procurement Department" ){
            $dgm = $this->dgm_ps;
            $gm = $this->dgm;
        }
            //if accounting maka GM Pak IDA
        else if($request->get('department') == "Accounting Department"){
            $dgm = null;
            $gm = $this->gm_acc;

        }
            //Selain Itu GM Pak Hayakawa
        else{
            $dgm = $this->dgm;
            $gm = $this->gm;
            // $dgm = null;
            // $gm = $this->dgm;
        }


        $data = new AccPurchaseRequisition([
            'no_pr' => $request->get('no_pr') , 
            'emp_id' => $request->get('emp_id') , 
            'emp_name' => $request->get('emp_name') , 
            'department' => $request->get('department') , 
            'section' => $request->get('section') , 
            'submission_date' => $submission_date, 
            'po_due_date' => $po_date, 
            'note' => $request->get('note') , 
            'file' => $file->filename, 
            'file_pdf' => 'PR'.$request->get('no_pr').'.pdf', 
            'posisi' => $posisi, 
            'status' => 'approval', 
            'no_budget' => $request->get('budget_no'), 
            'staff' => $staff,
            'manager' => $manager,
            'manager_name' => $manager_name,
            'dgm' => $dgm, 
            'gm' => $gm, 
            'created_by' => $id
        ]);

        $data->save();

            // $mod_date = date('Y-m-d', strtotime($request->get('submission_date') . ' + 21 days'));

        for ($i = 1;$i <= $lop;$i++)
        {
            $item_code = "item_code" . $i;
            $item_desc = "item_desc" . $i;
            $item_spec = "item_spec" . $i;
            $item_stock = "item_stock" . $i;
            $item_request_date = "req_date" . $i;
            $item_currency = "item_currency" . $i;
            $item_currency_text = "item_currency_text" . $i;
            $item_price = "item_price" . $i;
            $item_qty = "qty" . $i;
            $item_uom = "uom" . $i;
            $item_amount = "amount" . $i;
            $penerima = "tujuan_penerima" . $i;
            $peruntukan = "tujuan_peruntukan" . $i;
            $kebutuhan = "tujuan_kebutuhan" . $i;
                // $item_budget = "budget".$i;
            $status = "";
                //Jika ada value kosong
            if ($request->get($item_code) == "kosong")
            {
                $request->get($item_code) == "";
            }

                //Jika item kosong
            if ($request->get($item_code) != null)
            {
                $status = "fixed";
            }
            else
            {
                $status = "sementara";
            }

            if ($request->get($item_currency) != "")
            {
                $current = $request->get($item_currency);
            }
            else if ($request->get($item_currency_text) != "")
            {
                $current = $request->get($item_currency_text);
            }

                //get only number
                // $price_real = preg_replace('/[^0-9]/', '', $request->get($item_price));
                // $amount = preg_replace('/[^0-9]/', '', $request->get($item_amount));


            $data2 = new AccPurchaseRequisitionItem([
                'no_pr' => $request->get('no_pr') , 
                'item_code' => $request->get($item_code) ,
                'item_desc' => $request->get($item_desc) ,
                'item_spec' => $request->get($item_spec) ,
                'item_stock' => $request->get($item_stock) , 
                'item_request_date' => $request->get($item_request_date), 
                'item_currency' => $current, 
                'item_price' => $request->get($item_price), 
                'item_qty' => $request->get($item_qty),
                'item_uom' => $request->get($item_uom),
                'item_amount' => $request->get($item_amount),
                'penerima' => $request->get($penerima),
                'peruntukan' => $request->get($peruntukan),
                'kebutuhan' => $request->get($kebutuhan),
                'status' => $status,
                'created_by' => $id
            ]);

            $data2->save();

            $dollar = "konversi_dollar" . $i;

            $getbulan = AccBudget::select('budget_no', 'periode')
            ->where('budget_no', $request->get('budget_no'))
            ->first();

            if ($getbulan->periode == "FY200") {
                $month = strtolower(date('M'));
            }
            else{
                $month = "apr";
            }

                // $month = strtolower(date("M",strtotime($request->get('submission_date'))));

            $data3 = new AccBudgetHistory([
                'budget' => $request->get('budget_no'),
                'budget_month' => $month,
                'budget_date' => date('Y-m-d'),
                'category_number' => $request->get('no_pr'),
                'no_item' => $request->get($item_desc),
                'beg_bal' => $request->get('budget'),
                'amount' => $request->get($dollar),
                'status' => 'PR',
                'created_by' => $id
            ]);

            $data3->save();


            $updatekebutuhan = AccItem::where('kode_item','=',$request->get($item_code))->update([
                'peruntukan' => $request->get($peruntukan),
                'kebutuhan' => $request->get($kebutuhan)
            ]);

        }

        $totalPembelian = $request->get('TotalPembelian');
        if ($totalPembelian != null) {
                // $datePembelian = date('Y-m-d');
                // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$datePembelian'");
                // foreach ($fy as $fys) {
                //     $fiscal = $fys->fiscal_year;
                // }
                // $bulan = strtolower(date("M",strtotime($datePembelian))); //aug,sep,oct

            $getbulan = AccBudget::select('budget_no', 'periode')
            ->where('budget_no', $request->get('budget_no'))
            ->first();

            if ($getbulan->periode == "FY200") {
                $bulan = strtolower(date('M'));
                $fiscal = "FY200";
            }
            else{
                $bulan = "apr";
                $fiscal = "FY201";
            }

            $sisa_bulan = $bulan.'_sisa_budget';                    
                //get Data Budget Based On Periode Dan Nomor
            $budget = AccBudget::where('budget_no','=',$request->get('budget_no'))->first();
                //perhitungan 
            $total = $budget->$sisa_bulan - $totalPembelian;

            if ($total < 0 ) {
                return false;
            }

            $dataupdate = AccBudget::where('budget_no',$request->get('budget_no'))->update([
                $sisa_bulan => $total
            ]);
        }


        $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
        ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
        ->join('acc_budget_histories', function($join) {
         $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
         $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
     })
        ->where('acc_purchase_requisitions.id', '=', $data->id)
        ->distinct()
        ->get();

        $exchange_rate = AccExchangeRate::select('*')
        ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
        ->where('currency','!=','USD')
        ->orderBy('currency','ASC')
        ->get();

            //SELECT * FROM `acc_purchase_requisitions` left join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr join acc_budget_histories on acc_purchase_requisition_items.no_pr = acc_budget_histories.category_number and acc_purchase_requisition_items.item_desc = acc_budget_histories.no_item where acc_purchase_requisitions.id = "45" 

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'landscape');

        $pdf->loadView('accounting_purchasing.report.report_pr', array(
            'pr' => $detail_pr,
            'rate' => $exchange_rate
        ));

        $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

            // $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.staff = users.username where acc_purchase_requisitions.id = " . $data->id;
            // $mailtoo = DB::select($mails);

            // // Jika gaada staff
            // if ($mailtoo == null)
            // {   
            //     //ke manager
            //     $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.manager = users.username where acc_purchase_requisitions.id = " . $data->id;
            //     $mailtoo = DB::select($mails);

            //     // Jika Gaada Manager
            //     if ($mailtoo == null)
            //     { 
            //         // ke DGM
            //         $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.dgm = users.username where acc_purchase_requisitions.id = " . $data->id;
            //         $mailtoo = DB::select($mails);
            //     }

            // }

            // $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $data->id;
            // $purchaserequisition = db::select($isimail);

            // Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($purchaserequisition, 'purchase_requisition'));

        return redirect('/purchase_requisition')->with('status', 'PR Berhasil Dibuat')
        ->with('page', 'Purchase Requisition');
    }
    catch(QueryException $e)
    {
        return redirect('/purchase_requisition')->with('error', $e->getMessage())
        ->with('page', 'Purchase Requisition');
    }
}

public function pr_send_email(Request $request){
    $pr = AccPurchaseRequisition::find($request->get('id'));

    try{
        if ($pr->posisi == "user")
        {
            $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.staff = users.username where acc_purchase_requisitions.id = ".$request->get('id');
            $mailtoo = DB::select($mails);

            $pr->posisi = "staff";

                    // Jika gaada staff
            if ($mailtoo == null)
            {   
                        //ke manager
                $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.manager = users.username where acc_purchase_requisitions.id = ".$request->get('id');
                $mailtoo = DB::select($mails);

                $pr->posisi = "manager";

                        // Jika Gaada Manager
                if ($mailtoo == null)
                { 
                            // ke DGM
                    $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.dgm = users.username where acc_purchase_requisitions.id = ".$request->get('id');
                    $mailtoo = DB::select($mails);

                    $pr->posisi = "dgm";

                    // Jika Gaada DGM
                    if ($mailtoo == null)
                    { 
                                // ke GM
                        $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.gm = users.username where acc_purchase_requisitions.id = ".$request->get('id');
                        $mailtoo = DB::select($mails);

                        $pr->posisi = "gm";
                    }
                }

            }

            $pr->save();

            $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id = ".$request->get('id');
            $purchaserequisition = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($purchaserequisition, 'purchase_requisition'));

            $response = array(
              'status' => true,
              'datas' => "Berhasil"
          );

            return Response::json($response);
        }
    } 
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'datas' => "Gagal"
      );
        return Response::json($response);
    }
}

public function pr_resend_email(Request $request){
    $pr = AccPurchaseRequisition::find($request->get('id'));

    try{
        if ($pr->posisi == "manager")
        {
            $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.manager = users.username where acc_purchase_requisitions.id = ".$request->get('id');
            $mailtoo = DB::select($mails);
        }
        else if($pr->posisi == "dgm"){
            $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.dgm = users.username where acc_purchase_requisitions.id = ".$request->get('id');
            $mailtoo = DB::select($mails);
        }
        else if($pr->posisi == "gm"){
            $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.gm = users.username where acc_purchase_requisitions.id = ".$request->get('id');
            $mailtoo = DB::select($mails);
        }

        $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id = ".$request->get('id');
        $purchaserequisition = db::select($isimail);

        Mail::to($mailtoo[0]->email)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($purchaserequisition, 'purchase_requisition'));

        $response = array(
          'status' => true,
          'datas' => "Berhasil"
      );

        return Response::json($response);

    } 
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'datas' => "Gagal"
      );
        return Response::json($response);
    }
}

    //==================================//
    //          Detail PR               //
    //==================================//
public function detail_purchase_requisition($id)
{
    $emp_id = Auth::user()->username;
    $_SESSION['KCFINDER']['uploadURL'] = url("kcfinderimages/" . $emp_id);

    $pr = AccPurchaseRequisition::find($id);

    $items = AccPurchaseRequisitionItem::select('acc_purchase_requisition_items.*')->join('acc_purchase_requisitions', 'acc_purchase_requisition_items.no_pr', '=', 'acc_purchase_requisitions.no_pr')
    ->where('acc_purchase_requisitions.id', '=', $id)->get();

    return view('accounting_purchasing.detail_purchase_requisition', array(
        'pr' => $pr,
        'items' => $items
    ))->with('page', 'Purchase Requisition');
}

public function check_purchase_requisition($id)
{
    $emp_id = Auth::user()->username;

    $pr = AccPurchaseRequisition::find($id);

    $items = AccPurchaseRequisitionItem::select('acc_purchase_requisition_items.*')->join('acc_purchase_requisitions', 'acc_purchase_requisition_items.no_pr', '=', 'acc_purchase_requisitions.no_pr')
    ->where('acc_purchase_requisitions.id', '=', $id)->get();

    $path = '/pr_list/' . $pr->file_pdf;            
    $file_path = asset($path);

    return view('accounting_purchasing.check_purchase_requisition', array(
        'pr' => $pr,
        'items' => $items,
        'file_path' => $file_path,
        'uom' => $this->uom
    ))->with('page', 'Purchase Requisition');
}

public function checked_purchase_requisition(Request $request, $id){

    $pr = AccPurchaseRequisition::find($id);

    if ($pr->posisi == "staff")
    {
        if ($pr->manager != null) {
            $pr->posisi = 'manager';

            $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.manager = users.username where acc_purchase_requisitions.id = " .$id;
            $mailtoo = DB::select($mails);
        }
        else{
            $pr->posisi = 'dgm';

            $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.dgm = users.username where acc_purchase_requisitions.id = " .$id;
            $mailtoo = DB::select($mails);
        }

        $pr->save();

        $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
        ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
        ->join('acc_budget_histories', function($join) {
         $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
         $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
     })
        ->where('acc_purchase_requisitions.id', '=', $id)
        ->distinct()
        ->get();

        $exchange_rate = AccExchangeRate::select('*')
        ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
        ->where('currency','!=','USD')
        ->orderBy('currency','ASC')
        ->get();


        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'landscape');

        $pdf->loadView('accounting_purchasing.report.report_pr', array(
            'pr' => $detail_pr,
            'rate' => $exchange_rate
        ));

        $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

        $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $id;
        $pr_isi = db::select($isimail);

            //CEK APAR

        $apar = UtilityItemNumber::pluck('item_number');

        $pr_item = AccPurchaseRequisitionItem::where('no_pr', '=', $pr_isi[0]->no_pr)->whereIn('item_code', $apar)->get();

        if ($pr_item->count() > 0) {
            $cek_apar = db::select("SELECT item_number, utility_code, utilities.id from utilities
                left join utility_item_numbers on utilities.type = utility_item_numbers.utility_type and utilities.capacity = utility_item_numbers.utility_capacity and utilities.`order` = utility_item_numbers.remark
                where utilities.remark = 'APAR'
                and DATE_SUB(exp_date, INTERVAL 3 MONTH) >= DATE(now()) and DATE_SUB(exp_date, INTERVAL 3 MONTH) <= DATE_FORMAT(DATE_ADD(now(), INTERVAL 6 DAY),'%Y-%m-%d')");

            foreach ($pr_item as $itm) {
                for ($i=1; $i < $pr_item->item_qty; $i++) { 
                    foreach ($cek_apar as $apar_exp) {
                        if ($apar_exp->item_number == $itm->item_code) {
                            $ord = new UtilityOrder;
                            $ord->utility_id = $apar_exp->id;
                            $ord->no_pr = $itm->no_pr;
                            $ord->pr_date = $itm->item_request_date;
                            $ord->created_by = 'PI1404002';

                            $ord->save();
                        }
                    }
                }
            }
        }

        Mail::to($mailtoo)->send(new SendEmail($pr_isi, 'purchase_requisition'));

        return redirect('/purchase_requisition/check/'.$id)->with('status', 'PR Berhasil Dicek & Dikirim')
        ->with('page', 'Purchase Requisition');
    }

    else if($pr->posisi == "pch"){
        $pr->receive_date = date('Y-m-d');
        $pr->status = 'received';
        $pr->save();

        $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
        ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
        ->join('acc_budget_histories', function($join) {
         $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
         $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
     })
        ->where('acc_purchase_requisitions.id', '=', $id)
        ->distinct()
        ->get();

        $exchange_rate = AccExchangeRate::select('*')
        ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
        ->where('currency','!=','USD')
        ->orderBy('currency','ASC')
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'landscape');

        $pdf->loadView('accounting_purchasing.report.report_pr', array(
            'pr' => $detail_pr,
            'rate' => $exchange_rate
        ));

        $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");


        return redirect('/purchase_requisition/check/'.$id)->with('status', 'PR Sudah Berhasil Diterima')
        ->with('page', 'Purchase Requisition');
    }
}


    //==================================//
    //          Report PR               //
    //==================================//
public function report_purchase_requisition($id){

    $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
    ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
    ->join('acc_budget_histories', function($join) {
     $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
     $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
 })
    ->where('acc_purchase_requisitions.id', '=', $id)
    ->distinct()
    ->get();

    $exchange_rate = AccExchangeRate::select('*')
    ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
    ->where('currency','!=','USD')
    ->orderBy('currency','ASC')
    ->get();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'landscape');

    $pdf->loadView('accounting_purchasing.report.report_pr', array(
        'pr' => $detail_pr,
        'rate' => $exchange_rate
    ));

        // $pdf->save(public_path() . "/pr/" . $reports[0]->id . ".pdf");

    $path = "pr_list/" . $detail_pr[0]->no_pr . ".pdf";
    return $pdf->stream("PR ".$detail_pr[0]->no_pr. ".pdf");

        // return view('accounting_purchasing.report.report_pr', array(
        //  'pr' => $detail_pr,
        // ))->with('page', 'PR')->with('head', 'PR List');
}

    //==================================//
    //          Verifikasi PR           //
    //==================================//
public function verifikasi_purchase_requisition($id)
{
    $pr = AccPurchaseRequisition::find($id);

    $items = AccPurchaseRequisitionItem::select('acc_purchase_requisition_items.*')->join('acc_purchase_requisitions', 'acc_purchase_requisition_items.no_pr', '=', 'acc_purchase_requisitions.no_pr')
    ->where('acc_purchase_requisitions.id', '=', $id)->get();

    $path = '/pr_list/' . $pr->file_pdf;            
    $file_path = asset($path);

    return view('accounting_purchasing.verifikasi.pr_verifikasi', array(
        'pr' => $pr,
        'items' => $items,
        'file_path' => $file_path,
    ))->with('page', 'Purchase Requisition');
}

public function approval_purchase_requisition(Request $request, $id)
{
    $approve = $request->get('approve');

    if ($approve == "1") {

        $pr = AccPurchaseRequisition::find($id);

        if ($pr->posisi == "manager")
        {

            if ($pr->dgm != null) {
                $pr->posisi = "dgm";
                $pr->approvalm = "Approved";
                $pr->dateapprovalm = date('Y-m-d H:i:s');

                $mailto = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.dgm = users.username where acc_purchase_requisitions.id = '" . $pr->id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }
            }
            else{
                $pr->posisi = "gm";
                $pr->approvalm = "Approved";
                $pr->dateapprovalm = date('Y-m-d H:i:s');

                $mailto = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.gm = users.username where acc_purchase_requisitions.id = '" . $pr->id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }
            }
        }

        else if ($pr->posisi == "dgm")
        {

            $pr->posisi = "gm";
            $pr->approvaldgm = "Approved";
            $pr->dateapprovaldgm = date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.gm = users.username where acc_purchase_requisitions.id = '" . $pr->id . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }
        }

        else if ($pr->posisi == "gm")
        {

            $pr->posisi = 'pch';
            $pr->approvalgm = "Approved";
            $pr->dateapprovalgm = date('Y-m-d H:i:s');
            $pr->status = "approval_acc";

                //kirim email ke Mas Shega & Mas Hamzah
            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020' or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
            $mailtoo = DB::select($mails);
        }

        $pr->save();

        $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
        ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
        ->join('acc_budget_histories', function($join) {
         $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
         $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
     })
        ->where('acc_purchase_requisitions.id', '=', $id)
        ->distinct()
        ->get();

        $exchange_rate = AccExchangeRate::select('*')
        ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
        ->where('currency','!=','USD')
        ->orderBy('currency','ASC')
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'landscape');

        $pdf->loadView('accounting_purchasing.report.report_pr', array(
            'pr' => $detail_pr,
            'rate' => $exchange_rate
        ));

        $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

        $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
        $pr_isi = db::select($isimail);

        Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($pr_isi, 'purchase_requisition'));

        return redirect('/purchase_requisition/verifikasi/' . $id)->with('status', 'PR Approved')
        ->with('page', 'Purchase Requisition');
    }
    else
    {
        return redirect('/purchase_requisition/verifikasi/' . $id)->with('error', 'PR Not Approved')
        ->with('page', 'Purchase Requisition');
    }
}

public function prapprovalmanager($id){
    $pr = AccPurchaseRequisition::find($id);
    try{
        if ($pr->posisi == "manager")
        {
            if ($pr->dgm != null) {
                $pr->posisi = "dgm";
                $pr->approvalm = "Approved";
                $pr->dateapprovalm = date('Y-m-d H:i:s');

                $mailto = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.dgm = users.username where acc_purchase_requisitions.id = '" . $pr->id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                $pr->save();

                $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
                ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
                ->join('acc_budget_histories', function($join) {
                 $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
                 $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
             })
                ->where('acc_purchase_requisitions.id', '=', $id)
                ->distinct()
                ->get();

                $exchange_rate = AccExchangeRate::select('*')
                ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
                ->where('currency','!=','USD')
                ->orderBy('currency','ASC')
                ->get();


                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'landscape');

                $pdf->loadView('accounting_purchasing.report.report_pr', array(
                    'pr' => $detail_pr,
                    'rate' => $exchange_rate
                ));

                $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

                $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
                $pr_isi = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($pr_isi, 'purchase_requisition'));

                $message = 'PR No '.$pr->no_pr;
                $message2 ='Berhasil di approve';
            }
            else if ($pr->gm != null) {

                $pr->posisi = "gm";
                $pr->approvalm = "Approved";
                $pr->dateapprovalm = date('Y-m-d H:i:s');

                $mailto = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.gm = users.username where acc_purchase_requisitions.id = '" . $pr->id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                $pr->save();

                $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
                ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
                ->join('acc_budget_histories', function($join) {
                 $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
                 $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
             })
                ->where('acc_purchase_requisitions.id', '=', $id)
                ->distinct()
                ->get();

                $exchange_rate = AccExchangeRate::select('*')
                ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
                ->where('currency','!=','USD')
                ->orderBy('currency','ASC')
                ->get();


                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'landscape');

                $pdf->loadView('accounting_purchasing.report.report_pr', array(
                    'pr' => $detail_pr,
                    'rate' => $exchange_rate
                ));

                $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

                $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
                $pr_isi = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($pr_isi, 'purchase_requisition'));

                $message = 'PR No. '.$pr->no_pr;
                $message2 ='Berhasil di approve';

                $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
                ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
                ->join('acc_budget_histories', function($join) {
                 $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
                 $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
             })
                ->where('acc_purchase_requisitions.id', '=', $id)
                ->distinct()
                ->get();

                $exchange_rate = AccExchangeRate::select('*')
                ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
                ->where('currency','!=','USD')
                ->orderBy('currency','ASC')
                ->get();


                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'landscape');

                $pdf->loadView('accounting_purchasing.report.report_pr', array(
                    'pr' => $detail_pr,
                    'rate' => $exchange_rate
                ));

                $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");
            }
            else{
                $pr->posisi = 'pch';
                $pr->approvalm = "Approved";
                $pr->dateapprovalm = date('Y-m-d H:i:s');
                $pr->status = "approval_acc";

                    //kirim email ke Mas Shega & Mas Hamzah
                $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
                $mailtoo = DB::select($mails);

                $pr->save();

                $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
                ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
                ->join('acc_budget_histories', function($join) {
                 $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
                 $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
             })
                ->where('acc_purchase_requisitions.id', '=', $id)
                ->distinct()
                ->get();

                $exchange_rate = AccExchangeRate::select('*')
                ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
                ->where('currency','!=','USD')
                ->orderBy('currency','ASC')
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'landscape');

                $pdf->loadView('accounting_purchasing.report.report_pr', array(
                    'pr' => $detail_pr,
                    'rate' => $exchange_rate
                ));

                $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

                $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
                $pr_isi = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($pr_isi, 'purchase_requisition'));

                $message = 'PR No '.$pr->no_pr;
                $message2 ='Successfully Approved';

                $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
                ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
                ->join('acc_budget_histories', function($join) {
                 $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
                 $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
             })
                ->where('acc_purchase_requisitions.id', '=', $id)
                ->distinct()
                ->get();

                $exchange_rate = AccExchangeRate::select('*')
                ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
                ->where('currency','!=','USD')
                ->orderBy('currency','ASC')
                ->get();


                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'landscape');

                $pdf->loadView('accounting_purchasing.report.report_pr', array(
                    'pr' => $detail_pr,
                    'rate' => $exchange_rate
                ));

                $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");
            }

        }
        else{
            if ($pr->posisi == "user") {
                $message = 'PR No. '.$pr->no_pr;
                $message2 ='Telah Di Reject Sebelumnya';
            } else{
                $message = 'PR No. '.$pr->no_pr;
                $message2 ='Telah Di Approve Sebelumnya';
            }
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}

public function prapprovaldgm($id){
    $pr = AccPurchaseRequisition::find($id);
    try{
        if ($pr->posisi == "dgm")
        {

            $pr->posisi = "gm";
            $pr->approvaldgm = "Approved";
            $pr->dateapprovaldgm = date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.gm = users.username where acc_purchase_requisitions.id = '" . $pr->id . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $pr->save();

            $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
            ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
            ->join('acc_budget_histories', function($join) {
             $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
             $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
         })
            ->where('acc_purchase_requisitions.id', '=', $id)
            ->distinct()
            ->get();

            $exchange_rate = AccExchangeRate::select('*')
            ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
            ->where('currency','!=','USD')
            ->orderBy('currency','ASC')
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'landscape');

            $pdf->loadView('accounting_purchasing.report.report_pr', array(
                'pr' => $detail_pr,
                'rate' => $exchange_rate
            ));

            $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

            $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
            $pr_isi = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($pr_isi, 'purchase_requisition'));

            $message = 'PR No. '.$pr->no_pr;
            $message2 ='Berhasil di approve';

            $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
            ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
            ->join('acc_budget_histories', function($join) {
             $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
             $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
         })
            ->where('acc_purchase_requisitions.id', '=', $id)
            ->distinct()
            ->get();

            $exchange_rate = AccExchangeRate::select('*')
            ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
            ->where('currency','!=','USD')
            ->orderBy('currency','ASC')
            ->get();


            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'landscape');

            $pdf->loadView('accounting_purchasing.report.report_pr', array(
                'pr' => $detail_pr,
                'rate' => $exchange_rate
            ));

            $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");
        }
        else{
            if ($pr->posisi == "user") {
                $message = 'PR No. '.$pr->no_pr;
                $message2 ='Telah Di Reject Sebelumnya';
            } else{
                $message = 'PR No. '.$pr->no_pr;
                $message2 ='Telah Di Approve Sebelumnya';
            }
                // $message = 'PR dengan Nomor. '.$pr->no_pr;
                // $message2 ='Sudah di approve/reject';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}

public function prapprovalgm($id){
    $pr = AccPurchaseRequisition::find($id);
    try{
        if ($pr->posisi == "gm")
        {
            $pr->posisi = 'pch';
            $pr->approvalgm = "Approved";
            $pr->dateapprovalgm = date('Y-m-d H:i:s');
            $pr->status = "approval_acc";

                //kirim email ke Mas Shega & Mas Hamzah
            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
            $mailtoo = DB::select($mails);

            $pr->save();

            $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
            ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
            ->join('acc_budget_histories', function($join) {
             $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
             $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
         })
            ->where('acc_purchase_requisitions.id', '=', $id)
            ->distinct()
            ->get();

            $exchange_rate = AccExchangeRate::select('*')
            ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
            ->where('currency','!=','USD')
            ->orderBy('currency','ASC')
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'landscape');

            $pdf->loadView('accounting_purchasing.report.report_pr', array(
                'pr' => $detail_pr,
                'rate' => $exchange_rate
            ));

            $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

            $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
            $pr_isi = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($pr_isi, 'purchase_requisition'));

            $message = 'PR No '.$pr->no_pr;
            $message2 ='Successfully Approved';

            $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
            ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
            ->join('acc_budget_histories', function($join) {
             $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
             $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
         })
            ->where('acc_purchase_requisitions.id', '=', $id)
            ->distinct()
            ->get();

            $exchange_rate = AccExchangeRate::select('*')
            ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
            ->where('currency','!=','USD')
            ->orderBy('currency','ASC')
            ->get();


            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'landscape');

            $pdf->loadView('accounting_purchasing.report.report_pr', array(
                'pr' => $detail_pr,
                'rate' => $exchange_rate
            ));

            $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");
        }
        else{
            if ($pr->posisi == "user") {
                $message = 'PR No. '.$pr->no_pr;
                $message2 ='Already Rejected';
            } else{
                $message = 'PR No. '.$pr->no_pr;
                $message2 ='Already Approved';
            }
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}

public function prreject(Request $request, $id)
{
    $pr = AccPurchaseRequisition::find($id);

    if ($pr->posisi == "manager" || $pr->posisi == "dgm" || $pr->posisi == "gm")
    {
        $pr->datereject = date('Y-m-d H:i:s');
        $pr->posisi = "user";
        $pr->approvalm = null;
        $pr->dateapprovalm = null;
        $pr->approvaldgm = null;
        $pr->dateapprovaldgm = null;
    }

    $pr->save();

    $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
    $tolak = db::select($isimail);

        //kirim email ke User
    $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.emp_id = users.username where acc_purchase_requisitions.id ='" . $pr->id . "'";
    $mailtoo = DB::select($mails);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'purchase_requisition'));

    $message = 'PR No. '.$pr->no_pr;
    $message2 ='Berhasil Di Reject';

    return view('accounting_purchasing.verifikasi.pr_message', array(
        'head' => $pr->no_pr,
        'message' => $message,
        'message2' => $message2,
    ))->with('page', 'Approval');

}



public function reject_purchase_requisition(Request $request, $id)
{
    $alasan = $request->get('alasan');

    $pr = AccPurchaseRequisition::find($id);

    if ($pr->posisi == "manager" || $pr->posisi == "dgm" || $pr->posisi == "gm")
    {
        $pr->alasan = $alasan;
        $pr->datereject = date('Y-m-d H:i:s');
        $pr->posisi = "user";
        $pr->approvalm = null;
        $pr->dateapprovalm = null;
        $pr->approvaldgm = null;
        $pr->dateapprovaldgm = null;
    }

    $pr->save();

    $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
    $tolak = db::select($isimail);

        //kirim email ke User
    $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.emp_id = users.username where acc_purchase_requisitions.id ='" . $pr->id . "'";
    $mailtoo = DB::select($mails);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'purchase_requisition'));
    return redirect('/purchase_requisition/verifikasi/' . $id)->with('status', 'PR Not Approved')
    ->with('page', 'Purchase Requisition');
}

public function comment_purchase_requisition(Request $request, $id)
{
    $comment = $request->get('alasan');

    $pr = AccPurchaseRequisition::find($id);
    $pr->comment = $comment;
    $pr->save();

    $isimail = "select acc_purchase_requisitions.*,acc_purchase_requisition_items.item_stock, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.kebutuhan, acc_purchase_requisition_items.peruntukan, acc_purchase_requisition_items.item_qty, acc_purchase_requisition_items.item_uom, acc_purchase_requisition_items.item_request_date FROM acc_purchase_requisitions join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.id= " . $pr->id;
    $tolak = db::select($isimail);

        //kirim email ke User
    $mails = "select distinct email from acc_purchase_requisitions join users on acc_purchase_requisitions.emp_id = users.username where acc_purchase_requisitions.id ='" . $pr->id . "'";
    $mailtoo = DB::select($mails);

        //kirim email ke Mas Shega & Mas Hamzah
    $mailccs = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
    $mailtoocc = DB::select($mailccs);

    Mail::to($mailtoo)->cc($mailtoocc)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'purchase_requisition'));
    return redirect('/purchase_requisition/check/' . $id)->with('status', 'PR Already commended')
    ->with('page', 'Purchase Requisition');
}

public function edit_purchase_requisition(Request $request)
{
    $purchase_requistion = AccPurchaseRequisition::find($request->get('id'));
    $purchase_requistion_item = AccPurchaseRequisition::select('acc_purchase_requisition_items.*','acc_budget_histories.budget', 'acc_budget_histories.budget_month', 'acc_budget_histories.budget_date', 'acc_budget_histories.category_number','acc_budget_histories.no_item','acc_budget_histories.amount','acc_budget_histories.beg_bal','acc_purchase_requisition_items.penerima','acc_purchase_requisition_items.peruntukan','acc_purchase_requisition_items.kebutuhan')
    ->join('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
        // ->leftJoin('acc_items', 'acc_purchase_requisition_items.item_code', '=', 'acc_items.kode_item')
    ->join('acc_budget_histories', function($join) {
     $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
     $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
 })
    ->where('acc_purchase_requisitions.id', '=', $request->get('id'))
    ->whereNull('acc_purchase_requisition_items.sudah_po')
    ->get();

    $response = array(
        'status' => true,
        'purchase_requisition' => $purchase_requistion,
        'purchase_requisition_item' => $purchase_requistion_item
    );
    return Response::json($response);
}


public function tracing_purchase_requisition(Request $request)
{
    $purchase_requistion_item = AccPurchaseRequisition::select('acc_purchase_requisition_items.*','acc_budget_histories.status as status_pr','acc_budget_histories.po_number','acc_receives.date_receive as tanggal_diterima')
    ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
    ->leftJoin('acc_budget_histories', function($join) {
     $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
     $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
 })
    ->leftJoin('acc_receives', function($join) {
     $join->on('acc_receives.no_pr', '=', 'acc_purchase_requisition_items.no_pr');
     $join->on('acc_receives.nama_item','=', 'acc_purchase_requisition_items.item_desc');
 })
    ->where('acc_purchase_requisitions.id', '=', $request->get('id'))
    ->get();

    $response = array(
        'status' => true,
        'purchase_requisition_item' => $purchase_requistion_item
    );
    return Response::json($response);
}

public function edit_investment_po(Request $request)
{
    $investment = AccInvestment::find($request->get('id'));
    $investment_detail = AccInvestment::select('acc_investment_details.*')
    ->join('acc_investment_details','acc_investments.reff_number', '=','acc_investment_details.reff_number')
    ->where('acc_investments.id','=',$request->get('id'))
    ->whereNull('acc_investment_details.sudah_po')
    ->get();;

    $response = array(
        'status' => true,
        'investment' => $investment,
        'investment_detail' => $investment_detail
    );
    return Response::json($response);
}

public function detail_pr_po(Request $request)
{
    $purchase_requistion = AccPurchaseRequisition::find($request->get('id'));
    $purchase_requistion_item = AccPurchaseRequisition::select('acc_purchase_requisition_items.*','acc_budget_histories.budget', 'acc_budget_histories.budget_month', 'acc_budget_histories.budget_date', 'acc_budget_histories.category_number','acc_budget_histories.no_item','acc_budget_histories.amount','acc_budget_histories.beg_bal','acc_purchase_requisition_items.peruntukan','acc_purchase_requisition_items.kebutuhan')
    ->join('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
        // ->leftJoin('acc_items', 'acc_purchase_requisition_items.item_code', '=', 'acc_items.kode_item')
    ->join('acc_budget_histories', function($join) {
     $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
     $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
 })
    ->where('acc_purchase_requisitions.id', '=', $request->get('id'))
    ->get();

    $response = array(
        'status' => true,
        'purchase_requisition' => $purchase_requistion,
        'purchase_requisition_item' => $purchase_requistion_item
    );
    return Response::json($response);
}

public function update_purchase_requisition(Request $request)
{
    $id = Auth::id();
    $lop2 = $request->get('lop2');
    $lop = explode(',', $request->get('looping'));
    try
    {
        for ($i = 2;$i <= $lop2;$i++) { 
            $dollar = "konversi_dollar" . $i;

            $getbulan = AccBudget::select('budget_no', 'periode')
            ->where('budget_no', $request->get('no_budget_edit'))
            ->first();
            if ($getbulan->periode == "FY200") {
                $bulan = strtolower(date('M'));
            }
            else{
                $bulan = "apr";
            }

            $sisa_bulan = $bulan.'_sisa_budget';
            $budgetdata = AccBudget::where('budget_no','=',$request->get('no_budget_edit'))->first();
            $total_dollar = $request->get($dollar);
            $totalminusPO = $budgetdata->$sisa_bulan - $total_dollar;

            if ($totalminusPO < 0) {
                return redirect('/purchase_requisition')
                ->with('error', 'Total Melebihi Budget')
                ->with('page', 'Purchase Requisition');
            } 
        }

        foreach ($lop as $lp)
        {
            $item_code = "item_code_edit" . $lp;
            $item_desc = "item_desc_edit" . $lp;
            $item_spec = "item_spec_edit" . $lp;
            $tujuan_stock = "tujuan_stock_edit" . $lp;
            $item_uom = "uom_edit" . $lp;
            $item_req = "req_date_edit" . $lp;
            $item_qty = "qty_edit" . $lp;
            $item_price = "item_price_edit" . $lp;
            $item_amount = "amount_edit" . $lp;
            $tujuan_penerima = "tujuan_penerima_edit" . $lp;
            $tujuan_peruntukan = "tujuan_peruntukan_edit" . $lp;
            $tujuan_kebutuhan = "tujuan_kebutuhan_edit" . $lp;

                // $amount = preg_replace('/[^0-9]/', '', $request->get($item_amount));

            $data2 = AccPurchaseRequisitionItem::where('id', $lp)->update([
              'item_code' => $request->get($item_code), 
              'item_desc' => $request->get($item_desc), 
              'item_spec' => $request->get($item_spec),
              'item_stock' => $request->get($tujuan_stock), 
              'item_uom' => $request->get($item_uom), 
              'item_request_date' => $request->get($item_req), 
              'item_qty' => $request->get($item_qty),
              'item_price' => $request->get($item_price),
              'item_amount' => $request->get($item_amount),
              'penerima' => $request->get($tujuan_penerima), 
              'peruntukan' => $request->get($tujuan_peruntukan), 
              'kebutuhan' => $request->get($tujuan_kebutuhan), 
              'created_by' => $id
          ]);

            $dataupdate_item = AccItem::where('kode_item', $request->get($item_code))->update([
              'peruntukan' => $request->get($tujuan_peruntukan), 
              'kebutuhan' => $request->get($tujuan_kebutuhan)
          ]);

        }

        for ($i = 2;$i <= $lop2;$i++)
        {

            $item_code = "item_code" . $i;
            $item_desc = "item_desc" . $i;
            $item_spec = "item_spec" . $i;
            $item_req = "req_date" . $i;
            $item_currency = "item_currency" . $i;
            $item_currency_text = "item_currency_text" . $i;
            $item_price = "item_price" . $i;
            $item_qty = "qty" . $i;
            $item_uom = "uom" . $i;
            $item_amount = "amount" . $i;
            $dollar = "konversi_dollar" . $i;
            $penerima = "tujuan_penerima" . $i;
            $peruntukan = "tujuan_peruntukan" . $i;
            $kebutuhan = "tujuan_kebutuhan" . $i;
            $tujuan_stock = "tujuan_stock" . $i;
            $status = "";

                //Jika ada value kosong
            if ($request->get($item_code) == "kosong")
            {
                $request->get($item_code) == "";
            }

                //Jika item kosong
            if ($request->get($item_code) != null)
            {
                $status = "fixed";
            }
            else
            {
                $status = "sementara";
            }

            if ($request->get($item_currency) != "")
            {
                $current = $request->get($item_currency);
            }
            else if ($request->get($item_currency_text) != "")
            {
                $current = $request->get($item_currency_text);
            }

                //get only number
                // $price_real = preg_replace('/[^0-9]/', '', $request->get($item_price));
                // $amount = preg_replace('/[^0-9]/', '', $request->get($item_amount));

            $updatekebutuhan = AccItem::where('kode_item','=',$request->get($item_code))->update([
                'peruntukan' => $request->get($peruntukan),
                'kebutuhan' => $request->get($kebutuhan)
            ]);

            $data2 = new AccPurchaseRequisitionItem([
                'no_pr' => $request->get('no_pr_edit') , 
                'item_code' => $request->get($item_code) , 
                'item_desc' => $request->get($item_desc) , 
                'item_spec' => $request->get($item_spec) ,
                'item_stock' => $request->get($tujuan_stock) , 
                'item_request_date' => $request->get($item_req) , 
                'item_currency' => $current,
                'item_price' => $request->get($item_price),
                'item_qty' => $request->get($item_qty) , 
                'item_uom' => $request->get($item_uom) , 
                'item_amount' => $request->get($item_amount), 
                'penerima' => $request->get($penerima) , 
                'peruntukan' => $request->get($peruntukan) , 
                'kebutuhan' => $request->get($kebutuhan), 
                'status' => $status, 
                'created_by' => $id
            ]);

            $data2->save();

                // $datenow = date('Y-m-d');

                // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$datenow'");

                // foreach ($fy as $fys) {
                //     $fiscal = $fys->fiscal_year;
                // }

                // $bulan = strtolower(date("M",strtotime($datenow)));


            $getbulan = AccBudget::select('budget_no', 'periode')
            ->where('budget_no', $request->get('no_budget_edit'))
            ->first();

            if ($getbulan->periode == "FY200") {
                $bulan = strtolower(date('M'));
            }
            else{
                $bulan = "apr";
            }

            $sisa_bulan = $bulan.'_sisa_budget';

                 //get Data Budget Based On Periode Dan Nomor
            $budgetdata = AccBudget::where('budget_no','=',$request->get('no_budget_edit'))->first();

                //Get Amount Di PO
            $total_dollar = $request->get($dollar);

            $totalminusPO = $budgetdata->$sisa_bulan - $total_dollar;

                // Setelah itu update data budgetnya dengan yang actual
            $dataupdate = AccBudget::where('budget_no',$request->get('no_budget_edit'))
            ->update([
                $sisa_bulan => $totalminusPO
            ]);

                // $month = strtolower(date("M",strtotime($request->get('tgl_pengajuan_edit'))));
            $begbal = $request->get('SisaBudgetEdit') + $request->get('TotalPembelianEdit');

            $getbulan = AccBudget::select('budget_no', 'periode')
            ->where('budget_no', $request->get('no_budget_edit'))
            ->first();

            if ($getbulan->periode == "FY200") {
                $month = strtolower(date('M'));
            }
            else{
                $month = "apr";
            }

            $data3 = new AccBudgetHistory([
                'budget' => $request->get('no_budget_edit'),
                'budget_month' => $month,
                'budget_date' => date('Y-m-d'),
                'category_number' => $request->get('no_pr_edit'),
                'beg_bal' => $begbal,
                'no_item' => $request->get($item_desc),
                'amount' => $request->get($dollar),
                'status' => 'PR',
                'created_by' => $id
            ]);

            $data3->save();
        }

        $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
        ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
        ->join('acc_budget_histories', function($join) {
         $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
         $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
     })
        ->where('acc_purchase_requisitions.id', '=', $request->get('id_edit_pr'))
        ->distinct()
        ->get();

        $exchange_rate = AccExchangeRate::select('*')
        ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
        ->where('currency','!=','USD')
        ->orderBy('currency','ASC')
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'landscape');

        $pdf->loadView('accounting_purchasing.report.report_pr', array(
            'pr' => $detail_pr,
            'rate' => $exchange_rate
        ));

        $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

            // for ($i = 2;$i <= $lop2;$i++)
            // {
            //     $item_code = "item_code" . $i;
            //     $item_desc = "item_desc" . $i;
            //     $item_spec = "item_spec" . $i;
            //     $item_uom = "uom" . $i;

            //     $data = new AccPurchaseRequisitionItem(['item_code' => $request->get($item_code) , 'item_desc' => $request->get($item_desc) , 'item_spec' => $request->get($item_spec) ,'item_uom' => $request->get($item_uom) , 'created_by' => $id]);

            //     $data->save();
            // }

        return redirect('/purchase_requisition')
        ->with('status', 'Purchase Requisition Berhasil Dirubah')
        ->with('page', 'Purchase Requisition');
    }
    catch(QueryException $e)
    {
        return redirect('/purchase_requisition')->with('error', $e->getMessage())
        ->with('page', 'Purchase Requisition');
    }
}

public function jurnal_po(){
    $title = "Jurnal PO";
    $title_jp = "";

    return view('accounting_purchasing.report.jurnal_po', array(
        'title' => $title,
        'title_jp' => $title_jp
    ));
}

public function fetchJurnal(){
    $employee_id = Auth::user()->username;
    $employee = EmployeeSync::where('employee_id', '=', $employee_id)->first();

    $where = "";

    if($employee->department != 'Management Information System Department' && $employee->department != 'Human Resources Department' && Auth::user()->role_code != 'S'){
        $where = "WHERE a.department = '".$employee->department."'";
    }

    $jurnal = db::select("SELECT supplier_code,supplier_name,acc_purchase_order_details.no_po , nama_item, delivery_date FROM `acc_purchase_order_details` JOIN acc_purchase_orders on acc_purchase_orders.no_po = acc_purchase_order_details.no_po");

    $response = array(
        'status' => true,
        'jurnal' => $jurnal
    );
    return Response::json($response);
}

public function delivery_control(){
    $title = "Delivery Control";
    $title_jp = "";

    return view('accounting_purchasing.report.delivery_control', array(
        'title' => $title,
        'title_jp' => $title_jp
    ));
}

    //==================================//
    //          Purchase Order          //
    //==================================//
public function purchase_order()
{
    $title = 'Purchase Order';
    $title_jp = '発注依頼';

    $emp = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
    ->first();

    $vendor = AccSupplier::select('acc_suppliers.*')
    ->whereNull('acc_suppliers.deleted_at')
    ->where('supplier_pch','=','Equipment')
    ->orderBy('vendor_code','ASC')
    ->distinct()
    ->get();

    $authorized2 = EmployeeSync::select('employee_id', 'name')
    ->where('position', 'like', 'Manager%')
    ->where('department', 'like', '%Procurement%')
    ->first();

    $authorized3 = EmployeeSync::select('employee_id', 'name')
    ->where('position', 'like', 'General Manager%')
    ->where('division', '=', 'Production Support Division')
    ->first();

        // $authorized4 = EmployeeSync::select('employee_id', 'name')
        // ->where('position', 'like', 'Director')
        // ->Orwhere('position', 'like', 'General Manager')
        // ->get();

    return view('accounting_purchasing.purchase_order', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'employee' => $emp,
        'vendor' => $vendor,
        'delivery' => $this->delivery,
        'transportation' => $this->transportation,
        'authorized2' => $authorized2,
        'authorized3' => $authorized3,
            // 'authorized4' => $authorized4,
        'uom' => $this->uom
    ))
    ->with('page', 'Purchase Order')
    ->with('head', 'Purchase Order');
}

public function delete_purchase_requisition(Request $request)
{
    try
    {
        $pr = AccPurchaseRequisition::find($request->get('id'));

        $budget_log = AccBudgetHistory::where('category_number', '=', $pr->no_pr)
        ->get();

            // $date = date('Y-m-d');
            // //FY
            // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$date'");
            // foreach ($fy as $fys) {
            //     $fiscal = $fys->fiscal_year;
            // }

        foreach ($budget_log as $log) {
            $sisa_bulan = $log->budget_month.'_sisa_budget';
            $budget = AccBudget::where('budget_no', $log->budget)->first();

                $total = $budget->$sisa_bulan + $log->amount; //add total
                $dataupdate = AccBudget::where('budget_no', $log->budget)->update([
                    $sisa_bulan => $total
                ]);
            }

            $delete_budget_log = AccBudgetHistory::where('category_number', '=', $pr->no_pr)->delete();
            $delete_pr_item = AccPurchaseRequisitionItem::where('no_pr', '=', $pr->no_pr)->delete();
            $delete_pr = AccPurchaseRequisition::where('no_pr', '=', $pr->no_pr)->delete();

            $response = array(
                'status' => true,
            );

            return Response::json($response);
        }
        catch(QueryException $e)
        {
            return redirect('/purchase_requisition')->with('error', $e->getMessage())
            ->with('page', 'Purchase Requisition');
        }
    }

    public function delete_item_pr(Request $request)
    {
        try
        {
            $master_item = AccPurchaseRequisitionItem::find($request->get('id'));

            $budget_log = AccBudgetHistory::where('no_item', '=', $master_item->item_desc)
            ->where('category_number', '=', $master_item->no_pr)
            ->first();

            // $date = date('Y-m-d');
            // //FY
            // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$date'");
            // foreach ($fy as $fys) {
            //     $fiscal = $fys->fiscal_year;
            // }

            $sisa_bulan = $budget_log->budget_month.'_sisa_budget';

            $budget = AccBudget::where('budget_no', $budget_log->budget)->first();

            $total = $budget->$sisa_bulan + $budget_log->amount; //add total

            $dataupdate = AccBudget::where('budget_no', $budget_log->budget)->update([
                $sisa_bulan => $total
            ]);

            $delete_budget_log = AccBudgetHistory::where('no_item', '=', $master_item->item_desc)
            ->where('category_number', '=', $master_item->no_pr)
            ->delete();

            $delete_item = AccPurchaseRequisitionItem::where('id', '=', $request->get('id'))->delete();

            $response = array(
                'status' => true,
            );

            return Response::json($response);

        }
        catch(QueryException $e)
        {
            return redirect('/purchase_requisition')->with('error', $e->getMessage())
            ->with('page', 'Purchase Requisition');
        }

    }

    public function fetch_purchase_order_new(Request $request){
        $tanggal = "";
        $year = "";
        if (strlen($request->get('year')) > 0)
        {
            $year = "and year(A.tgl_po) = '" . $request->get('year') . "'";
        }

        if (strlen($request->get('datefrom')) > 0)
        {
            $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
            $tanggal = "and A.tgl_po >= '" . $datefrom . " 00:00:00' ";
            if (strlen($request->get('dateto')) > 0)
            {
                $dateto = date('Y-m-d', strtotime($request->get('dateto')));
                $tanggal = $tanggal . "and A.tgl_po  <= '" . $dateto . " 23:59:59' ";
            }
        }

        $qry = "SELECT * FROM acc_purchase_orders A WHERE A.deleted_at IS NULL " . $tanggal . " " . $year . " order by A.id DESC";
        $po = DB::select($qry);

        $response = array(
            'status' => true,
            'po' => $po
        );
        return Response::json($response);
    }

    public function fetch_purchase_order(Request $request)
    {
        $tanggal = "";
        $year = "";

        if (strlen($request->get('year')) > 0)
        {
            $year = "and year(A.tgl_po) = '" . $request->get('year') . "'";
        }


        if (strlen($request->get('datefrom')) > 0)
        {
            $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
            $tanggal = "and A.tgl_po >= '" . $datefrom . " 00:00:00' ";
            if (strlen($request->get('dateto')) > 0)
            {
                $dateto = date('Y-m-d', strtotime($request->get('dateto')));
                $tanggal = $tanggal . "and A.tgl_po  <= '" . $dateto . " 23:59:59' ";
            }
        }

        $qry = "SELECT * FROM acc_purchase_orders A WHERE A.deleted_at IS NULL " . $tanggal . " " . $year . " order by A.id DESC";
        $po = DB::select($qry);

        return DataTables::of($po)

        ->editColumn('tgl_po', function ($po)
        {
            return date('Y-m-d', strtotime($po->tgl_po));
        })

        ->editColumn('no_po_sap', function ($po)
        {
            $id = $po->id;

            $po_sap = "";
            if ($po->no_po_sap == null && $po->status == "not_sap")
            {
                $po_sap = '<a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-md" onClick="editSAP('.$id.','.$po->no_po_sap.')"><i class="fa fa-edit"></i> NO PO SAP</a>';
            }
            else if ($po->no_po_sap != null){
                $po_sap = $po->no_po_sap;
                $po_sap .= '&nbsp;<a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-md" onClick="editSAP('.$id.','.$po->no_po_sap.')"><i class="fa fa-edit"></i></a>';
            }
            else
            {
                $po_sap = '-';
            }

            return $po_sap;
        })

        ->editColumn('status', function ($po)
        {
            $id = $po->id;

            if ($po->posisi == "staff_pch")
            {
                return '<label class="label label-danger">Staff Purchasing</label>';
            }

            else if ($po->posisi == "manager_pch")
            {
                return '<label class="label label-warning">Diverifikasi Manager</label>';
            }

            else if ($po->posisi == "dgm_pch")
            {
                return '<label class="label label-primary">Diverifikasi GM Support</label>';
            }

            else if ($po->posisi == "gm_pch")
            {
                return '<label class="label label-primary">Diverifikasi GM</label>';
            }

            else if ($po->posisi == "pch")
            {
                return '<label class="label label-success">Sudah Diverifikasi</label>';
            }

        })
        ->addColumn('action', function ($po)
        {
            $id = $po->id;
            if ($po->posisi == "staff_pch") {
                return '
                <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
                <a href="purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
                <button class="btn btn-xs btn-success" data-toggle="tooltip" title="Send Email" style="margin-right:5px;"  onclick="sendEmail(' . $id .')"><i class="fa fa-envelope"></i> Send Email</button>
                <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="cancelPO('.$id.')" data-toggle="modal" data-target="#modalcancelPO"  title="Delete PO"><i class="fa fa-trash"></i> Delete PO</a>
                ';
            }

            else if ($po->posisi == "pch") {
                return '
                <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
                <a href="purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"> Report</i></a>
                <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="cancelPO('.$id.')" data-toggle="modal" data-target="#modalcancelPO"  title="Cancel PO"><i class="fa fa-close"></i> Cancel PO</a>
                ';
            }

            else{
                return '
                <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
                <a href="purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
                <button class="btn btn-xs btn-primary" data-toggle="tooltip" title="Resend Email" style="margin-right:5px;"  onclick="ResendEmail(' . $id .')"><i class="fa fa-envelope"></i> Resend Email</button>
                ';   
            }
        })
        ->rawColumns(['status' => 'status', 'action' => 'action', 'no_po_sap' => 'no_po_sap'])
        ->make(true);
    }

    public function fetch_purchase_order_investment(Request $request)
    {
        $tanggal = "";
        $adddepartment = "";

        if (strlen($request->get('datefrom')) > 0)
        {
            $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
            $tanggal = "and A.tgl_po >= '" . $datefrom . " 00:00:00' ";
            if (strlen($request->get('dateto')) > 0)
            {
                $dateto = date('Y-m-d', strtotime($request->get('dateto')));
                $tanggal = $tanggal . "and A.tgl_po  <= '" . $dateto . " 23:59:59' ";
            }
        }

        $qry = "SELECT * FROM acc_purchase_orders A WHERE A.deleted_at IS NULL " . $tanggal . " and remark = 'Investment' order by A.id DESC";
        $po = DB::select($qry);

        return DataTables::of($po)

        ->editColumn('tgl_po', function ($po)
        {
            return date('Y-m-d', strtotime($po->tgl_po));
        })

        ->editColumn('no_po_sap', function ($po)
        {
            $id = $po->id;

            $po_sap = "";
            if ($po->no_po_sap == null && $po->status == "not_sap")
            {
                $po_sap = '<a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-md" onClick="editSAP('.$id.','.$po->no_po_sap.')"><i class="fa fa-edit"></i> NO PO SAP</a>';
            }
            else if ($po->no_po_sap != null){
                $po_sap = $po->no_po_sap;
                $po_sap .= '&nbsp;<a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-md" onClick="editSAP('.$id.','.$po->no_po_sap.')"><i class="fa fa-edit"></i></a>';
            }
            else
            {
                $po_sap = '-';
            }

            return $po_sap;
        })

        ->editColumn('status', function ($po)
        {
            $id = $po->id;

            if ($po->posisi == "staff_pch")
            {
                return '<label class="label label-danger">Staff Purchasing</label>';
            }

            else if ($po->posisi == "manager_pch")
            {
                return '<label class="label label-warning">Diverifikasi Manager</label>';
            }

            else if ($po->posisi == "dgm_pch")
            {
                return '<label class="label label-primary">Diverifikasi GM Support</label>';
            }

            else if ($po->posisi == "gm_pch")
            {
                return '<label class="label label-primary">Diverifikasi GM</label>';
            }

            else if ($po->posisi == "pch")
            {
                return '<label class="label label-success">Sudah Diverifikasi</label>';
            }

        })
        ->addColumn('action', function ($po)
        {
            $id = $po->id;
            if ($po->posisi == "staff_pch") {
                return '
                <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
                <a href="purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
                <button class="btn btn-xs btn-success" data-toggle="tooltip" title="Send Email" style="margin-right:5px;"  onclick="sendEmail(' . $id .')"><i class="fa fa-envelope"></i> Send Email</button>
                <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="cancelPO('.$id.')" data-toggle="modal" data-target="#modalcancelPO"  title="Delete PO"><i class="fa fa-trash"></i> Delete PO</a>
                ';
            }

            else if ($po->posisi == "pch") {
                return '
                <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
                <a href="purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"> Report</i></a>
                <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="cancelPO('.$id.')" data-toggle="modal" data-target="#modalcancelPO"  title="Cancel PO"><i class="fa fa-close"></i> Cancel PO</a>
                ';
            }

            else{
                return '
                <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
                <a href="purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
                <button class="btn btn-xs btn-primary" data-toggle="tooltip" title="Resend Email" style="margin-right:5px;"  onclick="ResendEmail(' . $id .')"><i class="fa fa-envelope"></i> Resend Email</button>
                ';   
            }
        })
        ->rawColumns(['status' => 'status', 'action' => 'action', 'no_po_sap' => 'no_po_sap'])
        ->make(true);
    }

    public function fetch_po_outstanding_pr(Request $request)
    {
        $qry = "SELECT distinct acc_purchase_requisitions.id, acc_purchase_requisitions.no_pr,note,submission_date,emp_id,emp_name,no_budget,file,posisi,`status`,file_pdf FROM `acc_purchase_requisitions` join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where receive_date is not null and acc_purchase_requisition_items.sudah_po is null and acc_purchase_requisitions.deleted_at is null";
        $pr = DB::select($qry);

        return DataTables::of($pr)

        ->editColumn('submission_date', function ($pr)
        {
            return date('d-F-y', strtotime($pr->submission_date));
        })

        ->editColumn('file', function ($pr)
        {
            $data = json_decode($pr->file);

            $fl = "";

            if ($pr->file != null)
            {
                for ($i = 0;$i < count($data);$i++)
                {
                    $fl .= '<a href="files/pr/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
                }
            }
            else
            {
                $fl = '-';
            }

            return $fl;
        })

        ->addColumn('action', function ($pr)
        {
            $id = $pr->id;

            return '
            <a href="javascript:void(0)" class="btn btn-xs btn-warning" onClick="editPR(' . $id . ')" data-toggle="tooltip" title="Edit PR"><i class="fa fa-edit"></i> Edit</a>
            <a href="purchase_requisition/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
            <a href="javascript:void(0)" class="btn btn-xs  btn-primary" onClick="detailPR(' . $id . ')" style="margin-right:5px;" data-toggle="tooltip" title="Detail PR"><i class="fa fa-eye"></i> Detail Item</a>
            ';
        })

        ->rawColumns(['file' => 'file', 'action' => 'action'])
        ->make(true);
    }

    public function get_nomor_po(Request $request)
    {
        $datenow = date('Y-m-d');
        $tahun = date('y');
        $bulan = date('m');
        // $tanggal = date('d');

        $query = "SELECT no_po FROM `acc_purchase_orders` where remark = 'suspense' order by id DESC LIMIT 1";
        $nomorurut = DB::select($query);

        if ($nomorurut != null)
        {
            $nomor = substr($nomorurut[0]->no_po, -3);
            $nomor = $nomor + 1;
            $nomor = sprintf('%03d', $nomor);
        }
        else
        {
            $nomor = "001";
        }


        $result['tahun'] = $tahun;
        $result['bulan'] = $bulan;
        // $result['tanggal'] = $tanggal;
        $result['no_urut'] = $nomor;

        return json_encode($result);
    }

    public function pogetsupplier(Request $request)
    {
        $html = array();
        $vendor_code = AccSupplier::where('vendor_code', $request->supplier_code)
        ->get();
        foreach ($vendor_code as $supp)
        {
            $html = array(
                'name' => $supp->supplier_name,
                'duration' => $supp->supplier_duration,
                'status' => $supp->supplier_status,
                'currency' => $supp->supplier_currency,
            );
        }
        return json_encode($html);
    }

    public function get_budget_name(Request $request)
    {
        $html = array();
        
        $tahun = date('Y');
        $namabulan = date('F');

        $getbulan = AccBudget::select('budget_no', 'periode')
        ->where('budget_no',$request->budget)
        ->first();

        if ($getbulan->periode == "FY200") {
            $bulan = strtolower(date('M'));
        }
        else{
            $bulan = "apr";
        }

        // $tglnow = date('Y-m-d');
        // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$tglnow'");

        // foreach ($fy as $fys) {
        //     $fiscal = $fys->fiscal_year;
        // }



        $budget_no = AccBudget::SELECT('*',$bulan.'_sisa_budget as budget_now')->where('budget_no', $request->budget)->get();

        foreach ($budget_no as $budget)
        {

            $budget_now = $budget->budget_now;

            $html = array(
                'budget_desc' => $budget->description,
                'budget_now' => $budget_now
            );

        }
        return json_encode($html);
    }

    public function pogetname(Request $request)
    {
        $html = array();
        $emp = EmployeeSync::where('employee_id', $request->authorized4)
        ->get();
        foreach ($emp as $name)
        {
            $html = array(
                'name' => $name->name,
            );
        }
        return json_encode($html);
    }

    public function fetchPrList(Request $request)
    {
        $pr = AccPurchaseRequisition::select('acc_purchase_requisitions.no_pr')->join('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
        ->whereNull('sudah_po')
        ->whereNotNull('receive_date')
        ->distinct()
        ->get();

        $response = array(
            'status' => true,
            'pr' => $pr
        );

        return Response::json($response);
    }

    public function pilihPR(Request $request)
    {
        $html = array();
        $list_item = AccPurchaseRequisitionItem::where('no_pr', $request->no_pr)
        ->whereNull('sudah_po')
        ->get();

        $lists = "<option value=''>-- Pilih Item --</option>";
        foreach ($list_item as $item)
        {
            $lists .= "<option value='" . $item->item_code . "'>" . $item->item_desc . "</option>"; 
            
        }
        return json_encode($lists);
    }

    public function pogetitem(Request $request)
    {
        $html = array();
        $kode_item = AccPurchaseRequisitionItem::join('acc_purchase_requisitions', 'acc_purchase_requisition_items.no_pr', '=', 'acc_purchase_requisitions.no_pr')
        ->where('item_code', $request->item_code)
        ->where('acc_purchase_requisition_items.no_pr', $request->no_pr)
        ->get();

        $last_price = AccPurchaseOrderDetail::select('goods_price')
        ->where('no_item', $request->item_code)
        ->orderBy('id','desc')
        ->get();

        if(count($last_price) > 0){
            $last = $last_price[0]->goods_price;
        }else{
            $last = 0;
        }

        foreach ($kode_item as $item)
        {
            $html = array(
                'item_code' => $item->item_code,
                'item_desc' => $item->item_desc,
                'item_spec' => $item->item_spec,
                'item_request_date' => $item->item_request_date,
                'item_qty' => $item->item_qty,
                'item_uom' => $item->item_uom,
                'item_currency' => $item->item_currency,
                'item_price' => $item->item_price,
                'last_price' => $last,
                'no_budget' => $item->no_budget,
            );

        }

        return json_encode($html);
    }

    public function create_purchase_order(Request $request)
    {
        $id = Auth::id();

        $lop = $request->get('lop');
        $nopo = $request->get('no_po1') . $request->get('no_po2');

        $total_dollar = 0;

        try
        {
            $last = substr($nopo, -2);

            $query = "SELECT * FROM `cost_centers_s4` where code = '$last'";
            $cost_center = DB::select($query);

            foreach ($cost_center as $cc) {
                $cost = $cc->cost_center;
            }

            for ($i = 1;$i <= $lop;$i++)
            {
                if($request->get('remark') == "PR"){
                    $no_pr = "no_pr" . $i;
                }
                else if($request->get('remark') == "Investment"){
                    $no_pr = "reff_number" . $i;
                }

                $nama_item = "nama_item" . $i;
                $item_budget = "item_budget" . $i;
                $konversi_dollar = "konversi_dollar" . $i;

                $data5 = AccBudgetHistory::where('budget', $request->get($item_budget))
                ->where('category_number',$request->get($no_pr))
                ->where('no_item',$request->get($nama_item))
                ->first();

                $amount = $data5->amount;

                $getbulan = AccBudget::select('budget_no', 'periode')
                ->where('budget_no', $request->get($item_budget))
                ->first();

                if ($getbulan->periode == "FY200") {
                    $bulan = strtolower(date('M'));
                }
                else{
                    $bulan = "apr";
                }
                $sisa_bulan = $bulan.'_sisa_budget';
                //get Data Budget Based On Periode Dan Nomor
                $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();
                //Tambahkan Budget Dengan Yang Ada Di Log
                $totalPlusPR = $budgetdata->$sisa_bulan + $amount;
                //Get Amount Di PO
                $total_dollar = $request->get($konversi_dollar);
                $totalminusPO = $totalPlusPR - $total_dollar;

                // $sisa_bulan = $bulan.'_sisa_budget';
                // $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();
                // $total_dollar = $request->get($konversi_dollar);
                // $totalminusPO = $budgetdata->$sisa_bulan - $total_dollar;

                if ($totalminusPO < 0) {
                    return redirect('/purchase_order')
                    ->with('error', 'Total Melebihi Budget')
                    ->with('page', 'Purchase Order');
                } 
            }


            $data = new AccPurchaseOrder([
                'remark' => $request->get('remark'), 
                'no_po' => $nopo, 
                'tgl_po' => $request->get('tgl_po') , 
                'supplier_code' => $request->get('supplier_code') , 
                'supplier_name' => $request->get('supplier_name') , 
                'supplier_due_payment' => $request->get('supplier_due_payment') , 
                'supplier_status' => $request->get('supplier_status') , 
                'material' => $request->get('material') , 
                'vat' => $request->get('price_vat') , 
                'transportation' => $request->get('transportation') , 
                'delivery_term' => $request->get('delivery_term') , 
                'holding_tax' => $request->get('holding_tax') , 
                'currency' => $request->get('currency') , 
                'buyer_id' => $request->get('buyer_id') , 
                'buyer_name' => $request->get('buyer_name') , 
                'authorized2' => $request->get('authorized2') , 
                'authorized2_name' => $request->get('authorized2_name') , 
                'authorized3' => $request->get('authorized3') , 
                'authorized3_name' => $request->get('authorized3_name') , 
                // 'authorized4' => $request->get('authorized4') , 
                // 'authorized4_name' => $request->get('authorized4_name'), 
                'file_pdf' => $nopo.'.pdf' , 
                'note' => $request->get('note') , 
                'cost_center' => $cost , 
                'posisi' => 'staff_pch', 
                'status' => 'pch', 
                'created_by' => $id
            ]);

            $data->save();

            for ($i = 1;$i <= $lop;$i++)
            {
                if($request->get('remark') == "PR"){
                    $no_pr = "no_pr" . $i;
                }
                else if($request->get('remark') == "Investment"){
                    $no_pr = "reff_number" . $i;
                }
                $no_item = "no_item" . $i;
                $nama_item = "nama_item" . $i;
                $item_budget = "item_budget" . $i;
                $delivery_date = "delivery_date" . $i;
                $qty = "qty" . $i;
                $uom = "uom" . $i;
                $goods_price = "goods_price" . $i;
                $last_price = "last_price" . $i;
                $service_price = "service_price" . $i;
                $konversi_dollar = "konversi_dollar" . $i;
                $gl_number = "gl_number" . $i;

                $data2 = new AccPurchaseOrderDetail([
                    'no_po' => $nopo, 
                    'no_pr' => $request->get($no_pr) , 
                    'no_item' => $request->get($no_item) , 
                    'nama_item' => $request->get($nama_item) , 
                    'budget_item' => $request->get($item_budget) , 
                    'delivery_date' => $request->get($delivery_date) , 
                    'qty' => $request->get($qty) , 
                    'qty_receive' => 0, 
                    'uom' => $request->get($uom) , 
                    'goods_price' => $request->get($goods_price) , 
                    'last_price' => $request->get($last_price) , 
                    'service_price' => $request->get($service_price) , 
                    'konversi_dollar' => $request->get($konversi_dollar) , 
                    'gl_number' => $request->get($gl_number) ,
                    'created_by' => $id
                ]);

                $data2->save();

                //Update Status Sudah PO

                if($request->get('remark') == "PR"){
                    $data3 = AccPurchaseRequisitionItem::where('item_code', $request->get($no_item))
                    ->where('no_pr', $request->get($no_pr))
                    ->update(['sudah_po' => 'true', ]);
                }
                else if($request->get('remark') == "Investment"){
                    $data3 = AccInvestmentDetail::where('no_item', $request->get($no_item))
                    ->where('reff_number', $request->get($no_pr))
                    ->update(['sudah_po' => 'true', ]);
                }

                //Update Harga + Currency Di Master Item
                if ($request->get($goods_price) != 0) {
                    $data4 = AccItem::where('kode_item', $request->get($no_item))
                    ->update([
                        'harga' => $request->get($goods_price),
                        'currency' => $request->get('currency')
                    ]);
                }
                else if ($request->get($service_price) != 0) {
                    $data4 = AccItem::where('kode_item', $request->get($no_item))
                    ->update([
                        'harga' => $request->get($service_price), 
                        'currency' => $request->get('currency')
                    ]);
                }

                //Get Total Amount From Budget Log

                $data5 = AccBudgetHistory::where('budget', $request->get($item_budget))
                ->where('category_number',$request->get($no_pr))
                ->where('no_item',$request->get($nama_item))
                ->first();

                $amount = $data5->amount;


                // $datenow = date('Y-m-d');

                // //Get Data From Budget Master

                // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$datenow'");

                // foreach ($fy as $fys) {
                //     $fiscal = $fys->fiscal_year;
                // }

                $getbulan = AccBudget::select('budget_no', 'periode')
                ->where('budget_no', $request->get($item_budget))
                ->first();

                if ($getbulan->periode == "FY200") {
                    $bulan = strtolower(date('M'));
                }
                else{
                    $bulan = "apr";
                }
                
                // $bulan = strtolower(date("M",strtotime($datenow)));

                $sisa_bulan = $bulan.'_sisa_budget';

                //get Data Budget Based On Periode Dan Nomor
                $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();

                //Tambahkan Budget Dengan Yang Ada Di Log
                $totalPlusPR = $budgetdata->$sisa_bulan + $amount;

                $updatebudget = AccBudget::where('budget_no',$request->get($item_budget))
                ->update([
                    $sisa_bulan => $totalPlusPR
                ]);

                //get Data Budget Based On Periode Dan Nomor
                $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();

                //Get Amount Di PO
                $total_dollar = $request->get($konversi_dollar);

                $totalminusPO = $budgetdata->$sisa_bulan - $total_dollar;

                // if ($totalminusPO < 0) {

                //     //Tambahkan Budget Dengan Yang Ada Di Log
                //     $totalMinPR = $budgetdata->$sisa_bulan - $amount;

                //     $updatebudget = AccBudget::where('budget_no',$request->get($item_budget))
                //     ->update([
                //         $sisa_bulan => $totalMinPR
                //     ]);

                //     return redirect('/purchase_order')->with('error', 'Total Melebihi Budget')
                //     ->with('page', 'Purchase Order');
                // } 

                // Setelah itu update data budgetnya dengan yang actual
                $dataupdate = AccBudget::where('budget_no',$request->get($item_budget))
                ->update([
                    $sisa_bulan => $totalminusPO
                ]);

                $updatebudgetlog = AccBudgetHistory::where('budget', $request->get($item_budget))
                ->where('category_number',$request->get($no_pr))
                ->where('no_item',$request->get($nama_item))
                ->update([
                    'budget_month_po' => $bulan,
                    'po_number' => $nopo,
                    'amount_po' => $total_dollar,
                    'status' => 'PO'
                ]);
            }

            if($request->get('remark') == "Investment"){
                $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_investments.applicant_department')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                ->leftJoin('acc_investments', 'acc_purchase_order_details.no_pr', '=', 'acc_investments.reff_number')
                ->where('acc_purchase_orders.id', '=', $data->id)
                ->get();
            }

            else if($request->get('remark') == "PR"){
                $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_purchase_requisitions.department')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                ->leftJoin('acc_purchase_requisitions', 'acc_purchase_order_details.no_pr', '=', 'acc_purchase_requisitions.no_pr')
                ->where('acc_purchase_orders.id', '=', $data->id)
                ->get();
            }

            $pr = AccPurchaseOrder::select('no_pr')
            ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
            ->where('acc_purchase_orders.id', '=', $data->id)
            ->distinct()
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_po', array(
                'po' => $detail_po,
                'pr' => $pr
            ));

            $pdf->save(public_path() . "/po_list/".$detail_po[0]->no_po.".pdf");


            if($request->get('remark') == "Investment"){
                return redirect('/purchase_order_investment')
                ->with('status', 'Purchase Order Investment Berhasil Dibuat')
                ->with('page', 'Purchase Order Investment');
            }

            else if($request->get('remark') == "PR"){
                return redirect('/purchase_order')
                ->with('status', 'Purchase Order PR Berhasil Dibuat')
                ->with('page', 'Purchase Order');
            }
        }
        catch(QueryException $e)
        {
            return redirect('/purchase_order')->with('error', $e->getMessage())
            ->with('page', 'Purchase Order');
        }
    }

    public function edit_purchase_order(Request $request)
    {

        $purchase_order = AccPurchaseOrder::find($request->get('id'));
        $purchase_order_detail = AccPurchaseOrder::join('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')->where('acc_purchase_orders.id', '=', $request->get('id'))
        ->get();

        $response = array(
            'status' => true,
            'purchase_order' => $purchase_order,
            'purchase_order_detail' => $purchase_order_detail
        );
        return Response::json($response);
    }

    public function update_purchase_order(Request $request)
    {
        $id = Auth::id();

        $lop2 = $request->get('lop2');
        $po_data = AccPurchaseOrder::find($request->get('id_edit'));
        $lop = explode(',', $request->get('looping'));

        try
        {
            //Update PO
            $data3 = AccPurchaseOrder::where('no_po', $request->get('no_po_edit'))
            ->update([
                'supplier_code' => $request->get('supplier_code_edit') , 
                'supplier_name' => $request->get('supplier_name_edit') , 
                'supplier_due_payment' => $request->get('supplier_due_payment_edit') , 
                'supplier_status' => $request->get('supplier_status_edit') , 
                'material' => $request->get('material_edit') , 
                'vat' => $request->get('price_vat_edit') , 
                'transportation' => $request->get('transportation_edit') , 
                'delivery_term' => $request->get('delivery_term_edit') , 
                'holding_tax' => $request->get('holding_tax_edit') , 
                'currency' => $request->get('currency_edit') , 
                // 'authorized4' => $request->get('authorized4_edit') , 
                // 'authorized4_name' => $request->get('authorized4_name_edit') , 
                'note' => $request->get('note_edit') 
            ]);

            if ($po_data->posisi == "pch") {
                $data5 = AccPurchaseOrder::where('no_po', $request->get('no_po_edit'))
                ->update([
                    'revised' => 'true', 
                    'revised_date' => date('Y-m-d'),
                    'posisi' => 'staff_pch',
                    'status' => 'pch',
                    'approval_authorized2' => null,
                    'date_approval_authorized2' => null,
                    'approval_authorized3' => null,
                    'date_approval_authorized3' => null
                ]);
            }



            foreach ($lop as $lp)
            {
                if ($po_data->remark == "PR"){
                    $no_pr = "no_pr" . $lp;
                }
                else if ($po_data->remark == "Investment"){
                    $no_pr = "reff_number" . $lp;
                }
                $no_item = "no_item" . $lp;
                $nama_item = "nama_item" . $lp;
                $item_budget = "item_budget" . $lp;
                $delivery_date = "delivery_date" . $lp;
                $qty = "qty" . $lp;
                $uom = "uom_edit" . $lp;
                $goods_price = "goods_price" . $lp;
                $last_price = "last_price" . $lp;
                $service_price = "service_price" . $lp;
                $konversi_dollar = "konversi_dollar" . $lp;
                $gl_number = "gl_edit" . $lp;

                $data2 = AccPurchaseOrderDetail::where('id', $lp)->update([
                    'no_item' => $request->get($no_item) , 
                    'nama_item' => $request->get($nama_item) , 
                    'budget_item' => $request->get($item_budget) , 
                    'delivery_date' => $request->get($delivery_date) , 
                    'qty' => $request->get($qty) , 
                    'uom' => $request->get($uom) , 
                    'goods_price' => $request->get($goods_price) , 
                    'last_price' => $request->get($last_price) , 
                    'service_price' => $request->get($service_price) , 
                    'konversi_dollar' => $request->get($konversi_dollar) , 
                    'gl_number' => $request->get($gl_number) , 
                    'created_by' => $id
                ]);

                 //Update Harga + Currency Di Master Item
                if ($request->get($goods_price) != 0) {
                    $updateitempo = AccItem::where('kode_item', $request->get($no_item))
                    ->update([
                        'harga' => $request->get($goods_price),
                        'currency' => $request->get('currency_edit')
                    ]);
                }
                else if ($request->get($service_price) != 0) {
                    $updateitempo = AccItem::where('kode_item', $request->get($no_item))
                    ->update([
                        'harga' => $request->get($service_price), 
                        'currency' => $request->get('currency_edit')
                    ]);
                }

                if ($data2) {

                    $getbudgetlog = AccBudgetHistory::where('budget', $request->get($item_budget))
                    ->where('po_number',$request->get('no_po_edit'))
                    ->where('no_item',$request->get($nama_item))
                    ->first();

                    $counter = $getbudgetlog->amount_po;
                    $date = $getbudgetlog->budget_month_po;

                    // $datenow = date('Y-m-d');

                    // //Get Data From Budget Master

                    // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$datenow'");

                    // foreach ($fy as $fys) {
                    //     $fiscal = $fys->fiscal_year;
                    // }

                    $sisa_bulan = $date.'_sisa_budget';

                    //get Data Budget Based On Periode Dan Nomor
                    $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();

                    $totalOld = $budgetdata->$sisa_bulan + $counter;

                    $updatebudget = AccBudget::where('budget_no',$request->get($item_budget))
                    ->update([
                        $sisa_bulan => $totalOld
                    ]);

                    //get Data Budget Based On Periode Dan Nomor
                    $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();

                    $total_dollar = $request->get($konversi_dollar);

                    $totalNew = $budgetdata->$sisa_bulan - $total_dollar;

                    $dataupdate = AccBudget::where('budget_no',$request->get($item_budget))
                    ->update([
                        $sisa_bulan => $totalNew
                    ]);

                    $data5 = AccBudgetHistory::where('budget', $request->get($item_budget))
                    ->where('po_number',$request->get('no_po_edit'))
                    ->where('no_item',$request->get($nama_item))
                    ->update([
                        'amount_po' => $request->get($konversi_dollar),
                        'created_by' => $id
                    ]);
                }

            }

            for ($i = 2;$i <= $lop2;$i++)
            {
                if ($po_data->remark == "PR"){
                    $no_pr2 = "no_pr" . $i;
                }
                else if ($po_data->remark == "Investment"){
                    $no_pr2 = "reff_number" . $i;
                }
                $no_item2 = "no_item" . $i;
                $nama_item2 = "nama_item" . $i;
                $item_budget2 = "item_budget" . $i;
                $delivery_date2 = "delivery_date" . $i;
                $qty2 = "qty" . $i;
                $uom2 = "uom" . $i;
                $goods_price2 = "goods_price" . $i;
                $last_price2 = "last_price" . $i;
                $service_price2 = "service_price" . $i;
                $konversi_dollar2 = "konversi_dollar" . $i;
                $gl_number2 = "gl_number" . $i;

                $data = new AccPurchaseOrderDetail([
                    'no_po' => $request->get('no_po_edit') , 
                    'no_pr' => $request->get($no_pr2) , 
                    'no_item' => $request->get($no_item2) , 
                    'nama_item' => $request->get($nama_item2) , 
                    'budget_item' => $request->get($item_budget2) , 
                    'delivery_date' => $request->get($delivery_date2) , 
                    'qty' => $request->get($qty2) , 
                    'qty_receive' => 0 , 
                    'uom' => $request->get($uom2) , 
                    'goods_price' => $request->get($goods_price2) , 
                    'last_price' => $request->get($last_price2) , 
                    'service_price' => $request->get($service_price2) , 
                    'konversi_dollar' => $request->get($konversi_dollar2) , 
                    'gl_number' => $request->get($gl_number2) , 
                    'created_by' => $id
                ]);

                $data->save();

                if ($po_data->remark == "PR") {
                    $data3 = AccPurchaseRequisitionItem::where('item_code', $request->get($no_item2))
                    ->where('no_pr', $request->get($no_pr2))
                    ->update([
                        'sudah_po' => 'true'
                    ]);

                }else if ($po_data->remark == "Investment"){
                    $data3 = AccInvestmentDetail::where('no_item', $request->get($no_item2))
                    ->where('reff_number', $request->get($no_pr2))
                    ->update([
                        'sudah_po' => 'true'
                    ]);
                }

                

                 //Get Total Amount From Budget Log

                $data5 = AccBudgetHistory::where('budget', $request->get($item_budget2))
                ->where('category_number',$request->get($no_pr2))
                ->where('no_item',$request->get($nama_item2))
                ->first();

                $amount = $data5->amount;
                // $datenow = date('Y-m-d');

                // //Get Data From Budget Master

                // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$datenow'");

                // foreach ($fy as $fys) {
                //     $fiscal = $fys->fiscal_year;
                // }
                
                // $bulan = strtolower(date("M",strtotime($datenow)));

                $getbulan = AccBudget::select('budget_no', 'periode')
                ->where('budget_no', $request->get($item_budget2))
                ->first();

                if ($getbulan->periode == "FY200") {
                    $bulan = strtolower(date('M'));
                }
                else{
                    $bulan = "apr";
                }

                $sisa_bulan = $bulan.'_sisa_budget';

                //get Data Budget Based On Periode Dan Nomor
                $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget2))->first();

                //Tambahkan Budget Dengan Yang Ada Di Log
                $totalPlusPR = $budgetdata->$sisa_bulan + $amount;

                $updatebudget = AccBudget::where('budget_no',$request->get($item_budget2))
                ->update([
                    $sisa_bulan => $totalPlusPR
                ]);

                //get Data Budget Based On Periode Dan Nomor
                $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget2))->first();

                //Get Amount Di PO
                $total_dollar = $request->get($konversi_dollar2);

                $totalminusPO = $budgetdata->$sisa_bulan - $total_dollar;

                // Setelah itu update data budgetnya dengan yang actual
                $dataupdate = AccBudget::where('budget_no',$request->get($item_budget2))
                ->update([
                    $sisa_bulan => $totalminusPO
                ]);

                $updatebudgetlog = AccBudgetHistory::where('budget', $request->get($item_budget2))
                ->where('category_number',$request->get($no_pr2))
                ->where('no_item',$request->get($nama_item2))
                ->update([
                    'budget_month_po' => $bulan,
                    'po_number' => $request->get('no_po_edit'),
                    'amount_po' => $total_dollar,
                    'status' => 'PO'
                ]);
                
            }

            $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*')
            ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
            ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
            ->leftJoin('acc_purchase_requisitions', 'acc_purchase_order_details.no_pr', '=', 'acc_purchase_requisitions.no_pr')
            ->where('acc_purchase_orders.no_po', '=', $request->get('no_po_edit'))
            ->get();

            $pr = AccPurchaseOrder::select('no_pr')
            ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
            ->where('acc_purchase_orders.no_po', '=', $request->get('no_po_edit'))
            ->distinct()
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_po', array(
                'po' => $detail_po,
                'pr' => $pr
            ));

            $pdf->save(public_path() . "/po_list/".$detail_po[0]->no_po.".pdf");


            if ($po_data->remark == "PR"){
                return redirect('/purchase_order')
                ->with('status', 'Purchase Order Berhasil Dirubah')
                ->with('page', 'Purchase Order');
                
            } else if ($po_data->remark == "Investment"){
                return redirect('/purchase_order_investment')
                ->with('status', 'Purchase Order Investment Berhasil Dirubah')
                ->with('page', 'Purchase Order Investment');
            }
        }
        catch(QueryException $e)
        {
            return redirect('/purchase_order')->with('error', $e->getMessage())
            ->with('page', 'Purchase Order');
        }
    }

    public function edit_sap(Request $request)
    {
        try{
            $po = AccPurchaseOrder::find($request->get("id"));
            $po->no_po_sap = $request->get('no_po_sap');
            $po->status = 'sap';
            $po->save();

            $response = array(
              'status' => true,
              'datas' => "Berhasil",
          );
            return Response::json($response);
        }
        catch (QueryException $e){
            $error_code = $e->errorInfo[1];
            if($error_code == 1062){
               $response = array(
                  'status' => false,
                  'datas' => "NO PO Already Exist",
              );
               return Response::json($response);
           }
           else{
               $response = array(
                  'status' => false,
                  'datas' => "Update NO PO Error.",
              );
               return Response::json($response);
           }
       }
   }

   public function delete_item_po(Request $request)
   {
    try
    {
        $item = AccPurchaseOrderDetail::find($request->get('id'));
        
        if (strlen($item->no_pr) == 9) {
            $data3 = AccPurchaseRequisitionItem::where('item_code', $item->no_item)
            ->where('no_pr', $item->no_pr)
            ->update(['sudah_po' => null ]);
        }
        else{
            $data3 = AccInvestmentDetail::where('no_item', $item->no_item)
            ->where('reff_number', $item->no_pr)
            ->update(['sudah_po' => null]);
        }

        

        $budget_log = AccBudgetHistory::where('no_item', '=', $item->nama_item)
        ->where('po_number', '=', $item->no_po)
        ->first();

        // $date = date('Y-m-d');

        //     //FY
        // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$date'");
        // foreach ($fy as $fys) {
        //     $fiscal = $fys->fiscal_year;
        // }


        $sisa_bulan = $budget_log->budget_month_po.'_sisa_budget';        
        $budget = AccBudget::where('budget_no', $budget_log->budget)->first();

            $total = $budget->$sisa_bulan + $budget_log->amount_po; //add total

            $dataupdate = AccBudget::where('budget_no', $budget_log->budget)
            ->update([
                $sisa_bulan => $total
            ]);

            $update_budget_log = AccBudgetHistory::where('no_item', '=', $item->nama_item)
            ->where('po_number', '=', $item->no_po)
            ->update([
                'budget_month_po' => null,
                'po_number' => null,
                'amount_po' => null,
                'status' => 'PR'
            ]);

            $budget = AccBudget::where('budget_no', $budget_log->budget)->first();

            $totalAfterMinusPR = $budget->$sisa_bulan - $budget_log->amount;

            $dataupdate = AccBudget::where('budget_no', $budget_log->budget)
            ->update([
                $sisa_bulan => $totalAfterMinusPR
            ]);

            $master = AccPurchaseOrderDetail::where('id', '=', $request->get('id'))->delete();

        }
        catch(QueryException $e)
        {
            return redirect('/purchase_order')->with('error', $e->getMessage())
            ->with('page', 'Purchase Order');
        }
    }

    public function po_send_email(Request $request){
        $po = AccPurchaseOrder::find($request->get('id'));

        try{
            if ($po->posisi == "staff_pch")
            {
                $po->posisi = "manager_pch";

                $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.authorized2 = users.username where acc_purchase_orders.id = '" . $request->get('id') . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }
                $po->save();

                    // $isimail = AccPurchaseOrder::select('acc_purchase_orders.*', 'acc_budget_histories.budget', DB::raw("SUM(acc_budget_histories.amount_po) as amount"))
                    // ->join('acc_budget_histories','acc_purchase_orders.no_po','=','acc_budget_histories.po_number')
                    // ->where('acc_purchase_orders.id', '=', $request->get('id'))
                    // ->get();

                // $isimail = "
                // select t1.*,  IF(t1.goods_price != 0,sum(t1.goods_price*t1.qty),sum(t1.service_price*t1.qty)) as amount from 
                // (SELECT
                // acc_purchase_orders.*,
                // acc_purchase_order_details.budget_item,
                // acc_purchase_order_details.goods_price,
                // acc_purchase_order_details.service_price,
                // acc_purchase_order_details.qty
                // FROM
                // acc_purchase_orders
                // JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
                // WHERE
                // acc_purchase_orders.id = ".$request->get('id').")
                // t1";


                $isimail = "
                SELECT acc_purchase_orders.*,
        acc_purchase_order_details.nama_item,
        acc_purchase_order_details.budget_item,
        acc_purchase_order_details.delivery_date,
        acc_purchase_order_details.goods_price,
        acc_purchase_order_details.service_price,
        acc_purchase_order_details.qty,
        acc_purchase_order_details.uom,
        acc_purchase_order_details.no_pr,
        IF(remark = 'Investment', applicant_name, emp_name) as emp_name
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
        LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
        LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
        WHERE
                acc_purchase_orders.id = ".$request->get('id')."";

                $po_isi = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'purchase_order'));

                $response = array(
                  'status' => true,
                  'datas' => "Berhasil"
              );

                return Response::json($response);
            }
            else{

            }


        } catch (Exception $e) {
           $response = array(
              'status' => false,
              'datas' => "Gagal"
          );

           return Response::json($response);
       }
   }

   public function po_resend_email(Request $request){
    $po = AccPurchaseOrder::find($request->get('id'));

    try{
        if ($po->posisi == "manager_pch")
        {
            $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.authorized2 = users.username where acc_purchase_orders.id = '" . $request->get('id') . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }
        }
        else if($po->posisi == "dgm_pch"){
            $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.authorized3 = users.username where acc_purchase_orders.id = '" . $request->get('id') . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }
        }

        $isimail = "
        SELECT acc_purchase_orders.*,
        acc_purchase_order_details.nama_item,
        acc_purchase_order_details.budget_item,
        acc_purchase_order_details.delivery_date,
        acc_purchase_order_details.goods_price,
        acc_purchase_order_details.service_price,
        acc_purchase_order_details.qty,
        acc_purchase_order_details.uom,
        acc_purchase_order_details.no_pr,
        IF(remark = 'Investment', applicant_name, emp_name) as emp_name
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
        LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
        LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
        WHERE
        acc_purchase_orders.id = ".$request->get('id')."";

        $po_isi = db::select($isimail);

        Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'purchase_order'));

        $response = array(
          'status' => true,
          'datas' => "Berhasil"
      );
        return Response::json($response);

    } catch (Exception $e) {
       $response = array(
          'status' => false,
          'datas' => "Gagal"
      );

       return Response::json($response);
   }
}

public function cancel_purchase_order(Request $request)
{
    try
    {
        $po = AccPurchaseOrder::find($request->get('id'));
        $date = date('Y-m-d');

        $budget_log = AccBudgetHistory::where('po_number', '=', $po->no_po)
        ->get();

        if ($budget_log != null) {

            foreach ($budget_log as $log) {
                $sisa_bulan = $log->budget_month_po.'_sisa_budget';
                $budget = AccBudget::where('budget_no', $log->budget)->first();

                    $total = $budget->$sisa_bulan + $log->amount_po; //add total PO
                    $dataupdate = AccBudget::where('budget_no', $log->budget)->update([
                        $sisa_bulan => $total
                    ]);

                    //get Data Budget Based On Periode Dan Nomor
                    $budgetdata = AccBudget::where('budget_no', $log->budget)->first();

                    $totalNew = $budgetdata->$sisa_bulan - $log->amount; //minus amount PR

                    $dataupdate = AccBudget::where('budget_no', $log->budget)
                    ->update([
                        $sisa_bulan => $totalNew
                    ]);
                }

                $data5 = AccBudgetHistory::where('po_number', $po->no_po)
                ->update([
                    'budget_month_po' => null,
                    'po_number' => null,
                    'amount_po' => null,
                    'status' => 'PR',
                    'created_by' => Auth::id()
                ]);
            }

            // $delete_history = AccBudgetHistory::where('po_number', '=', $po->no_po)->delete();



            if($po->remark == "PR"){

                $data3 = AccPurchaseOrderDetail::where('no_po', $po->no_po)
                ->select('*')
                ->get();
                
                foreach ($data3 as $datapr) {
                    $updatepr = AccPurchaseRequisitionItem::where('item_code', $datapr->no_item)
                    ->where('no_pr', $datapr->no_pr)
                    ->update(['sudah_po' => null ]);
                }
            }
            else if($po->remark == "Investment"){

                $data3 = AccPurchaseOrderDetail::where('no_po', $po->no_po)
                ->select('*')
                ->get();
                
                foreach ($data3 as $datainv) {
                    $data3 = AccInvestmentDetail::where('no_item', $datainv->no_item)
                    ->where('reff_number', $datainv->no_pr)
                    ->update(['sudah_po' => null]);
                }
            }

            $delete_po_item = AccPurchaseOrderDetail::where('no_po', '=', $po->no_po)->delete();
            $delete_po = AccPurchaseOrder::where('no_po', '=', $po->no_po)->delete();

            $response = array(
                'status' => true,
            );

            return Response::json($response);

        }
        catch(QueryException $e)
        {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );

            return Response::json($response);
        }

    }


    //==================================//
    //          Verifikasi PO           //
    //==================================//

    public function verifikasi_purchase_order($id)
    {
        $po = AccPurchaseOrder::find($id);

        $path = '/po_list/' . $po->file_pdf;            
        $file_path = asset($path);

        return view('accounting_purchasing.verifikasi.po_verifikasi', array(
            'po' => $po,
            'file_path' => $file_path,
        ))->with('page', 'Purchase Order');
    }


    public function approval_purchase_order(Request $request, $id)
    {
        $approve = $request->get('approve');

        $_IP_ADDRESS = $_SERVER['REMOTE_ADDR'];

        $_PERINTAH = "arp -a $_IP_ADDRESS";
        ob_start();
        system($_PERINTAH);
        $_HASIL = ob_get_contents();
        ob_clean();
        $_PECAH = strstr($_HASIL, $_IP_ADDRESS);
        
        if ($_PECAH == FALSE) {
            $_HASIL = $_IP_ADDRESS;
        }else{
            $_PECAH_STRING = explode($_IP_ADDRESS, str_replace(" ", "", $_PECAH));
            $_HASIL = substr($_PECAH_STRING[1], 0, 17);               
        }

        if ($approve == "1") {

            $po = AccPurchaseOrder::find($id);

            if ($po->posisi == "manager_pch")
            {
                $po->posisi = "dgm_pch";
                $po->approval_authorized2 = "Approved";
                $po->date_approval_authorized2 = date('Y-m-d H:i:s');
                $po->autentikasi_2 = $_HASIL;

                $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.authorized3 = users.username where acc_purchase_orders.id = '" . $id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }
            }
            else if ($po->posisi == "dgm_pch")
            {
                $po->posisi = 'pch';
                $po->approval_authorized3 = "Approved";
                $po->date_approval_authorized3 = date('Y-m-d H:i:s');
                $po->autentikasi_3 = $_HASIL;
                $po->status = "not_sap";

                    //kirim email Staff Purchasing sebagai pemberitahuan
                $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.buyer_id = users.username where acc_purchase_orders.id = '" . $id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                // $po->posisi = "gm_pch";
                // $po->approval_authorized3 = "Approved";
                // $po->date_approval_authorized3 = date('Y-m-d H:i:s');


                // $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.authorized4 = users.username where acc_purchase_orders.id = '" . $id . "'";
                // $mails = DB::select($mailto);

                // foreach ($mails as $mail)
                // {
                //     $mailtoo = $mail->email;
                // }
            }
            // else if ($po->posisi == "gm_pch")
            // {
            //     $po->posisi = 'pch';
            //     $po->approval_authorized4 = "Approved";
            //     $po->date_approval_authorized4 = date('Y-m-d H:i:s');
            //     // $po->autentikasi_4 = $_HASIL;
            //     $po->status = "not_sap";

            //         //kirim email Staff Purchasing sebagai pemberitahuan
            //     $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.buyer_id = users.username where acc_purchase_orders.id = '" . $id . "'";
            //     $mails = DB::select($mailto);

            //     foreach ($mails as $mail)
            //     {
            //         $mailtoo = $mail->email;
            //     }
            // }

            $po->save();

            if($po->remark == "Investment"){
                $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_investments.applicant_department')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                ->leftJoin('acc_investments', 'acc_purchase_order_details.no_pr', '=', 'acc_investments.reff_number')
                ->where('acc_purchase_orders.id', '=', $id)
                ->get();
            }

            else if($po->remark == "PR"){
                $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_purchase_requisitions.department')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                ->leftJoin('acc_purchase_requisitions', 'acc_purchase_order_details.no_pr', '=', 'acc_purchase_requisitions.no_pr')
                ->where('acc_purchase_orders.id', '=', $id)
                ->get();
            }

            $pr = AccPurchaseOrder::select('no_pr')
            ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
            ->where('acc_purchase_orders.id', '=', $id)
            ->distinct()
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_po', array(
                'po' => $detail_po,
                'pr' => $pr
            ));

            $pdf->save(public_path() . "/po_list/".$detail_po[0]->no_po.".pdf");

            // $isimail = "select acc_purchase_orders.*, acc_budget_histories.budget, SUM(acc_budget_histories.amount_po) as amount FROM acc_purchase_orders join acc_budget_histories on acc_purchase_orders.no_po = acc_budget_histories.po_number where acc_purchase_orders.id = ".$id;

            // $isimail = "
            // select t1.*,  IF(t1.goods_price != 0,sum(t1.goods_price*t1.qty),sum(t1.service_price*t1.qty)) as amount from 
            // (SELECT
            // acc_purchase_orders.*,
            // acc_purchase_order_details.budget_item,
            // acc_purchase_order_details.goods_price,
            // acc_purchase_order_details.service_price,
            // acc_purchase_order_details.qty
            // FROM
            // acc_purchase_orders
            // JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
            // WHERE
            // acc_purchase_orders.id = ".$id.")
            // t1";

            $isimail = "
            SELECT acc_purchase_orders.*,
            acc_purchase_order_details.nama_item,
            acc_purchase_order_details.budget_item,
            acc_purchase_order_details.delivery_date,
            acc_purchase_order_details.goods_price,
            acc_purchase_order_details.service_price,
            acc_purchase_order_details.qty,
            acc_purchase_order_details.uom
            FROM
            acc_purchase_orders
            JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
            WHERE
            acc_purchase_orders.id = ".$id."";

            $po_isi = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'purchase_order'));

            return redirect('/purchase_order/verifikasi/' . $id)->with('status', 'Purchase Order Approved')
            ->with('page', 'Purchase Requisition');
        }
        else
        {
            return redirect('/purchase_order/verifikasi/' . $id)->with('error', 'Purchase Order Not Approved')
            ->with('page', 'Purchase Requisition');
        }
    }

    public function poapprovalmanager($id){
        $po = AccPurchaseOrder::find($id);
        try{
            if ($po->posisi == "manager_pch")
            {
                $po->posisi = "dgm_pch";
                $po->approval_authorized2 = "Approved";
                $po->date_approval_authorized2 = date('Y-m-d H:i:s');

                $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.authorized3 = users.username where acc_purchase_orders.id = '" . $id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                $po->save();

                if($po->remark == "Investment"){
                    $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_investments.applicant_department')
                    ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                    ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                    ->leftJoin('acc_investments', 'acc_purchase_order_details.no_pr', '=', 'acc_investments.reff_number')
                    ->where('acc_purchase_orders.id', '=', $id)
                    ->get();
                }

                else if($po->remark == "PR"){
                    $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_purchase_requisitions.department')
                    ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                    ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                    ->leftJoin('acc_purchase_requisitions', 'acc_purchase_order_details.no_pr', '=', 'acc_purchase_requisitions.no_pr')
                    ->where('acc_purchase_orders.id', '=', $id)
                    ->get();
                }
                
                $pr = AccPurchaseOrder::select('no_pr')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->where('acc_purchase_orders.id', '=', $id)
                ->distinct()
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'potrait');

                $pdf->loadView('accounting_purchasing.report.report_po', array(
                    'po' => $detail_po,
                    'pr' => $pr
                ));

                $pdf->save(public_path() . "/po_list/".$detail_po[0]->no_po.".pdf");

                // $isimail = "select acc_purchase_orders.*, acc_budget_histories.budget, SUM(acc_budget_histories.amount_po) as amount FROM acc_purchase_orders join acc_budget_histories on acc_purchase_orders.no_po = acc_budget_histories.po_number where acc_purchase_orders.id = ".$id;

                // $isimail = "
                // select t1.*,  IF(t1.goods_price != 0,sum(t1.goods_price*t1.qty),sum(t1.service_price*t1.qty)) as amount from 
                // (SELECT
                // acc_purchase_orders.*,
                // acc_purchase_order_details.budget_item,
                // acc_purchase_order_details.goods_price,
                // acc_purchase_order_details.service_price,
                // acc_purchase_order_details.qty
                // FROM
                // acc_purchase_orders
                // JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
                // WHERE
                // acc_purchase_orders.id = ".$id.")
                // t1";

                $isimail = "
                SELECT acc_purchase_orders.*,
        acc_purchase_order_details.nama_item,
        acc_purchase_order_details.budget_item,
        acc_purchase_order_details.delivery_date,
        acc_purchase_order_details.goods_price,
        acc_purchase_order_details.service_price,
        acc_purchase_order_details.qty,
        acc_purchase_order_details.uom,
        acc_purchase_order_details.no_pr,
        IF(remark = 'Investment', applicant_name, emp_name) as emp_name
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
        LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
        LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
        WHERE
                acc_purchase_orders.id = ".$id."";

                $po_isi = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'purchase_order'));

                $message = 'PO '.$po->no_po;
                $message2 ='Berhasil di approve';
            }
            else{
                if ($po->posisi == "staff_pch") {
                    $message = 'PO No. '.$po->no_po;
                    $message2 ='Telah Di Reject Sebelumnya';
                } else{
                    $message = 'PO No. '.$po->no_po;
                    $message2 ='Telah Di Approve Sebelumnya';
                }
                // $message = 'PO dengan Nomor. '.$po->no_po;
                // $message2 ='Sudah di approve/reject';
            }

            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $po->no_pr,
                'message' => $message,
                'message2' => $message2,
            ))->with('page', 'Approval');

        } catch (Exception $e) {
            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $po->no_pr,
                'message' => 'Error',
                'message2' => $e->getMessage(),
            ))->with('page', 'Approval');
        }
    }

    public function poapprovaldgm($id){
        $po = AccPurchaseOrder::find($id);
        try{
            if ($po->posisi == "dgm_pch")
            {
                $po->posisi = 'pch';
                $po->approval_authorized3 = "Approved";
                $po->date_approval_authorized3 = date('Y-m-d H:i:s');
                $po->status = "not_sap";

                    //kirim email Staff Purchasing sebagai pemberitahuan
                $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.buyer_id = users.username where acc_purchase_orders.id = '" . $id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }
                
                // $po->posisi = "gm_pch";
                // $po->approval_authorized3 = "Approved";
                // $po->date_approval_authorized3 = date('Y-m-d H:i:s');

                // $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.authorized4 = users.username where acc_purchase_orders.id = '" . $id . "'";
                // $mails = DB::select($mailto);

                // foreach ($mails as $mail)
                // {
                //     $mailtoo = $mail->email;
                // }

                $po->save();

                if($po->remark == "Investment"){
                    $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_investments.applicant_department')
                    ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                    ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                    ->leftJoin('acc_investments', 'acc_purchase_order_details.no_pr', '=', 'acc_investments.reff_number')
                    ->where('acc_purchase_orders.id', '=', $id)
                    ->get();
                }

                else if($po->remark == "PR"){
                    $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_purchase_requisitions.department')
                    ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                    ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                    ->leftJoin('acc_purchase_requisitions', 'acc_purchase_order_details.no_pr', '=', 'acc_purchase_requisitions.no_pr')
                    ->where('acc_purchase_orders.id', '=', $id)
                    ->get();
                }

                $pr = AccPurchaseOrder::select('no_pr')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->where('acc_purchase_orders.id', '=', $id)
                ->distinct()
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'potrait');

                $pdf->loadView('accounting_purchasing.report.report_po', array(
                    'po' => $detail_po,
                    'pr' => $pr
                ));

                $pdf->save(public_path() . "/po_list/".$detail_po[0]->no_po.".pdf");

                // $isimail = "
                // select t1.*,  IF(t1.goods_price != 0,sum(t1.goods_price*t1.qty),sum(t1.service_price*t1.qty)) as amount from 
                // (SELECT
                // acc_purchase_orders.*,
                // acc_purchase_order_details.budget_item,
                // acc_purchase_order_details.goods_price,
                // acc_purchase_order_details.service_price,
                // acc_purchase_order_details.qty
                // FROM
                // acc_purchase_orders
                // JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
                // WHERE
                // acc_purchase_orders.id = ".$id.")
                // t1";

                $isimail = "
                SELECT acc_purchase_orders.*,
        acc_purchase_order_details.nama_item,
        acc_purchase_order_details.budget_item,
        acc_purchase_order_details.delivery_date,
        acc_purchase_order_details.goods_price,
        acc_purchase_order_details.service_price,
        acc_purchase_order_details.qty,
        acc_purchase_order_details.uom,
        acc_purchase_order_details.no_pr,
        IF(remark = 'Investment', applicant_name, emp_name) as emp_name
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
        LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
        LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
        WHERE
                acc_purchase_orders.id = ".$id."";

                $po_isi = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'purchase_order'));

                $message = 'PO '.$po->no_po;
                $message2 ='Berhasil di approve';
            }
            else{
                if ($po->posisi == "staff_pch") {
                    $message = 'PO No. '.$po->no_po;
                    $message2 ='Telah Di Reject Sebelumnya';
                } else{
                    $message = 'PO No. '.$po->no_po;
                    $message2 ='Telah Di Approve Sebelumnya';
                }

                // $message = 'PO '.$po->no_po;
                // $message2 ='Sudah di approve/reject';
            }

            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $po->no_pr,
                'message' => $message,
                'message2' => $message2,
            ))->with('page', 'Approval');

        } catch (Exception $e) {
            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $po->no_pr,
                'message' => 'Error',
                'message2' => $e->getMessage(),
            ))->with('page', 'Approval');
        }
    }

    public function poapprovalgm($id){
        $po = AccPurchaseOrder::find($id);
        try{
            if ($po->posisi == "gm_pch")
            {
                $po->posisi = 'pch';
                $po->approval_authorized4 = "Approved";
                $po->date_approval_authorized4 = date('Y-m-d H:i:s');
                $po->status = "not_sap";

                    //kirim email Staff Purchasing sebagai pemberitahuan
                $mailto = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.buyer_id = users.username where acc_purchase_orders.id = '" . $id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                $po->save();

                if($po->remark == "Investment"){
                    $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_investments.applicant_department')
                    ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                    ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                    ->leftJoin('acc_investments', 'acc_purchase_order_details.no_pr', '=', 'acc_investments.reff_number')
                    ->where('acc_purchase_orders.id', '=', $id)
                    ->get();
                }

                else if($po->remark == "PR"){
                    $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_purchase_requisitions.department')
                    ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                    ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                    ->leftJoin('acc_purchase_requisitions', 'acc_purchase_order_details.no_pr', '=', 'acc_purchase_requisitions.no_pr')
                    ->where('acc_purchase_orders.id', '=', $id)
                    ->get();
                }

                $pr = AccPurchaseOrder::select('no_pr')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->where('acc_purchase_orders.id', '=', $id)
                ->distinct()
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'potrait');

                $pdf->loadView('accounting_purchasing.report.report_po', array(
                    'po' => $detail_po,
                    'pr' => $pr
                ));

                $pdf->save(public_path() . "/po_list/".$detail_po[0]->no_po.".pdf");

                // $isimail = "
                // select t1.*,  IF(t1.goods_price != 0,sum(t1.goods_price*t1.qty),sum(t1.service_price*t1.qty)) as amount from 
                // (SELECT
                // acc_purchase_orders.*,
                // acc_purchase_order_details.budget_item,
                // acc_purchase_order_details.goods_price,
                // acc_purchase_order_details.service_price,
                // acc_purchase_order_details.qty
                // FROM
                // acc_purchase_orders
                // JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
                // WHERE
                // acc_purchase_orders.id = ".$id.")
                // t1";

                $isimail = "
                SELECT acc_purchase_orders.*,
                acc_purchase_order_details.nama_item,
                acc_purchase_order_details.budget_item,
                acc_purchase_order_details.delivery_date,
                acc_purchase_order_details.goods_price,
                acc_purchase_order_details.service_price,
                acc_purchase_order_details.qty,
                acc_purchase_order_details.uom,
                acc_purchase_order_details.no_pr,
                IF(remark = 'Investment', applicant_name, emp_name) as emp_name
                FROM
                acc_purchase_orders
                JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
                LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
                LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
                WHERE
                acc_purchase_orders.id = ".$id."";

                $po_isi = db::select($isimail);

                Mail::to($mailtoo)->send(new SendEmail($po_isi, 'purchase_order'));

                $message = 'PO No. '.$po->no_po;
                $message2 ='Successfully Approved';
            }
            else{
                $message = 'PO No. '.$po->no_po;
                $message2 ='Already approved/rejected';
            }

            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $po->no_po,
                'message' => $message,
                'message2' => $message2,
            ))->with('page', 'Approval');

        } catch (Exception $e) {
            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $po->no_po,
                'message' => 'Error',
                'message2' => $e->getMessage(),
            ))->with('page', 'Approval');
        }
    }

    public function poreject(Request $request, $id)
    {
        $po = AccPurchaseOrder::find($id);

        if ($po->posisi == "manager_pch" || $po->posisi == "dgm_pch" || $po->posisi == "gm_pch")
        {
            $po->datereject = date('Y-m-d H:i:s');
            $po->posisi = "staff_pch";
            $po->approval_authorized2 = null;
            $po->date_approval_authorized2 = null;
            $po->approval_authorized3 = null;
            $po->date_approval_authorized3 = null;
            $po->approval_authorized4 = null;
            $po->date_approval_authorized4 = null;
        }
        $po->save();

        // $isimail = "
        // select t1.*,  IF(t1.goods_price != 0,sum(t1.goods_price*t1.qty),sum(t1.service_price*t1.qty)) as amount from 
        // (SELECT
        // acc_purchase_orders.*,
        // acc_purchase_order_details.budget_item,
        // acc_purchase_order_details.goods_price,
        // acc_purchase_order_details.service_price,
        // acc_purchase_order_details.qty
        // FROM
        // acc_purchase_orders
        // JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
        // WHERE
        // acc_purchase_orders.id = ".$po->id.")
        // t1";

        $isimail = "
        SELECT acc_purchase_orders.*,
        acc_purchase_order_details.nama_item,
        acc_purchase_order_details.budget_item,
        acc_purchase_order_details.delivery_date,
        acc_purchase_order_details.goods_price,
        acc_purchase_order_details.service_price,
        acc_purchase_order_details.qty,
        acc_purchase_order_details.uom,
        acc_purchase_order_details.no_pr,
        IF(remark = 'Investment', applicant_name, emp_name) as emp_name
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
        LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
        LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
        WHERE
        acc_purchase_orders.id = ".$po->id."";

        $tolak = db::select($isimail);

        //kirim email ke Buyer
        $mails = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.buyer_id = users.username where acc_purchase_orders.id ='" . $po->id . "'";
        $mailtoo = DB::select($mails);


        Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'purchase_order'));

        $message = 'PO dengan Nomor. '.$po->no_po;
        $message2 ='Tidak Disetujui';

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $po->no_po,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');
    }

    public function reject_purchase_order(Request $request, $id)
    {
        $alasan = $request->get('alasan');

        $po = AccPurchaseOrder::find($id);

        if ($po->posisi == "manager_pch" || $po->posisi == "dgm_pch" || $po->posisi == "gm_pch")
        {
            $po->reject = $alasan;
            $po->datereject = date('Y-m-d H:i:s');
            $po->posisi = "staff_pch";
            $po->approval_authorized2 = null;
            $po->date_approval_authorized2 = null;
            $po->approval_authorized3 = null;
            $po->date_approval_authorized3 = null;
            $po->approval_authorized4 = null;
            $po->date_approval_authorized4 = null;
        }

        $po->save();

        // $isimail = "
        // select t1.*,  IF(t1.goods_price != 0,sum(t1.goods_price*t1.qty),sum(t1.service_price*t1.qty)) as amount from 
        // (SELECT
        // acc_purchase_orders.*,
        // acc_purchase_order_details.budget_item,
        // acc_purchase_order_details.goods_price,
        // acc_purchase_order_details.service_price,
        // acc_purchase_order_details.qty
        // FROM
        // acc_purchase_orders
        // JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
        // WHERE
        // acc_purchase_orders.id = ".$po->id.")
        // t1";

        $isimail = "
        SELECT acc_purchase_orders.*,
        acc_purchase_order_details.nama_item,
        acc_purchase_order_details.budget_item,
        acc_purchase_order_details.delivery_date,
        acc_purchase_order_details.goods_price,
        acc_purchase_order_details.service_price,
        acc_purchase_order_details.qty,
        acc_purchase_order_details.uom
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
        WHERE
        acc_purchase_orders.id = ".$po->id."";

        $tolak = db::select($isimail);

            //kirim email ke Buyer
        $mails = "select distinct email from acc_purchase_orders join users on acc_purchase_orders.buyer_id = users.username where acc_purchase_orders.id ='" . $po->id . "'";
        $mailtoo = DB::select($mails);

        Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'purchase_order'));
        return redirect('/purchase_order/verifikasi/' . $id)->with('status', 'PO Not Approved')
        ->with('page', 'Purchase Requisition');
    }

    //==================================//
    //          Report PO               //
    //==================================//
    public function report_purchase_order($id){

        $po = AccPurchaseOrder::find($id);

        if($po->remark == "Investment"){

            if (date('Y-m-d', strtotime($po->tgl_po)) > "2022-04-30") {
                $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_investments.applicant_department')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                ->leftJoin('acc_investments', 'acc_purchase_order_details.no_pr', '=', 'acc_investments.reff_number')
                ->where('acc_purchase_orders.id', '=', $id)
                ->get();  
            }else{
                $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers_olds.*','acc_purchase_order_details.*','acc_investments.applicant_department')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->leftJoin('acc_suppliers_olds', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers_olds.vendor_code')
                ->leftJoin('acc_investments', 'acc_purchase_order_details.no_pr', '=', 'acc_investments.reff_number')
                ->where('acc_purchase_orders.id', '=', $id)
                ->get(); 
            }


        }

        else if($po->remark == "PR"){
            if (date('Y-m-d', strtotime($po->tgl_po)) > "2022-04-30") {
                $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers.*','acc_purchase_order_details.*','acc_purchase_requisitions.department')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->leftJoin('acc_suppliers', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                ->leftJoin('acc_purchase_requisitions', 'acc_purchase_order_details.no_pr', '=', 'acc_purchase_requisitions.no_pr')
                ->where('acc_purchase_orders.id', '=', $id)
                ->get();

            }
            else{
                $detail_po = AccPurchaseOrder::select('acc_purchase_orders.*','acc_suppliers_olds.*','acc_purchase_order_details.*','acc_purchase_requisitions.department')
                ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
                ->leftJoin('acc_suppliers_olds', 'acc_purchase_orders.supplier_code', '=', 'acc_suppliers_olds.vendor_code')
                ->leftJoin('acc_purchase_requisitions', 'acc_purchase_order_details.no_pr', '=', 'acc_purchase_requisitions.no_pr')
                ->where('acc_purchase_orders.id', '=', $id)
                ->get();
            }
        }

        $pr = AccPurchaseOrder::select('no_pr')
        ->leftJoin('acc_purchase_order_details', 'acc_purchase_orders.no_po', '=', 'acc_purchase_order_details.no_po')
        ->where('acc_purchase_orders.id', '=', $id)
        ->distinct()
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.report.report_po', array(
            'po' => $detail_po,
            'pr' => $pr
        ));

                // $pdf->save(public_path() . "/pr/" . $reports[0]->id . ".pdf");

        $path = "po_list/" . $detail_po[0]->no_po . ".pdf";

        if($detail_po[0]->revised == "true"){
            return $pdf->stream($detail_po[0]->no_po. " (".$detail_po[0]->supplier_name.") Revised.pdf");
        }else{
            return $pdf->stream($detail_po[0]->no_po. " (".$detail_po[0]->supplier_name.").pdf");
        }

                // return view('accounting_purchasing.report.report_po', array(
                //  'po' => $detail_po,
                //  'pr' => $pr
                // ))->with('page', 'PO')->with('head', 'PO List');
    }

    public function exportPO(Request $request){

        $time = date('d-m-Y H;i;s');

        $tanggal = "";

        if (strlen($request->get('datefrom')) > 0)
        {
            $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
            $tanggal = "and tgl_po >= '" . $datefrom . " 00:00:00' ";
            if (strlen($request->get('dateto')) > 0)
            {
                $dateto = date('Y-m-d', strtotime($request->get('dateto')));
                $tanggal = $tanggal . "and tgl_po  <= '" . $dateto . " 23:59:59' ";
            }
        }

        $po_detail = db::select(
            "Select acc_purchase_order_details.id,acc_purchase_orders.no_po, acc_purchase_orders.no_po_sap, acc_purchase_orders.remark, acc_purchase_orders.note, acc_purchase_order_details.no_pr, acc_purchase_orders.tgl_po, acc_purchase_orders.supplier_code , acc_purchase_orders.supplier_name, acc_purchase_orders.supplier_due_payment, acc_purchase_orders.currency, acc_purchase_orders.material, acc_purchase_orders.buyer_name, acc_purchase_order_details.no_item, acc_purchase_order_details.nama_item, acc_purchase_order_details.delivery_date, acc_purchase_order_details.qty, acc_purchase_order_details.uom, acc_purchase_order_details.goods_price, acc_purchase_order_details.service_price, acc_purchase_order_details.konversi_dollar, acc_purchase_order_details.budget_item, acc_purchase_orders.cost_center, acc_purchase_order_details.gl_number, acc_purchase_requisitions.emp_name, acc_investments.applicant_name from acc_purchase_orders left join acc_purchase_order_details on acc_purchase_orders.no_po = acc_purchase_order_details.no_po left join acc_purchase_requisitions on acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr left join acc_investments on acc_purchase_order_details.no_pr = acc_investments.reff_number WHERE acc_purchase_orders.deleted_at IS NULL " . $tanggal . " order by acc_purchase_orders.no_po,id ASC
            ");

        // and acc_purchase_orders.posisi = 'pch' and acc_purchase_orders.`status` = 'not_sap' and no_po_sap is null 

        $data = array(
            'po_detail' => $po_detail
        );

        ob_clean();

        Excel::create('PO List '.$time, function($excel) use ($data){
            $excel->sheet('Location', function($sheet) use ($data) {
              return $sheet->loadView('accounting_purchasing.purchase_order_excel', $data);
          });
        })->export('xlsx');
    }

    public function update_purchase_requisition_po(Request $request)
    {
        $id = Auth::id();
        $lop3 = $request->get('lop3');
        $lop = explode(',', $request->get('looping_pr'));

        $total_nambah = 0;
        $total_update = 0;
        $counter = 0;

        try
        {
            foreach ($lop as $lp)
            {
                $item_code = "item_code_edit" . $lp;
                $item_desc = "item_desc_edit" . $lp;
                $item_spec = "item_spec_edit" . $lp;
                $item_stock = "item_stock_edit" . $lp;
                $item_uom = "uom_edit" . $lp;
                $item_req = "req_date_edit" . $lp;
                $item_qty = "qty_edit" . $lp;
                $item_price = "item_price_edit" . $lp;
                $item_amount = "amount_edit" . $lp;

            // $amount = preg_replace('/[^0-9]/', '', $request->get($item_amount));

                $getitem = AccPurchaseRequisitionItem::where('id', $lp)->first();

                $data10 = AccBudgetHistory::where('no_item',$getitem->item_desc)
                ->where('category_number',$request->get('no_pr_edit'))
                ->update([
                    'no_item' => $request->get($item_desc),
                ]);

                $updatedatabaseItem = AccItem::where('deskripsi','=',$getitem->item_desc)
                ->update([
                    'deskripsi' => $request->get($item_desc)
                ]);


                $data2 = AccPurchaseRequisitionItem::where('id', $lp)->update([
                  'item_code' => $request->get($item_code), 
                  'item_desc' => $request->get($item_desc), 
                  'item_spec' => $request->get($item_spec),
                  'item_stock' => $request->get($item_stock), 
                  'item_uom' => $request->get($item_uom), 
                  'item_request_date' => $request->get($item_req), 
                  'item_qty' => $request->get($item_qty),
                  'item_price' => $request->get($item_price),
                  'item_amount' => $request->get($item_amount),
                  'created_by' => $id
              ]);


                if ($data2) {
                    $konversi = "konversi_dollar" . $lp;

                    $getamount = AccBudgetHistory::where('budget', $request->get('no_budget_edit'))
                    ->where('category_number',$request->get('no_pr_edit'))
                    ->where('no_item',$request->get($item_desc))
                    ->first();

                    $counter = $counter + $getamount->amount;

                    $data5 = AccBudgetHistory::where('budget', $request->get('no_budget_edit'))
                    ->where('category_number',$request->get('no_pr_edit'))
                    ->where('no_item',$request->get($item_desc))
                    ->update([
                        'amount' => $request->get($konversi),
                        'created_by' => $id
                    ]);

                    $total_update = $total_update + $request->get($konversi);
                }
            }

            for ($i = 2;$i <= $lop3;$i++)
            {

                $item_code = "item_code" . $i;
                $item_desc = "item_desc" . $i;
                $item_spec = "item_spec" . $i;
                $item_stock = "item_stock" . $i;
                $item_req = "req_date" . $i;
                $item_currency = "item_currency" . $i;
                $item_currency_text = "item_currency_text" . $i;
                $item_price = "item_price" . $i;
                $item_qty = "qty" . $i;
                $item_uom = "uom" . $i;
                $item_amount = "amount" . $i;
                $status = "";

                    //Jika ada value kosong
                if ($request->get($item_code) == "kosong")
                {
                    $request->get($item_code) == "";
                }

                    //Jika item kosong
                if ($request->get($item_code) != null)
                {
                    $status = "fixed";
                }
                else
                {
                    $status = "sementara";
                }

                if ($request->get($item_currency) != "")
                {
                    $current = $request->get($item_currency);
                }
                else if ($request->get($item_currency_text) != "")
                {
                    $current = $request->get($item_currency_text);
                }

                    //get only number
            // $price_real = preg_replace('/[^0-9]/', '', $request->get($item_price));
            // $amount = preg_replace('/[^0-9]/', '', $request->get($item_amount));

                $data2 = new AccPurchaseRequisitionItem([
                    'no_pr' => $request->get('no_pr_edit') , 
                    'item_code' => $request->get($item_code) , 
                    'item_desc' => $request->get($item_desc) , 
                    'item_spec' => $request->get($item_spec) ,
                    'item_stock' => $request->get($item_stock) , 
                    'item_request_date' => $request->get($item_req) , 
                    'item_currency' => $current,
                    'item_price' => $request->get($item_price),
                    'item_qty' => $request->get($item_qty) , 
                    'item_uom' => $request->get($item_uom) , 
                    'item_amount' => $request->get($item_amount), 
                    'status' => $status, 
                    'created_by' => $id
                ]);

                $data2->save();

                $dollar = "konversi_dollar" . $i;
                $month = strtolower(date("M",strtotime($request->get('tgl_pengajuan_edit'))));
                $begbal = $request->get('SisaBudgetEdit') + $request->get('TotalPembelianEdit');

                $data3 = new AccBudgetHistory([
                    'budget' => $request->get('no_budget_edit'),
                    'budget_month' => $month,
                    'budget_date' => $request->get('tgl_pengajuan_edit'),
                    'category_number' => $request->get('no_pr_edit'),
                    'beg_bal' => $begbal,
                    'no_item' => $request->get($item_desc),
                    'amount' => $request->get($dollar),
                    'created_by' => $id
                ]);

                $data3->save();

                $total_nambah += $request->get($dollar);
            }

            // $datePembelian = $request->get('tgl_pengajuan_edit');

            // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$datePembelian'");
            // foreach ($fy as $fys) {
            //     $fiscal = $fys->fiscal_year;
            // }

            $getbulan = AccBudget::select('budget_no', 'periode')
            ->where('budget_no', $request->get('no_budget_edit'))
            ->first();

            if ($getbulan->periode == "FY200") {
                $bulan = strtolower(date('M'));
            }
            else{
                $bulan = "apr";
            }

            // $bulan = strtolower(date("M",strtotime($datePembelian))); //aug,sep,oct

            $sisa_bulan = $bulan.'_sisa_budget';                    
            //get Data Budget Based On Periode Dan Nomor
            $budget = AccBudget::where('budget_no','=',$request->get('no_budget_edit'))->first();
            
            $total = $budget->$sisa_bulan + $counter - $total_update - $total_nambah;

            if ($total < 0) {
                return redirect('/purchase_order')->with('error', 'Total Melebihi Budget')
                ->with('page', 'Purchase Order');
            } else{
                $dataupdate = AccBudget::where('budget_no',$request->get('no_budget_edit'))->update([
                    $sisa_bulan => $total
                ]);
            }

            $detail_pr = AccPurchaseRequisition::select('acc_purchase_requisitions.*','acc_purchase_requisition_items.*','acc_budget_histories.beg_bal','acc_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
            ->leftJoin('acc_purchase_requisition_items', 'acc_purchase_requisitions.no_pr', '=', 'acc_purchase_requisition_items.no_pr')
            ->join('acc_budget_histories', function($join) {
             $join->on('acc_budget_histories.category_number', '=', 'acc_purchase_requisition_items.no_pr');
             $join->on('acc_budget_histories.no_item','=', 'acc_purchase_requisition_items.item_desc');
         })
            ->where('acc_purchase_requisitions.id', '=', $request->get('id_edit_pr'))
            ->distinct()
            ->get();

            $exchange_rate = AccExchangeRate::select('*')
            ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
            ->where('currency','!=','USD')
            ->orderBy('currency','ASC')
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'landscape');

            $pdf->loadView('accounting_purchasing.report.report_pr', array(
                'pr' => $detail_pr,
                'rate' => $exchange_rate
            ));

            $pdf->save(public_path() . "/pr_list/PR".$detail_pr[0]->no_pr.".pdf");


            return redirect('/purchase_order')
            ->with('status', 'Purchase Requisition Berhasil Dirubah')
            ->with('page', 'Purchase Order');
        }
        catch(QueryException $e)
        {
            return redirect('/purchase_order')->with('error', $e->getMessage())
            ->with('page', 'Purchase Order');
        }
    }

    public function update_investment_po(Request $request)
    {
        $id = Auth::id();
        $lop = explode(',', $request->get('looping_inv'));
        $id_inv = $request->get('id_edit_inv');

        $invest = AccInvestment::find($id_inv);
        $judul = substr($invest->reff_number, 0, 7);
        
        try
        {
            foreach ($lop as $lp)
            {
                $item_code = "no_item_edit" . $lp;
                $item_desc = "detail_edit" . $lp;

                $getitem = AccInvestmentDetail::where('id', $lp)->first();

                $data10 = AccBudgetHistory::where('no_item',$getitem->detail)
                ->where('category_number',$invest->reff_number)
                ->update([
                    'no_item' => $request->get($item_desc),
                ]);

                $data2 = AccInvestmentDetail::where('id', $lp)->update([
                  'no_item' => $request->get($item_code), 
                  'detail' => $request->get($item_desc), 
                  'created_by' => $id
              ]);
            }

            $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
            ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
            ->where('acc_investments.id', '=', $id_inv)
            ->get();

            $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
            ->where('acc_investments.id', '=', $id_inv)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('Legal', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_investment', array(
                'inv' => $detail_inv,
                'inv_budget' => $inv_budget
            ));

            $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

            return redirect('/purchase_order_investment')
            ->with('status', 'Investment Berhasil Dirubah')
            ->with('page', 'Purchase Order Investment');
        }
        catch(QueryException $e)
        {
            return redirect('/purchase_order_investment')->with('error', $e->getMessage())
            ->with('page', 'Purchase Order Investment');
        }
    }

    public function pogetiteminvest(Request $request)
    {
        $html = array();
        $kode_item = AccInvestmentDetail::join('acc_investments', 'acc_investment_details.reff_number', '=', 'acc_investments.reff_number')
        ->join('acc_investment_budgets','acc_investments.reff_number','=','acc_investment_budgets.reff_number')
        ->join('acc_items','acc_investment_details.no_item','=','acc_items.kode_item')
        ->where('acc_investment_details.reff_number', $request->reff_number)
        ->where('acc_investment_details.no_item', $request->no_item)
        ->get();

        $last_price = AccPurchaseOrderDetail::select('goods_price')
        ->where('no_item', $request->item_code)
        ->orderBy('id','desc')
        ->get();

        $last = 0;
        
        if(count($last_price) > 0){
            $last = $last_price[0]->goods_price;
        }

        foreach ($kode_item as $item)
        {
            $html = array(
                'no_item' => $item->no_item,
                'deskripsi' => $item->detail,
                'uom' => $item->uom,
                'qty' => $item->qty,
                'price' => $item->price,
                'currency' => $item->currency,
                'amount' => $item->amount,
                'delivery_date' => $item->delivery_order,
                'last_price' => $last,
                'budget_no' => $item->budget_no,
            );

        }

        return json_encode($html);
    }


    //==================================//
    //            Investment            //
    //==================================//


    public function Investment()
    {
        $title = 'Investment';
        $title_jp = '投資申請';

        $emp = EmployeeSync::where('employee_id', Auth::user()->username)
        ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
        ->first();

        $dept = $this->dept;

        return view('accounting_purchasing.investment', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'employee' => $emp,
            'dept' => $dept
        ))->with('page', 'Investment')
        ->with('head', 'inv');
    }

    public function fetch_investment(Request $request)
    {
        $tanggal = "";
        $adddepartment = "";
        $restrict_dept = "";

        if (strlen($request->get('datefrom')) > 0)
        {
            $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
            $tanggal = "and acc_investments.submission_date >= '" . $datefrom . " 00:00:00' ";
            if (strlen($request->get('dateto')) > 0)
            {
                $dateto = date('Y-m-d', strtotime($request->get('dateto')));
                $tanggal = $tanggal . "and acc_investments.submission_date  <= '" . $dateto . " 23:59:59' ";
            }
        }

        if ($request->get('department') != null)
        {
            $departments = $request->get('department');
            $deptlength = count($departments);
            $department = "";

            for ($x = 0;$x < $deptlength;$x++)
            {
                $department = $department . "'" . $departments[$x] . "'";
                if ($x != $deptlength - 1)
                {
                    $department = $department . ",";
                }
            }
            $adddepartment = "and acc_investments.applicant_department in (" . $department . ") ";
        }

        //Get Employee Department
        $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
        ->select('department')
        ->first();

        if (str_contains(Auth::user()->role_code, 'MIS') || $emp_dept->department == "Accounting Department" || $emp_dept->department == "Purchasing Control Department" || $emp_dept->department == "Procurement Department" || Auth::user()->role_code == "M" || Auth::user()->role_code == "DGM") {
            $restrict_dept = "";
        }
        else{
            $restrict_dept = "and applicant_department = '".$emp_dept->department."'";
        }

        $qry = "SELECT  * FROM acc_investments
        WHERE acc_investments.deleted_at IS NULL " . $tanggal . "" . $adddepartment . "" . $restrict_dept. "
        ORDER BY acc_investments.id DESC";

        $invest = DB::select($qry);

        return DataTables::of($invest)
        ->editColumn('submission_date', function ($invest)
        {
            return date('d F Y', strtotime($invest->submission_date));
        })

        ->editColumn('supplier_code', function ($invest)
        {
            return $invest->supplier_code.' - '.$invest->supplier_name;
        })
        ->editColumn('file', function ($invest)
        {
            $data = json_decode($invest->file);

            $fl = "";

            if ($invest->file != null)
            {
                for ($i = 0;$i < count($data);$i++)
                {
                    $fl .= '<a href="files/investment/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
                }
            }
            else
            {
                $fl = '-';
            }

            return $fl;
        })
        ->editColumn('status', function ($invest)
        {
            $id = $invest->id;
            
            if ($invest->posisi == "user" && $invest->status == "approval")
            {
                return '<label class="label label-danger">Belum Dikirim</label>';
            }
            if ($invest->posisi == "user" && $invest->status == "comment")
            {
                return '<label class="label label-warning">Commended</label>';
            }
            else if ($invest->posisi == "acc_budget" || $invest->posisi == "acc_pajak")
            {
                return '<label class="label label-warning">Verifikasi Oleh Accounting</label>';
            }
            else if ($invest->posisi == "manager")
            {
                return '<label class="label label-warning">Diverifikasi Manager</label>';
            }
            else if ($invest->posisi == "dgm")
            {
                return '<label class="label label-warning">Diverifikasi DGM</label>';
            }
            else if ($invest->posisi == "gm")
            {
                return '<label class="label label-warning">Diverifikasi GM</label>';
            }
            else if ($invest->posisi == "manager_acc")
            {
                return '<label class="label label-warning">Diverifikasi Manager Accounting</label>';
            }
            else if ($invest->posisi == "direktur_acc")
            {
                return '<label class="label label-warning">Diverifikasi Direktur Accounting</label>';
            }
            else if ($invest->posisi == "presdir")
            {
                return '<label class="label label-warning">Diverifikasi Presdir</label>';
            }
            else if ($invest->posisi == "finished")
            {
                return '<label class="label label-success">Telah Diverifikasi</label>';
            }

        })
        ->addColumn('action', function ($invest)
        {
            $id = $invest->id;
            
            if ($invest->posisi == "user")
            {
                return '
                <a href="investment/detail/' . $id . '" class="btn btn-warning btn-xs"><i class="fa fa-edit"></i> Edit</a>
                <a href="investment/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report Investment</a>
                <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="deleteConfirmationInvestment('.$id.')" data-toggle="modal" data-target="#modalDeleteInvestment"  title="Delete Investment"><i class="fa fa-trash"></i> Delete Investment</a>
                ';
            }
            else if ($invest->posisi == "acc_budget" || $invest->posisi == "acc_pajak")
            {
                return '<a href="investment/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report Investment</a>';
            }
            else if ($invest->posisi == "acc" || $invest->posisi == "manager" || $invest->posisi == "dgm" || $invest->posisi == "gm" || $invest->posisi == "manager_acc" || $invest->posisi == "direktur_acc" || $invest->posisi == "presdir")
            {
                return '
                <a href="investment/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report Investment</a>
                <button class="btn btn-xs btn-primary" data-toggle="tooltip" title="Resend Email" style="margin-right:5px;"  onclick="ResendEmail(' . $id .')"><i class="fa fa-envelope"></i> Resend Email</button>
                ';
            } else if ($invest->posisi == "finished"){
                return '
                <a href="investment/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report Investment</a>
                ';
            }
        })

        // ->editColumn('bukti_adagio', function ($invest)
        // {
        //     $id = $invest->id;

        //     $bukti = "";
        //     if ($invest->bukti_adagio == null && $invest->status == "adagio")
        //     {
        //         $bukti = '<a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-success" class="btn btn-primary btn-md" onClick="uploadBukti('.$id.')"><i class="fa fa-file-excel-o"></i> Upload Bukti Approval</a>';
        //     }
        //     else if ($invest->bukti_adagio != null){
        //         $bukti = '<a href="files/investment/adagio/'.$invest->bukti_adagio.'" target="_blank" class="fa fa-paperclip"> '.$invest->bukti_adagio.'</a>';   
        //     }
        //     else
        //     {
        //         $bukti = '-';
        //     }

        //     return $bukti;
        // })

        ->rawColumns(['status' => 'status', 'action' => 'action', 'file' => 'file', 'supplier_code' => 'supplier_code'])
        ->make(true);
    }

    public function create_investment()
    {
        $title = 'Buat Form Investment';
        $title_jp = '投資申請書を作成';

        $emp = EmployeeSync::where('employee_id', Auth::user()->username)
        ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
        ->first();

        $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
        ->distinct()
        ->get();

        return view('accounting_purchasing.investment_create', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'employee' => $emp,
            'vendor' => $vendor
        ))->with('page', 'Form Investment');
    }

    public function create_investment_post(Request $request)
    {
        try
        {
            $id_user = Auth::id();
            
            //Cek File
            $files = array();
            $file = new AccInvestment();
            if ($request->file('attachment') != NULL)
            {
                if ($files = $request->file('attachment'))
                {
                    foreach ($files as $file)
                    {
                        $nama = $file->getClientOriginalName();
                        $file->move('files/investment', $nama);
                        $data[] = $nama;
                    }
                }
                $file->filename = json_encode($data);
            }
            else
            {
                $file->filename = NULL;
            }

            $manager = null;
            $dgm = null;
            $gm = null;

            //Get Manager

            if ($request->get('applicant_department') == "Production Engineering Department")
            {
                $getmanager = EmployeeSync::select('employee_id', 'name', 'position', 'section')
                ->whereNull('end_date')
                ->where('department','=','Maintenance Department')
                ->where('position','like','Manager%')
                ->first();
            }
            else if ($request->get('applicant_department') == "General Affairs Department")
            {
                $getmanager = EmployeeSync::select('employee_id', 'name', 'position', 'section')
                ->whereNull('end_date')
                ->where('department','=','Human Resources Department')
                ->where('position','like','Manager%')
                ->first();
            }
            else if ($request->get('applicant_department') == "Purchasing Control Department")
            {
                $getmanager = EmployeeSync::select('employee_id', 'name', 'position', 'section')
                ->whereNull('end_date')
                ->where('department','=','Procurement Department')
                ->where('position','like','Manager%')
                ->first();
            }

            else if ($request->get('applicant_department') == "Educational Instrument (EI) Department")
            {
                $getmanager = EmployeeSync::select('employee_id', 'name', 'position', 'section')
                ->whereNull('end_date')
                ->where('department','=','Woodwind Instrument - Assembly (WI-A) Department')
                ->where('position','like','Manager%')
                ->first();
            }
            else
            {
                $getmanager = EmployeeSync::select('employee_id', 'name', 'position', 'section')
                ->whereNull('end_date')
                ->where('department','=',$request->get('applicant_department'))
                ->where('position','like','Manager%')
                ->first();
            }


            if ($getmanager != null)
            {
                $manager = $getmanager->employee_id."/".$getmanager->name;
            }


            //Get DGM & GM

            $getdgm = EmployeeSync::select('employee_id', 'name', 'position')
            ->whereNull('end_date')
            ->where('employee_id', '=', 'PI0109004')
            ->first();

            $getdgmps = EmployeeSync::select('employee_id', 'name', 'position')
            ->whereNull('end_date')
            ->where('employee_id', '=', 'PI9905001')
            ->first();


            if($request->get('applicant_department') == "Human Resources Department" || $request->get('applicant_department') == "General Affairs Department" || $request->get('applicant_department') == "Standardization Department"){
                $dgm = null;

                //GM Pak Arief
                $getgm = EmployeeSync::select('employee_id', 'name', 'position')
                ->where('employee_id','=','PI9709001')
                ->first();

                $gm = $getgm->employee_id."/".$getgm->name;
            }
            else if($request->get('applicant_department') == "Logistic Department" || $request->get('applicant_department') == "Production Control Department" || $request->get('applicant_department') == "Purchasing Control Department" || $request->get('applicant_department') == "Procurement Department"){
                $dgm = $getdgmps->employee_id."/".$getdgmps->name;
                //GM Pak Budhi
                $gm = $getdgm->employee_id."/".$getdgm->name;
            }
            else{

                $dgm = $getdgm->employee_id."/".$getdgm->name;

                // GM Pak Hayakawa
                $getgm = EmployeeSync::select('employee_id', 'name', 'position')
                ->where('employee_id','=','PI1206001')
                ->first();

                $gm = $getgm->employee_id."/".$getgm->name;

                // $dgm = null;
                // $gm = $getdgm->employee_id."/".$getdgm->name;
            }

            if($request->get('applicant_department') == "Accounting Department"){
                $manager = null;
                $dgm = null;
                $gm = null;
            }

            $inv = AccInvestment::create([
                'applicant_id' => $request->get('applicant_id') , 
                'applicant_name' => $request->get('applicant_name') , 
                'applicant_department' => $request->get('applicant_department') , 
                'reff_number' => $request->get('reff_number') , 
                'submission_date' => $request->get('submission_date') , 
                'category' => $request->get('category') , 
                'subject' => $request->get('subject') , 
                'type' => $request->get('type') , 
                'objective' => $request->get('objective') , 
                'objective_detail' => $request->get('objective_detail') , 
                'supplier_code' => $request->get('vendor') , 
                'supplier_name' => $request->get('vendor_name') , 
                'date_order' => $request->get('date_order') , 
                'delivery_order' => $request->get('date_delivery') , 
                'payment_term' => $request->get('payment_term') , 
                'currency' => $request->get('currency') ,
                'note' => $request->get('note') , 
                'quotation_supplier' => $request->get('quotation_supplier') , 
                'file' => $file->filename , 
                'posisi' => 'user', 
                'status' => 'approval',
                'approval_manager' => $manager,
                'approval_dgm' => $dgm,
                'approval_gm' => $gm,
                'approval_manager_acc' => $this->manager_acc,
                'approval_dir_acc' => $this->dir_acc,
                'approval_presdir' => $this->presdir,
                'created_by' => $id_user
            ]);

            $inv->save();

            return redirect('/investment/detail/'.$inv->id)->with('status', 'Investment Berhasil Dibuat')
            ->with('page', 'Form Investment');


        }
        catch(QueryException $e)
        {
            return redirect('/investment/create')->with('error', 'Investment Gagal Dibuat')
            ->with('page', 'Form Investment');
        }
    }

    public function get_nomor_inv(Request $request)
    {
        $datenow = date('Y-m-d');
        $bulan = date('m');

        $query = "SELECT fiscal_year FROM `weekly_calendars` where week_date = '$datenow'";
        $fy = DB::select($query);

        if ($fy[0]->fiscal_year == "FY197") {
            $tahun = '20';
        }else if ($fy[0]->fiscal_year == "FY198") {
            $tahun = '21';
        }else if ($fy[0]->fiscal_year == "FY199") {
            $tahun = '22';
        }else if ($fy[0]->fiscal_year == "FY200") {
            $tahun = '23';
        }else if ($fy[0]->fiscal_year == "FY201") {
            $tahun = '24';
        }

        $query = "SELECT reff_number FROM `acc_investments` order by id DESC LIMIT 1";
        $nomorurut = DB::select($query);

        if ($nomorurut != null)
        {
            $nomor = substr($nomorurut[0]->reff_number,3,4);
            $nomor = $nomor + 1;
            $nomor = sprintf('%04d', $nomor);
        }
        else
        {
            $nomor = "0001";
        }

        $result['tahun'] = $tahun;
        $result['bulan'] = $bulan;
        $result['no_urut'] = $nomor;

        return json_encode($result);
    }

    public function delete_investment(Request $request)
    {
        try
        {
            $invest = AccInvestment::find($request->get('id'));
            // $date = date('Y-m-d');

            $budget_log = AccBudgetHistory::where('category_number', '=', $invest->reff_number)
            ->get();

            if ($budget_log != null) {
                //FY
                // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$date'");

                // foreach ($fy as $fys) {
                //     $fiscal = $fys->fiscal_year;
                // }

                foreach ($budget_log as $log) {
                    $sisa_bulan = $log->budget_month.'_sisa_budget';
                    $budget = AccBudget::where('budget_no', $log->budget)->first();

                    $total = $budget->$sisa_bulan + $log->amount; //add total
                    $dataupdate = AccBudget::where('budget_no', $log->budget)->update([
                        $sisa_bulan => $total
                    ]);
                }
            }

            $delete_history = AccBudgetHistory::where('category_number', '=', $invest->reff_number)->delete();
            $delete_budget_log = AccInvestmentBudget::where('reff_number', '=', $invest->reff_number)->delete();
            $delete_inv_item = AccInvestmentDetail::where('reff_number', '=', $invest->reff_number)->delete();
            $delete_inv = AccInvestment::where('reff_number', '=', $invest->reff_number)->delete();

            $response = array(
                'status' => true,
            );

            return Response::json($response);
        }
        catch(QueryException $e)
        {
            return redirect('/investment')->with('error', $e->getMessage())
            ->with('page', 'Investment');
        }
    }

    public function fetchInvBudgetList(Request $request)
    {
        if ($request->get('category') == "Investment") {
            $cat = "Fixed Asset";
        }
        else if($request->get('category') == "Expense"){
            $cat = "Expenses";
        }

        if ($request->get('department') == "General Affairs Department") {
            $dept = "Human Resources Department";
        } 
        else if($request->get('department') == "Purchasing Control Department") {
            $dept = "Procurement Department";
        }
        else{
            $dept = $request->get('department');
        }

        if($request->get('budget') == "On Budget"){

            if ($request->get('category') == "Investment") {
                $type = "";

                $budgets = AccBudget::select('acc_budgets.budget_no', 'acc_budgets.description', 'acc_budgets.periode')
                ->where('department', '=', $dept)
                ->where('category', '=', $cat)
                ->whereIn('periode', ['FY200'])
                ->distinct()
                ->get();
            }
            //jika expense maka filter berdasarkan type
            else{
                if($request->get('type') != "Others") {
                    if($request->get('type') == "Office Supplies") {
                        $type = "Office supplies/facilities";
                    }
                    else if($request->get('type') == "Repair and Maintenance"){
                        $type = "Repair Maintenance";
                    }
                    else if($request->get('type') == "Tools, Jigs and Furniture"){
                        $type = "Tool, Jig, and Furniture";
                    }
                    else if($request->get('type') == "Moulding"){
                        $type = "Molding";
                    }
                    else{
                        $type = $request->get('type');
                    }
                    
                    $budgets = AccBudget::select('acc_budgets.budget_no', 'acc_budgets.description', 'acc_budgets.periode')
                    ->where('department', '=', $dept)
                    ->where('category', '=', $cat)
                    ->where('account_name', '=', $type)
                    ->whereIn('periode', ['FY200'])
                    ->distinct()
                    ->get();
                }
                else{
                    $budgets = AccBudget::select('acc_budgets.budget_no', 'acc_budgets.description', 'acc_budgets.periode')
                    ->where('department', '=', $dept)
                    ->where('category', '=', $cat)
                    ->whereIn('periode', ['FY200'])
                    ->distinct()
                    ->get();
                }

                
            }
        }
        else if ($request->get('budget') == "Shifting") {
            $type = "";

            $budgets = AccBudget::select('acc_budgets.budget_no', 'acc_budgets.description', 'acc_budgets.periode')
            ->where('department', '=', $dept)
            ->where('category', '=', $cat)
            ->whereIn('periode', ['FY200'])
            ->distinct()
            ->get();
        }

        $response = array(
            'status' => true,
            'budget' => $budgets
        );

        return Response::json($response);
    }

    public function detail_investment($id)
    {
        $title = 'Detail Form Investment';
        $title_jp = '投資申請内容';

        $inv = AccInvestment::find($id);

        $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')->where('acc_investments.id', '=', $id)->get();

        $inv_item = AccInvestment::join('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')->where('acc_investments.id', '=', $id)->get();

        $emp = EmployeeSync::where('employee_id', $inv->applicant_id)
        ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
        ->first();

        $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
        ->distinct()
        ->get();

        $items = db::select("select kode_item, kategori, deskripsi, spesifikasi from acc_items where deleted_at is null");

        return view('accounting_purchasing.investment_detail', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'investment' => $inv,
            'investment_budget' => $inv_budget,
            'investment_item' => $inv_item,
            'employee' => $emp,
            'vendor' => $vendor,
            'items' => $items,
            'uom' => $this->uom
        ))->with('page', 'Form Investment');
    }

    public function detail_investment_post(Request $request)
    {
        try
        {



            $id_user = Auth::id();

            $judul = substr($request->get('reff_number'), 0, 7);
            $jumlah = $request->get('jumlah');


            $files = array();
            $file = new AccInvestment();
            if ($request->file('attachment') != NULL)
            {
                if ($files = $request->file('attachment'))
                {
                    foreach ($files as $file)
                    {
                        $nama = $file->getClientOriginalName();
                        $file->move('files/investment', $nama);
                        $data[] = $nama;
                    }
                }
                $file->filename = json_encode($data);
            }

            if ($request->file('attachment') != NULL){
                $inv = AccInvestment::where('id', $request->get('id'))
                ->update([
                    'applicant_id' => $request->get('applicant_id') , 
                    'applicant_name' => $request->get('applicant_name') , 
                    'applicant_department' => $request->get('applicant_department') , 
                    'reff_number' => $request->get('reff_number') , 
                    'submission_date' => $request->get('submission_date') , 
                    'category' => $request->get('category') , 
                    'subject' => $request->get('subject') , 
                    'subject_jpy' => $request->get('subject_jpy'), 
                    'type' => $request->get('type') , 
                    'objective' => $request->get('objective') , 
                    'objective_detail' => $request->get('objective_detail') , 
                    'objective_detail_jpy' => $request->get('objective_detail_jpy') , 
                    'supplier_code' => $request->get('supplier') , 
                    'supplier_name' => $request->get('supplier_name') , 
                    'date_order' => $request->get('date_order') , 
                    'delivery_order' => $request->get('date_delivery') , 
                    'payment_term' => $request->get('payment_term') , 
                    'note' => $request->get('note') , 
                    'quotation_supplier' => $request->get('quotation_supplier'),
                    'file' => $file->filename,
                    'currency' => $request->get('currency') , 
                    'pdf' => 'INV_'.$judul.'.pdf' ,
                    'created_by' => $id_user
                ]);
            }else{
               $inv = AccInvestment::where('id', $request->get('id'))
               ->update([
                'applicant_id' => $request->get('applicant_id') , 
                'applicant_name' => $request->get('applicant_name') , 
                'applicant_department' => $request->get('applicant_department') , 
                'reff_number' => $request->get('reff_number') , 
                'submission_date' => $request->get('submission_date') , 
                'category' => $request->get('category') , 
                'subject' => $request->get('subject') , 
                'subject_jpy' => $request->get('subject_jpy'), 
                'type' => $request->get('type') , 
                'objective' => $request->get('objective') , 
                'objective_detail' => $request->get('objective_detail') , 
                'objective_detail_jpy' => $request->get('objective_detail_jpy') , 
                'supplier_code' => $request->get('supplier') , 
                'supplier_name' => $request->get('supplier_name') , 
                'date_order' => $request->get('date_order') , 
                'delivery_order' => $request->get('date_delivery') , 
                'payment_term' => $request->get('payment_term') , 
                'note' => $request->get('note') , 
                'quotation_supplier' => $request->get('quotation_supplier'),
                'currency' => $request->get('currency') , 
                'pdf' => 'INV_'.$judul.'.pdf' ,
                'created_by' => $id_user
            ]);

           }

           for ($i = 0;$i < $jumlah;$i++)
           {
            $category_budget = $request->get('budget_cat');
            if($category_budget[$i] != 'Out Of Budget'){

                $budget_no = $request->get('budget');
                $budget_name = $request->get('budget_name');
                $budget_sisa = $request->get('sisa');
                $budget_amount = $request->get('amount');
                $budget_amount_ori = $request->get('amount_ori');

                $data2 = AccInvestmentBudget::firstOrNew([
                    'reff_number' => $request->get('reff_number'),
                    'category_budget' => $category_budget[$i],
                    'budget_no' => $budget_no[$i] 
                ]);

                $data2->budget_name = $budget_name[$i];
                $data2->sisa = $budget_sisa[$i];
                $data2->total = $budget_amount[$i];
                $data2->total_ori = $budget_amount_ori[$i];
                $data2->created_by = $id_user;

                $investment_item = AccInvestment::join('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')->where('acc_investments.id', '=', $request->get('id'))->get();

                for ($z=0; $z < count($investment_item); $z++) { 

                    $getbulan = AccBudget::select('budget_no', 'periode')
                    ->where('budget_no',$budget_no[$i])
                    ->first();


                    if ($getbulan->periode == "FY200") {
                        $month = strtolower(date('M'));
                        $month_submission = strtolower(date("M",strtotime($request->get('submission_date'))));

                    }
                    else{
                        $month = "apr";
                        $month_submission = "apr";
                    }

                    $data3 = AccBudgetHistory::firstOrNew([
                        'category_number' => $request->get('reff_number'),
                        'budget' => $budget_no[$i],
                        'no_item' => $investment_item[$z]->detail,
                    ]);

                    $data3->budget = $budget_no[$i];
                    $data3->budget_month = $month_submission;
                    $data3->budget_date = $request->get('submission_date');
                    $data3->category_number = $request->get('reff_number');
                    $data3->no_item = $investment_item[$z]->detail;
                    $data3->beg_bal = $budget_sisa[$i];
                    $data3->amount = $investment_item[$z]->dollar;
                    $data3->status = 'Investment';
                    $data3->created_by = $id_user;
                    $data3->save();
                }

                $totalPembelian = $budget_amount[$i];

                if ($totalPembelian != null) {

                    $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
                    ->where('acc_investments.id', '=', $request->get('id'))->get();

                    if (count($inv_budget) == 0) {
                            // $datePembelian = date('Y-m-d');
                            // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$datePembelian'");

                            // foreach ($fy as $fys) {
                            //     $fiscal = $fys->fiscal_year;
                            // }

                        $getbulan = AccBudget::select('budget_no', 'periode')
                        ->where('budget_no',$budget_no[$i])
                        ->first();

                        if ($getbulan->periode == "FY200") {
                            $bulan = strtolower(date('M'));
                        }
                        else{
                            $bulan = "apr";
                        }

                        $sisa_bulan = $bulan.'_sisa_budget';                    
                            //get Data Budget Based On Periode Dan Nomor

                        $budget = AccBudget::where('budget_no','=',$budget_no[$i])->first();

                            //perhitungan 
                        $total = $budget->$sisa_bulan - $totalPembelian;
                        $dataupdate = AccBudget::where('budget_no','=',$budget_no[$i])
                        ->update([
                            $sisa_bulan => $total
                        ]);

                    }
                }
            }
                else{ // kalo out of budget
                    $category_budget = $request->get('budget_cat');
                    $budget_amount = $request->get('amount');
                    $budget_amount_ori = $request->get('amount_ori');

                    if ($request->get('category') == "Investment") {
                        $budget_no = "NoBdgFA200";
                    }else if ($request->get('category') == "Expense"){
                        $budget_no = "NoBdgExp200";
                    }

                    $data2 = AccInvestmentBudget::firstOrNew([
                        'reff_number' => $request->get('reff_number'),
                        'category_budget' => $category_budget[$i],
                        'budget_no' => $budget_no
                    ]);

                    $data2->total = $budget_amount[$i];
                    $data2->total_ori = $budget_amount_ori[$i];
                    $data2->created_by = $id_user;

                    $investment_item = AccInvestment::join('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')->where('acc_investments.id', '=', $request->get('id'))->get();

                    for ($z=0; $z < count($investment_item); $z++) { 

                        $getbulan = AccBudget::select('budget_no', 'periode')
                        ->where('budget_no',$budget_no)
                        ->first();

                        if ($getbulan->periode == "FY200") {
                            $month = strtolower(date('M'));
                            $month_submission = strtolower(date("M",strtotime($request->get('submission_date'))));
                        }
                        else{
                            $month = "apr";
                            $month_submission = "apr";
                        }

                        $data3 = AccBudgetHistory::firstOrNew([
                            'category_number' => $request->get('reff_number'),
                            'budget' => $budget_no,
                            'no_item' => $investment_item[$z]->detail,
                        ]);

                        $data3->budget = $budget_no;
                        $data3->budget_month = $month_submission;
                        $data3->budget_date = $request->get('submission_date');
                        $data3->category_number = $request->get('reff_number');
                        $data3->no_item = $investment_item[$z]->detail;
                        $data3->beg_bal = 0;
                        $data3->amount = $investment_item[$z]->dollar;
                        $data3->status = 'Investment';
                        $data3->created_by = $id_user;
                        $data3->save();
                    }
                }
                $data2->save();
            }



            $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
            ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
            ->where('acc_investments.id', '=', $request->get('id'))
            ->get();

            $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
            ->where('acc_investments.id', '=', $request->get('id'))
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('Legal', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_investment', array(
                'inv' => $detail_inv,
                'inv_budget' => $inv_budget
            ));

            $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

            $response = array(
                'status' => true,
                'datas' => 'Data Berhasil Diubah'
            );
            return Response::json($response);

        }
        catch(QueryException $e)
        {
            $response = array(
                'status' => false,
                'datas' => $e->getMessage()
            );
            return Response::json($response);
        }
    }


    public function check_investment_pch($id)
    {
        $emp_id = Auth::user()->username;

        $investment = AccInvestment::find($id);

        $path = '/investment_list/' . $investment->pdf;            
        $file_path = asset($path);

        return view('accounting_purchasing.check_investment', array(
            'investment' => $investment,
            'file_path' => $file_path,
        ))->with('page', 'Investment');
    }

    public function checked_investment(Request $request, $id){

        $invest = AccInvestment::find($id);
        $invest->receive_date = date('Y-m-d');
        $invest->save();

        return redirect('/investment/check_pch/'.$id)->with('status', 'Investment Sudah Berhasil Diterima')
        ->with('page', 'Invesment');
    }

        //Item Invesment
    public function fetch_investment_item($id)
    {
        $investment = AccInvestment::find($id);

        $investment_item = AccInvestmentDetail::leftJoin("acc_investments", "acc_investment_details.reff_number", "=", "acc_investments.reff_number")->select('acc_investment_details.*', 'acc_investments.currency')
        ->where('acc_investment_details.reff_number', '=', $investment->reff_number)
        ->get();

        return DataTables::of($investment_item)
        ->editColumn('price', function ($investment_item)
        {
            if ($investment_item->currency == "IDR") {
                $cur = "Rp.";
            }
            else if ($investment_item->currency == "USD") {
                $cur = "$";
            }
            else if($investment_item->currency == "JPY"){
                $cur = "¥";
            }

            return $cur." ".number_format($investment_item->price,2,",",".");
        })
        ->editColumn('amount', function ($investment_item)
        {
            if ($investment_item->currency == "IDR") {
                $cur = "Rp.";
            }
            else if ($investment_item->currency == "USD") {
                $cur = "$";
            }
            else if($investment_item->currency == "JPY"){
                $cur = "¥";
            }
            return $cur." ".number_format($investment_item->amount,2,",",".");
        })
        ->addColumn('action', function ($investment_item)
        {
            return '
            <button class="btn btn-xs btn-warning" data-toggle="tooltip" title="Edit" onclick="modalEdit(' . $investment_item->id . ')"><i class="fa fa-edit"></i> Edit</button>
            <button class="btn btn-xs btn-danger" data-toggle="tooltip" title="Delete" onclick="modalDelete(' . $investment_item->id . ',\'' . $investment_item->reff_number . '\')"><i class="fa fa-trash"></i> Delete</button>
            ';
        })
        ->rawColumns(['price' => 'price','amount' => 'amount', 'action' => 'action'])
        ->make(true);
    }

    public function getitemdesc(Request $request)
    {
        $html = array();
        $kode_item = AccItem::where('kode_item', $request->kode_item)
        ->get();
        foreach ($kode_item as $item)
        {
            $html = array(
                'detail' => $item->deskripsi,
                'harga' => $item->harga
            );

        }

        return json_encode($html);
    }

    public function gettotalamount(Request $request)
    {
        $html = array();
        $total = 0;
        $itemDetail = AccInvestmentDetail::where('reff_number', $request->reff_number)
        ->get();
        foreach ($itemDetail as $item)
        {
            $total += $item->amount;
        }

        return $total;
    }

    public function create_investment_item(Request $request)
    {
        try
        {
            $id_user = Auth::id();

            $item = new AccInvestmentDetail([
                'reff_number' => $request->get('reff_number') , 
                'no_item' => $request->get('kode_item') , 
                'detail' => $request->get('detail_item') , 
                'qty' => $request->get('jumlah_item') , 
                'uom' => $request->get('uom') , 
                'price' => $request->get('price_item') , 
                'amount' => $request->get('amount_item') , 
                'dollar' => $request->get('dollar') , 
                'created_by' => $id_user
            ]);

            $item->save();

            $response = array(
                'status' => true,
                'item' => $item
            );
            return Response::json($response);
        }
        catch(QueryException $e)
        {
            $error_code = $e->errorInfo[1];
            if ($error_code == 1062)
            {
                $response = array(
                    'status' => false,
                    'item' => "Item already exist"
                );
                return Response::json($response);
            }
            else
            {
                $response = array(
                    'status' => false,
                    'item' => "Item not created."
                );
                return Response::json($response);
            }
        }
    }

    public function fetch_investment_item_edit(Request $request)
    {
        $items = AccInvestmentDetail::find($request->get("id"));

        $response = array(
            'status' => true,
            'datas' => $items,
        );
        return Response::json($response);
    }

    public function edit_investment_item(Request $request)
    {
        try
        {
            $items = AccInvestmentDetail::find($request->get("id"));
            $items->no_item = $request->get('kode_item');
            $items->detail = $request->get('detail_item');
            $items->qty = $request->get('jumlah_item');
            $items->uom = $request->get('uom');
            $items->price = $request->get('price_item');
            $items->amount = $request->get('amount_item');
            $items->dollar = $request->get('dollar');
            $items->save();

            $response = array(
                'status' => true,
                'datas' => "Berhasil",
            );
            return Response::json($response);

        }
        catch(QueryException $e)
        {
            $error_code = $e->errorInfo[1];
            if ($error_code == 1062)
            {
                $response = array(
                    'status' => false,
                    'datas' => $e->getMessage() ,
                );
                return Response::json($response);
            }
            else
            {
                $response = array(
                    'status' => false,
                    'datas' => $e->getMessage() ,
                );
                return Response::json($response);
            }
        }
    }

    public function delete_investment_item(Request $request)
    {
        $items = AccInvestmentDetail::find($request->get("id"));
        $items->forceDelete();

        $response = array(
            'status' => true
        );
        return Response::json($response);
    }


        //==================================//
        //        Report Investment         //
        //==================================//
    public function report_investment($id){

        $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty' , 'acc_investment_details.uom', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
        ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
        ->where('acc_investments.id', '=', $id)
        ->get();

        $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
        ->where('acc_investments.id', '=', $id)
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('Legal', 'potrait');

        $pdf->loadView('accounting_purchasing.report.report_investment', array(
            'inv' => $detail_inv,
            'inv_budget' => $inv_budget
        ));

        return $pdf->stream($detail_inv[0]->reff_number. ".pdf");

            // return view('accounting_purchasing.report.report_investment', array(
            //  'inv' => $detail_inv,
            //  'inv_budget' => $inv_budget
            // ))->with('page', 'Inv')->with('head', 'Inv List');
    }

    public function investment_send_email(Request $request){
        $inv = AccInvestment::find($request->get('id'));

        try{
            if ($inv->posisi == "user")
            {
                $inv->posisi = "acc_budget";
                $inv->save();

                    //Kirim Ke Bu Laila
                $mails = "select distinct email from users where users.username = 'PI0902001'";
                $mailtoo = DB::select($mails);

                $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$inv->id;
                $invest = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($invest, 'investment'));

                $response = array(
                  'status' => true,
                  'datas' => "Berhasil"
              );

                return Response::json($response);
            }

        } catch (Exception $e) {
            $response = array(
              'status' => false,
              'datas' => "Gagal"
          );

            return Response::json($response);
        }
    }

    public function investment_resend_email(Request $request){
        $invest = AccInvestment::find($request->get('id'));

        try{
            if ($invest->posisi == "manager")
            {
                if ($invest->approval_manager != null) {
                    $user = explode("/", $invest->approval_manager);
                }
            }
            if ($invest->posisi == "dgm")
            {
                if ($invest->approval_dgm != null) {
                    $user = explode("/", $invest->approval_dgm);
                }
            }
            if ($invest->posisi == "gm")
            {
                if ($invest->approval_gm != null) {
                    $user = explode("/", $invest->approval_gm);
                }
            }
            if ($invest->posisi == "manager_acc")
            {
                if ($invest->approval_manager_acc != null) {
                    $user = explode("/", $invest->approval_manager_acc);
                }
            }
            if ($invest->posisi == "direktur_acc")
            {
                if ($invest->approval_dir_acc != null) {
                    $user = explode("/", $invest->approval_dir_acc);
                }
            }
            if ($invest->posisi == "presdir")
            {
                if ($invest->approval_presdir != null) {
                    $user = explode("/", $invest->approval_presdir);
                }
            }

            $mails = "select distinct email from users where users.username = '".$user[0]."'";
                $mailtoo = DB::select($mails);

            $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
            $investe = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

            $message = 'Investment '.$invest->reff_number;
            $message2 ='Approved Successfully';


        } catch (Exception $e) {
            $response = array(
              'status' => false,
              'datas' => "Gagal"
          );

            return Response::json($response);
        }
    }

    public function check_investment($id){

        $invest = AccInvestment::find($id);
        $investment_item = AccInvestment::join('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')->where('acc_investments.id', '=', $id)->get();

        $path = '/investment_list/' . $invest->pdf;            
        $file_path = asset($path);

        return view('accounting_purchasing.investment_check', array(
            'invest' => $invest,
            'invest_item' => $investment_item,
            'file_path' => $file_path,
        ))->with('page', 'Investment');
    }

    public function check_investment_budget(Request $request, $id){

        $invest = AccInvestment::find($id);

        if ($invest->posisi == "acc_budget")
        {

            $files = array();
            $file = new AccInvestment();
            if ($request->file('attachment') != NULL)
            {
                if ($files = $request->file('attachment'))
                {
                    foreach ($files as $file)
                    {
                        $nama = $file->getClientOriginalName();
                        $file->move('files/investment', $nama);
                        $data[] = $nama;
                    }
                }
                $file->filename = json_encode($data);
            }

                //Kirim Ke Bu Yeny
            $invest->posisi = 'acc_pajak';
            $invest->approval_acc_budget = date('Y-m-d H:i:s');
            $invest->ycj_approval = $request->get('ycj_approval');
            if ($request->file('attachment') != NULL){
                $invest->file = $file->filename;
            }
            $invest->save();

            $judul = substr($invest->reff_number, 0, 7);

            $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
            ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
            ->where('acc_investments.id', '=', $id)
            ->get();

            $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
            ->where('acc_investments.id', '=', $id)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('Legal', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_investment', array(
                'inv' => $detail_inv,
                'inv_budget' => $inv_budget
            ));

            $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

            $mails = "select distinct email from users where users.username = 'PI9802001'";
            $mailtoo = DB::select($mails);

            $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
            $investe = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

            return redirect('/investment/check/'.$id)->with('status', 'Investment Berhasil Dicek & Dikirim')
            ->with('page', 'Investment');
        }

        else if($invest->posisi == "acc_pajak"){
            // $invest->posisi = 'adagio';
            // $invest->status = 'adagio';
            $invest->approval_acc_pajak = date('Y-m-d H:i:s');
            if ($invest->approval_manager != null) {        
                $invest->posisi = 'manager';

                $sendemail = explode("/", $invest->approval_manager);
                $mails = "select distinct email from users where users.username = '".$sendemail[0]."'";
                $mailtoo = DB::select($mails);
            }
            else if($invest->approval_dgm != null){
                $invest->posisi = 'dgm';
                $sendemail = explode("/", $invest->approval_dgm);
                $mails = "select distinct email from users where users.username = '".$sendemail[0]."'";
                $mailtoo = DB::select($mails);
            }
            else if($invest->approval_gm != null){
                $invest->posisi = 'gm';
                $sendemail = explode("/", $invest->approval_gm);
                $mails = "select distinct email from users where users.username = '".$sendemail[0]."'";
                $mailtoo = DB::select($mails);
            }
            else{
                $invest->posisi = 'manager_acc';
                $sendemail = explode("/", $invest->approval_manager_acc);
                $mails = "select distinct email from users where users.username = '".$sendemail[0]."'";
                $mailtoo = DB::select($mails);
            }


            $invest->pkp = $request->get('pkp');
            $invest->npwp = $request->get('npwp');
            $invest->certificate = $request->get('certificate');
            $invest->total = $request->get('total');
            $invest->service = $request->get('service');
            $invest->save();


            $jumlah = $request->get('jumlahitem');
            for ($i=1; $i < (int) $jumlah; $i++) { 
                $investitem = AccInvestmentDetail::where('id', $request->get('id_item'.$i))
                ->update([
                    'vat_status' => $request->get('vat_item'.$i), 
                ]);

            }

            $judul = substr($invest->reff_number, 0, 7);

            $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
            ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
            ->where('acc_investments.id', '=', $id)
            ->get();

            $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
            ->where('acc_investments.id', '=', $id)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('Legal', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_investment', array(
                'inv' => $detail_inv,
                'inv_budget' => $inv_budget
            ));

            $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

            $mails = "select distinct email from users where users.username = '".$invest->applicant_id."'";
            $mailcc = DB::select($mails);

            $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
            $investe = db::select($isimail);

            // Mail::to($mailtoo)->cc($mailcc)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

            return redirect('/investment/check/'.$id)->with('status', 'Investment Berhasil Dicek')
            ->with('page', 'Investment');
        }
    }

    public function delete_investment_budget(Request $request)
    {
        try
        {

            $get_budget_item = AccInvestmentBudget::find($request->get('id'));

            if ($get_budget_item->category_budget != "Out Of Budget") {
                $budget_log = AccBudgetHistory::where('budget', '=', $get_budget_item->budget_no)
                ->where('category_number', '=', $get_budget_item->reff_number)
                ->get();

                // $date = date('Y-m-d');
                // //FY
                // $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$date'");
                // foreach ($fy as $fys) {
                //     $fiscal = $fys->fiscal_year;
                // }

                $sisa_bulan = $budget_log[0]->budget_month.'_sisa_budget';

                $budget = AccBudget::where('budget_no', $get_budget_item->budget_no)->first();

                $total = $budget->$sisa_bulan + $get_budget_item->total; //add total

                $dataupdate = AccBudget::where('budget_no', $get_budget_item->budget_no)->update([
                    $sisa_bulan => $total
                ]);

                $delete_budget_log = AccBudgetHistory::where('budget', '=', $get_budget_item->budget_no)
                ->where('category_number', '=', $get_budget_item->reff_number)
                ->delete();

                $master = AccInvestmentBudget::where('id', '=', $request->get('id'))->delete();

            }else{

                $delete_budget_log = AccBudgetHistory::where('budget', '=', $get_budget_item->budget_no)
                ->where('category_number', '=', $get_budget_item->reff_number)
                ->delete();

                $master = AccInvestmentBudget::where('id', '=', $request->get('id'))->delete();
            }


            $response = array(
              'status' => true,
              'datas' => "Berhasil Hapus Data",
          );
            
            return Response::json($response);

        }
        catch(QueryException $e)
        {
            $response = array(
              'status' => false,
              'datas' => "Berhasil Hapus Data",
          );
            
            return Response::json($response);
        }
    }

    //APPROVAL INVESTMENT

    public function investment_approvalmanager($id){
        $invest = AccInvestment::find($id);
        try{
            if ($invest->posisi == "manager")
            {

                if ($invest->applicant_department == "Human Resources Department" || $invest->applicant_department == "General Affairs Department") {
                    $invest->posisi = "gm";
                }
                else{
                    if ($invest->approval_dgm != null) { 
                        $invest->posisi = "dgm";     
                    } else {
                        $invest->posisi = "gm"; 
                    }     
                }

                $invest->approval_manager = $invest->approval_manager."/Approved/".date('Y-m-d H:i:s');
                $invest->save();         

                $judul = substr($invest->reff_number, 0, 7);

                $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
                ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('Legal', 'potrait');

                $pdf->loadView('accounting_purchasing.report.report_investment', array(
                    'inv' => $detail_inv,
                    'inv_budget' => $inv_budget
                ));

                $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

                if ($invest->approval_dgm != null) {
                    $user = explode("/", $invest->approval_dgm);
                }
                else if($invest->approval_gm != null) {
                    $user = explode("/", $invest->approval_gm);
                }


                $mails = "select distinct email from users where users.username = '".$user[0]."'";
                $mailtoo = DB::select($mails);

                $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
                $investe = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

                $message = 'Investment '.$invest->reff_number;
                $message2 ='Approved Successfully';
            }
            else{
                if ($invest->posisi == "user") {
                    $message = 'Investment '.$invest->reff_number;
                    $message2 ='Already Rejected';
                } else{
                    $message = 'Investment. '.$invest->reff_number;
                    $message2 ='Already Approved';
                }
            }

            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $invest->reff_number,
                'message' => $message,
                'message2' => $message2,
            ))->with('page', 'Approval');

        } catch (Exception $e) {
            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $invest->reff_number,
                'message' => 'Error',
                'message2' => $e->getMessage(),
            ))->with('page', 'Approval');
        }
    }

    public function investment_approvaldgm($id){
        $invest = AccInvestment::find($id);
        try{
            if ($invest->posisi == "dgm")
            {

                $invest->posisi = "gm";
                $invest->approval_dgm = $invest->approval_dgm."/Approved/".date('Y-m-d H:i:s');
                $invest->save();

                $judul = substr($invest->reff_number, 0, 7);

                $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
                ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('Legal', 'potrait');

                $pdf->loadView('accounting_purchasing.report.report_investment', array(
                    'inv' => $detail_inv,
                    'inv_budget' => $inv_budget
                ));

                $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

                $user = explode("/", $invest->approval_gm);

                $mails = "select distinct email from users where users.username = '".$user[0]."'";
                $mailtoo = DB::select($mails);

                $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
                $investe = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

                $message = 'Investment '.$invest->reff_number;
                $message2 ='Approved Successfully';
            }
            else{
                if ($invest->posisi == "user") {
                    $message = 'Investment '.$invest->reff_number;
                    $message2 ='Already Rejected';
                } else{
                    $message = 'Investment. '.$invest->reff_number;
                    $message2 ='Already Approved';
                }
            }

            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $invest->reff_number,
                'message' => $message,
                'message2' => $message2,
            ))->with('page', 'Approval');

        } catch (Exception $e) {
            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $invest->reff_number,
                'message' => 'Error',
                'message2' => $e->getMessage(),
            ))->with('page', 'Approval');
        }
    }


    public function investment_approvalgm($id){
        $invest = AccInvestment::find($id);
        try{
            if ($invest->posisi == "gm")
            {
                $invest->posisi = "manager_acc";
                $invest->approval_gm = $invest->approval_gm."/Approved/".date('Y-m-d H:i:s');
                $invest->save();

                $judul = substr($invest->reff_number, 0, 7);

                $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
                ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('Legal', 'potrait');

                $pdf->loadView('accounting_purchasing.report.report_investment', array(
                    'inv' => $detail_inv,
                    'inv_budget' => $inv_budget
                ));

                $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

                $user = explode("/", $invest->approval_manager_acc);

                $mails = "select distinct email from users where users.username = '".$user[0]."'";
                $mailtoo = DB::select($mails);

                $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
                $investe = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

                $message = 'Investment '.$invest->reff_number;
                $message2 ='Approved Successfully';
            }
            else{
                if ($invest->posisi == "user") {
                    $message = 'Investment '.$invest->reff_number;
                    $message2 ='Already Rejected';
                } else{
                    $message = 'Investment. '.$invest->reff_number;
                    $message2 ='Already Approved';
                }
            }

            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $invest->reff_number,
                'message' => $message,
                'message2' => $message2,
            ))->with('page', 'Approval');

        } catch (Exception $e) {
            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $invest->reff_number,
                'message' => 'Error',
                'message2' => $e->getMessage(),
            ))->with('page', 'Approval');
        }
    }


    public function investment_approvalmanageracc($id){
        $invest = AccInvestment::find($id);
        try{
            if ($invest->posisi == "manager_acc")
            {
                $invest->posisi = "direktur_acc";
                $invest->approval_manager_acc = $invest->approval_manager_acc."/Approved/".date('Y-m-d H:i:s');
                $invest->save();

                $judul = substr($invest->reff_number, 0, 7);

                $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
                ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('Legal', 'potrait');

                $pdf->loadView('accounting_purchasing.report.report_investment', array(
                    'inv' => $detail_inv,
                    'inv_budget' => $inv_budget
                ));

                $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

                $user = explode("/", $invest->approval_dir_acc);

                $mails = "select distinct email from users where users.username = '".$user[0]."'";
                $mailtoo = DB::select($mails);

                $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
                $investe = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

                $message = 'Investment '.$invest->reff_number;
                $message2 ='Approved Successfully';
            }
            else{
               if ($invest->posisi == "user") {
                $message = 'Investment '.$invest->reff_number;
                $message2 ='Already Rejected';
            } else{
                $message = 'Investment. '.$invest->reff_number;
                $message2 ='Already Approved';
            }
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $invest->reff_number,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $invest->reff_number,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}

public function investment_approvaldiracc($id){
    $invest = AccInvestment::find($id);
    try{
        if ($invest->posisi == "direktur_acc")
        {
            $invest->posisi = "presdir";
            $invest->approval_dir_acc = $invest->approval_dir_acc."/Approved/".date('Y-m-d H:i:s');
            $invest->save();

            $judul = substr($invest->reff_number, 0, 7);

            $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
            ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
            ->where('acc_investments.id', '=', $id)
            ->get();

            $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
            ->where('acc_investments.id', '=', $id)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('Legal', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_investment', array(
                'inv' => $detail_inv,
                'inv_budget' => $inv_budget
            ));

            $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

            $user = explode("/", $invest->approval_presdir);

            $mails = "select distinct email from users where users.username = '".$user[0]."'";
            $mailtoo = DB::select($mails);

            $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
            $investe = db::select($isimail);

            // $mailcc = "select distinct email from users s users.name = 'Hiromichi Ichimura'";
            // $mailtoocc = DB::select($mailcc);
            // ->cc($mailtoocc)

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

            $message = 'Investment '.$invest->reff_number;
            $message2 ='Approved Successfully';
        }
        else{
           if ($invest->posisi == "user") {
            $message = 'Investment '.$invest->reff_number;
            $message2 ='Already Rejected';
        } else{
            $message = 'Investment. '.$invest->reff_number;
            $message2 ='Already Approved';
        }
    }

    return view('accounting_purchasing.verifikasi.pr_message', array(
        'head' => $invest->reff_number,
        'message' => $message,
        'message2' => $message2,
    ))->with('page', 'Approval');

} catch (Exception $e) {
    return view('accounting_purchasing.verifikasi.pr_message', array(
        'head' => $invest->reff_number,
        'message' => 'Error',
        'message2' => $e->getMessage(),
    ))->with('page', 'Approval');
}
}

public function investment_approvalpresdir($id){
    $invest = AccInvestment::find($id);
    try{
        if ($invest->posisi == "presdir")
        {
            $invest->posisi = "finished";
            $invest->approval_presdir = $invest->approval_presdir."/Approved/".date('Y-m-d H:i:s');
            $invest->save();

            $judul = substr($invest->reff_number, 0, 7);

            $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
            ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
            ->where('acc_investments.id', '=', $id)
            ->get();

            $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
            ->where('acc_investments.id', '=', $id)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('Legal', 'potrait');

            $pdf->loadView('accounting_purchasing.report.report_investment', array(
                'inv' => $detail_inv,
                'inv_budget' => $inv_budget
            ));

            $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

                //kirim email ke Mas Shega & Mas Hamzah
            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
            $mailtoo = DB::select($mails);


            $mailcc = "select distinct email from users where users.username = '".$invest->applicant_id."'";
            $mailtoocc = DB::select($mailcc);

            $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
            $investe = db::select($isimail);

            Mail::to($mailtoo)->cc($mailtoocc)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

            $message = 'Investment '.$invest->reff_number;
            $message2 ='Approved Successfully';
        }
        else{
            if ($invest->posisi == "user") {
                $message = 'Investment '.$invest->reff_number;
                $message2 ='Already Rejected';
            } else{
                $message = 'Investment '.$invest->reff_number;
                $message2 ='Already Approved';
            };
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $invest->reff_number,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $invest->reff_number,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}

    //comment
public function investment_comment($id){
    $invest = AccInvestment::find($id);
    try{

        return view('accounting_purchasing.verifikasi.investment_comment', array(
            'invest' => $invest
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.investment_comment', array(
            'head' => $invest->reff_number,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}

    //comment
public function investment_comment_msg($id){
    $invest = AccInvestment::find($id);

    return view('accounting_purchasing.verifikasi.investment_comment_msg', array(
        'invest' => $invest
    ))->with('page', 'Approval');

}

public function investment_comment_post(Request $request,$id)
{

  $investment = AccInvestment::find($id);

  if ($investment->posisi != "user") {

    $comment = $request->get('question');
    $investment->comment_note = $comment;

    if ($investment->posisi == "manager") {
        $keterangan = $investment->approval_manager;
    }
    else if($investment->posisi == "dgm"){
        $keterangan = $investment->approval_dgm;
    }
    else if($investment->posisi == "gm"){
        $keterangan = $investment->approval_gm;
    }
    else if($investment->posisi == "manager_acc"){
        $keterangan = $investment->approval_manager_acc;
    }
    else if($investment->posisi == "direktur_acc"){
        $keterangan = $investment->approval_dir_acc;
    }
    else if($investment->posisi == "presdir"){
        $keterangan = $investment->approval_presdir;
    }

    $investment->comment = $investment->posisi."/".$keterangan;
    $investment->status = "comment";
    $investment->posisi = "user";

    $investment->save();

            //kirim email ke Applicant
    $mails = "select distinct email from users where users.username = '".$investment->applicant_id."'";
    $mailtoo = DB::select($mails);

    $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$id;
    $tolak = db::select($isimail);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'investment'));

} else if($investment->posisi == "user"){

    $investment->reply = $request->get('answer');
    $pos = explode("/", $investment->comment);
    $investment->posisi = $pos[0];

    $investment->save();

                //kirim email ke Penanya
    $mails = "select distinct email from users where users.username = '".$pos[1]."'";
    $mailtoo = DB::select($mails);


    $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$id;
    $tolak = db::select($isimail);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'investment'));

    $investment->status = 'approval';
    $investment->save();
}

return redirect('/investment/comment_msg/'.$id)->with('success', 'Investment Approved')->with('page', 'Investment');
}

    //Reject Investment

public function investment_reject(Request $request, $id)
{
    $invest = AccInvestment::find($id);

    if ($invest->posisi == "manager")
    {
        $invest->posisi = "user";         
        $invest->reject = "manager/".date('Y-m-d H:i:s');
    }
    else if($invest->posisi == "dgm"){
        $invest->posisi = "user";         
        $invest->reject = "dgm/".date('Y-m-d H:i:s');

        $manager = explode("/", $invest->approval_manager);
        if(count($manager) > 1){
            $invest->approval_manager = $manager[0]."/".$manager[1];
        }
    }
    else if($invest->posisi == "gm"){
        $invest->posisi = "user";         
        $invest->reject = "gm/".date('Y-m-d H:i:s');

        $manager = explode("/", $invest->approval_manager);
        $dgm = explode("/", $invest->approval_dgm);

        if(count($manager) > 1){
            $invest->approval_manager = $manager[0]."/".$manager[1];
        }
        if(count($dgm) > 1){
            $invest->approval_dgm = $dgm[0]."/".$dgm[1];
        } 
    }
    else if($invest->posisi == "manager_acc"){
        $invest->posisi = "user";         
        $invest->reject = "manager_acc/".date('Y-m-d H:i:s');

        $manager = explode("/", $invest->approval_manager);
        $dgm = explode("/", $invest->approval_dgm);
        $gm = explode("/", $invest->approval_gm);

        if(count($manager) > 1){
            $invest->approval_manager = $manager[0]."/".$manager[1];
        }
        if(count($dgm) > 1){
            $invest->approval_dgm = $dgm[0]."/".$dgm[1];
        }
        if(count($gm) > 1){
            $invest->approval_gm = $gm[0]."/".$gm[1];
        } 
    }
    else if($invest->posisi == "direktur_acc"){
        $invest->posisi = "user";         
        $invest->reject = "direktur_acc/".date('Y-m-d H:i:s');

        $manager = explode("/", $invest->approval_manager);
        $dgm = explode("/", $invest->approval_dgm);
        $gm = explode("/", $invest->approval_gm);
        $manager_acc = explode("/", $invest->approval_manager_acc);

        if(count($manager) > 1){
            $invest->approval_manager = $manager[0]."/".$manager[1];
        }
        if(count($dgm) > 1){
            $invest->approval_dgm = $dgm[0]."/".$dgm[1];
        }
        if(count($gm) > 1){
            $invest->approval_gm = $gm[0]."/".$gm[1];
        } 
        if(count($manager_acc) > 1){
            $invest->approval_manager_acc = $manager_acc[0]."/".$manager_acc[1];
        } 
    }
    else if($invest->posisi == "presdir"){
        $invest->posisi = "user";         
        $invest->reject = "presdir/".date('Y-m-d H:i:s');

        $manager = explode("/", $invest->approval_manager);
        $dgm = explode("/", $invest->approval_dgm);
        $gm = explode("/", $invest->approval_gm);
        $manager_acc = explode("/", $invest->approval_manager_acc);
        $dir_acc = explode("/", $invest->approval_dir_acc);

        if(count($manager) > 1){
            $invest->approval_manager = $manager[0]."/".$manager[1];
        }
        if(count($dgm) > 1){
            $invest->approval_dgm = $dgm[0]."/".$dgm[1];
        }
        if(count($gm) > 1){
            $invest->approval_gm = $gm[0]."/".$gm[1];
        } 
        if(count($manager_acc) > 1){
            $invest->approval_manager_acc = $manager_acc[0]."/".$manager_acc[1];
        } 
        if(count($dir_acc) > 1){
            $invest->approval_dir_acc = $dir_acc[0]."/".$dir_acc[1];
        } 
    }

    $invest->save();

    $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$invest->id;
    $tolak = db::select($isimail);

            //kirim email ke Buyer
    $mails = "select distinct email from users where users.username = '".$invest->applicant_id."'";
    $mailtoo = DB::select($mails);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'investment'));

    $message = 'Investment '.$invest->reff_number;
    $message2 ='Rejected';

    return view('accounting_purchasing.verifikasi.pr_message', array(
        'head' => $invest->reff_number,
        'message' => $message,
        'message2' => $message2,
    ))->with('page', 'Approval');
}



        //reject_acc

public function investment_reject_acc(Request $request,$id)
{
  $reject_note = $request->get('alasan');

  $investment = AccInvestment::find($id);
  $investment->reject_note = $reject_note;

  if ($investment->posisi == "acc_budget") {
    $investment->posisi = "user";
    $investment->reject = "acc_budget/".date('Y-m-d H:i:s');
}
else if($investment->posisi == "acc_pajak"){
    $investment->posisi = "user";
    $investment->reject = "acc_pajak/".date('Y-m-d H:i:s');
}

$investment->save();

$isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$id;
$tolak = db::select($isimail);

              //kirim email ke Buyer
$mails = "select distinct email from users where users.username = '".$investment->applicant_id."'";
$mailtoo = DB::select($mails);

Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'investment'));
return redirect('/investment/check/'.$id)->with('error', 'Investment Not Approved')->with('page', 'Investment');
}



        //ADAGIO


public function post_adagio(Request $request)
{
    try
    {
        $id_user = Auth::id();

        $files = array();
        $file = new AccInvestment();
        if ($request->file('file') != NULL)
        {
            $file = $request->file('file');
            $nama = $file->getClientOriginalName();
            $file->move('files/investment/adagio', $nama);
        }
        else
        {
            $nama = NULL;
        }

        $inv = AccInvestment::where('id', $request->get('id_edit'))
        ->update(['bukti_adagio' => $nama, 'status' => 'completed' ,'created_by' => $id_user]);


        return redirect('/investment')->with('status', 'Bukti Approval Adagio Berhasil Diunggah')
        ->with('page', 'Form Investment');


    }
    catch(QueryException $e)
    {
        return redirect('/investment')->with('error', 'Investment Gagal Dibuat')
        ->with('page', 'Form Investment');
    }
}

public function fetch_history_pembelian(Request $request){
    $history = AccPurchaseOrder::whereNull('acc_purchase_orders.deleted_at');

    if($request->get('keyword') != null){
        $history = $history->where('nama_item', 'like', '%' . $request->get('keyword') . '%');
    }
    $history = $history->join('acc_purchase_order_details','acc_purchase_orders.no_po','=','acc_purchase_order_details.no_po');
    $history = $history->select('acc_purchase_orders.supplier_name','acc_purchase_order_details.no_po','acc_purchase_order_details.nama_item','acc_purchase_order_details.goods_price','acc_purchase_order_details.service_price','acc_purchase_orders.tgl_po','acc_purchase_orders.currency');
    $history = $history->orderBy('acc_purchase_orders.tgl_po', 'desc');
    $history = $history->get();

    $response = array(
        'status' => true,
        'history' => $history
    );
    return Response::json($response);
}


        //==================================//
        //     Purchase Order Investment    //
        //==================================//
public function purchase_order_investment()
{
    $title = 'Purchase Order Investment';
    $title_jp = '投資申請に対する発注依頼';

    $emp = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
    ->first();

    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $authorized2 = EmployeeSync::select('employee_id', 'name')
    ->where('position', 'like', 'Manager%')
    ->where('department', '=', 'Procurement Department')
    ->first();

    $authorized3 = EmployeeSync::select('employee_id', 'name')
    ->where('position', 'like', 'General Manager%')
    ->where('division', '=', 'Production Support Division')
    ->whereNull('end_date')
    ->first();

    // $authorized4 = EmployeeSync::select('employee_id', 'name')
    // ->where('position', 'like', 'Director%')
    // ->Orwhere('position', 'like', 'General Manager%')
    // ->get();

    return view('accounting_purchasing.purchase_order_investment', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'employee' => $emp,
        'vendor' => $vendor,
        'delivery' => $this->delivery,
        'transportation' => $this->transportation,
        'authorized2' => $authorized2,
        'authorized3' => $authorized3,
        // 'authorized4' => $authorized4,
        'uom' => $this->uom
    ))
    ->with('page', 'Purchase Order Investment')
    ->with('head', 'Purchase Order Investment');
}

public function fetch_po_outstanding_investment(Request $request)
{
    $qry = "SELECT DISTINCT acc_investments.* FROM `acc_investments` join acc_investment_details on acc_investments.reff_number = acc_investment_details.reff_number where acc_investment_details.sudah_po is null and acc_investments.deleted_at is null and acc_investments.posisi = 'finished' and acc_investments.receive_date is not null";
    $invest = DB::select($qry);

    return DataTables::of($invest)

    ->editColumn('submission_date', function ($invest)
    {
        return date('d F Y', strtotime($invest->submission_date));
    })

    ->editColumn('file', function ($invest)
    {
        $data = json_decode($invest->file);
        $fl = "";
        if ($invest->file != null)
        {
            for ($i = 0;$i < count($data);$i++)
            {
                $fl .= '<a href="files/investment/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
            }
        }
        else
        {
            $fl = '-';
        }
        return $fl;
    })

    ->addColumn('action', function ($invest)
    {
        $id = $invest->id;

        return '
        <a href="javascript:void(0)" class="btn btn-xs btn-warning" onClick="editInvestment('.$id.')" data-toggle="tooltip" title="Edit Investment"><i class="fa fa-edit"></i> Edit</a>
        <a href="investment/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        <a href="javascript:void(0)" class="btn btn-xs  btn-primary" onClick="detailInvestment(' . $id . ')" style="margin-right:5px;" data-toggle="tooltip" title="Detail Investment"><i class="fa fa-eye"></i> Detail Item</a>
        ';
    })

    ->rawColumns(['file' => 'file', 'action' => 'action'])
    ->make(true);
}

public function fetch_investment_detail(Request $request)
{
    $investment = AccInvestment::find($request->get('id'));
    $investment_item = AccInvestment::join('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')->where('acc_investments.id', '=', $request->get('id'))
    ->get();

    $response = array(
        'status' => true,
        'investment' => $investment,
        'investment_item' => $investment_item
    );
    return Response::json($response);
}

public function fetchInvList(Request $request)
{
    $inv = AccInvestment::select('acc_investments.reff_number')->join('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
    ->whereNull('sudah_po')
    ->where('acc_investments.posisi','=','finished')
    ->distinct()
    ->get();

    $response = array(
        'status' => true,
        'investment' => $inv
    );

    return Response::json($response);
}

public function pilihInvestment(Request $request)
{
    $html = array();
    $list_item = AccInvestmentDetail::where('reff_number', $request->reff_number)
    ->whereNull('sudah_po')
    ->get();

    $lists = "<option value=''>-- Pilih Item --</option>";
    foreach ($list_item as $item)
    {
        $lists .= "<option value='".$item->no_item."'>".$item->no_item." - ".$item->detail."</option>"; 

    }
    return json_encode($lists);
}

    //==================================//
    //        Budget Information        //
    //==================================//

public function budget_info()
{
    $title = 'Budget Information';
    $title_jp = '予算情報';

    $status = AccBudget::select('*')->whereNull('acc_budgets.deleted_at')
    ->distinct()
    ->get();

    $dept = db::select("SELECT department_name as department FROM `departments`");

    $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('department')
    ->first();

    $fy = db::select("select distinct periode from acc_budgets");

    return view('accounting_purchasing.master.budget_info', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'emp_dept' => $emp_dept,
        'department' => $dept,
        'fy' => $fy
    ))->with('page', 'Budget Information')
    ->with('head', 'Budget Information');
}

public function fetch_budget_info(Request $request)
{

        //Get Employee Department
        // $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
        // ->select('department')
        // ->first();

        // $budget = AccBudget::orderBy('acc_budgets.budget_no', 'asc');

        // if ($request->get('periode') != null)
        // {
        //     $budget = $budget->whereIn('acc_budgets.periode', $request->get('periode'));
        // }

        // if ($request->get('category') != null)
        // {
        //     $budget = $budget->whereIn('acc_budgets.category', $request->get('category'));
        // }

        // if (str_contains(Auth::user()->role_code, 'MIS') || $emp_dept->department == "Accounting Department" || $emp_dept->department == "Procurement Department" || $emp_dept->department == "Purchasing Control Department") {

        // }
        // else if ($emp_dept->department == "General Affairs Department"){
        //     $budget = $budget->where('department','=','Human Resources Department');
        // }
        // else if($emp_dept->department == "Purchasing Control Department") {
        //     $budget = $budget->where('department','=','Procurement Department');
        // }
        // else {
        //     $budget = $budget->where('department','=',$emp_dept->department);
        // }

        // $budget = $budget->select('*')->get();

        // return DataTables::of($budget)

        // ->editColumn('amount', function ($budget)
        // {
        //     return '$'.$budget->amount;
        // })

        // ->addColumn('action', function ($budget)
        // {
        //     $id = $budget->id;

        //     return ' 
        //     <button class="btn btn-xs btn-info" data-toggle="tooltip" title="Details" onclick="modalView('.$id.')"><i class="fa fa-eye"></i> Detail Sisa Budget</button>
        //     ';
        // })

        // ->rawColumns(['action' => 'action'])
        // ->make(true);

    $category = $request->get('category');

    if ($category != null)
    {
      $cattt = json_encode($category);
      $catt = str_replace(array("[","]"),array("(",")"),$cattt);

      $cat = 'and category in'.$catt;
  }
  else {
      $cat = '';
  }

  $periode = $request->get('periode');

  if ($periode != null)
  {
      $period = json_encode($periode);
      $perio = str_replace(array("[","]"),array("(",")"),$period);

      $per = 'and periode in'.$perio;
  }
  else {
      $per = '';
  }

  $bulan = $request->get('bulan');

  if ($bulan != null)
  {
      $bula = json_encode($bulan);
      $bul = str_replace(array("[","]"),array("(",")"),$bula);

      $bu = 'and budget_month in'.$bul;
  }
  else {
      $bu = '';
  }


  $department = $request->get('department');

  if ($department != null) {

    if ($department[0] == "Maintenance Department") {
        array_push($department,"Production Engineering Department");
    }

    else if ($department[0] == "Purchasing Control Department") {
        array_push($department,"Procurement Department");
    }

    else if ($department[0] == "General Affairs Department") {
        array_push($department,"Human Resources Department");
    }

    else if ($department[0] == "Educational Instrument (EI) Department") {
        array_push($department,"Woodwind Instrument - Assembly (WI-A) Department");
    }

    $deptt = json_encode($department);
    $dept = str_replace(array("[","]"),array("(",")"),$deptt);

    $dep = 'and department in'.$dept;
} else {
  $dep = '';
}

        // $data = db::select('
        //     SELECT periode, budget_no, department, description, amount, account_name, category, SUM(PR) as PR, SUM(investment) as Investment, SUM(PO) as PO, SUM(Actual) as Actual FROM
        //         (
        //         SELECT
        //             periode,
        //             budget_no,
        //             department,
        //             description,
        //             amount,
        //             account_name,
        //             category,
        //             0 AS PR,
        //             0 AS Investment,
        //             0 AS PO,
        //             0 AS Actual 
        //         FROM
        //             acc_budgets 

        //         UNION ALL

        //         SELECT
        //             acc_budgets.periode,
        //             budget,
        //             acc_budgets.description,
        //             acc_budgets.department,
        //             acc_budgets.amount,
        //             acc_budgets.account_name,
        //             acc_budgets.category,
        //             sum( CASE WHEN `status` = "PR" THEN acc_budget_histories.amount ELSE 0 END ) AS PR,
        //             sum( CASE WHEN `status` = "Investment" THEN acc_budget_histories.amount ELSE 0 END ) AS Investment,
        //             sum( CASE WHEN `status` = "PO" THEN acc_budget_histories.amount_po ELSE 0 END ) AS PO,
        //             sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_receive ELSE 0 END ) AS Actual 
        //         FROM
        //             acc_budget_histories
        //             JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
        //         WHERE
        //             acc_budgets.deleted_at IS NULL 
        //     GROUP BY
        //         budget) acc
        //     group by budget_no
        // ');

//         SELECT periode, budget_no, department, description, amount, account_name, category
// -- , 
// -- SUM(PR) as PR, SUM(investment) as Investment, SUM(PO) as PO, SUM(Actual) as Actual 
// FROM acc_budgets LEFT JOIN 
//     (
//     SELECT
//         budget_no,
//         0 AS PR,
//         0 AS Investment,
//         0 AS PO,
//         0 AS Actual 
//     FROM
//         acc_budgets 
//         UNION ALL
//     SELECT
//         budget,
//         sum( CASE WHEN `status` = "PR" THEN acc_budget_histories.amount ELSE 0 END ) AS PR,
//         sum( CASE WHEN `status` = "Investment" THEN acc_budget_histories.amount ELSE 0 END ) AS Investment,
//         sum( CASE WHEN `status` = "PO" THEN acc_budget_histories.amount_po ELSE 0 END ) AS PO,
//         sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_receive ELSE 0 END ) AS Actual 
//     FROM
//         acc_budget_histories
//         JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
//     WHERE
//         acc_budgets.deleted_at IS NULL 
//     GROUP BY
//         budget 
//     ) 
//     AS acc
//     on acc_budgets.budget_no = acc.budget_no

// group by acc_budgets.budget_no

// SELECT periode, budget_no, department, description, amount, account_name, category FROM acc_budgets

$data = db::select('
  SELECT
  ( SELECT periode FROM acc_budgets WHERE budget_no = a.budget_no ) AS periode,
  a.budget_no,
  ( SELECT department FROM acc_budgets WHERE budget_no = a.budget_no ) AS department,
  ( SELECT description FROM acc_budgets WHERE budget_no = a.budget_no ) AS description,
  ( SELECT amount FROM acc_budgets WHERE budget_no = a.budget_no ) AS amount,
  ( SELECT account_name FROM acc_budgets WHERE budget_no = a.budget_no ) AS account_name,
  ( SELECT category FROM acc_budgets WHERE budget_no = a.budget_no ) AS category,
  ( SELECT deleted_at FROM acc_budgets WHERE budget_no = a.budget_no ) AS deleted,
  SUM( a.PR ) AS PR,
  SUM( a.investment ) AS Investment,
  SUM( a.PO ) AS PO,
  SUM( a.Transfer ) AS Transfer,
  SUM( a.actual ) AS Actual
  FROM
  (
      SELECT
      budget_no,
      0 AS PR,
      0 AS Investment,
      0 AS PO,
      0 AS Transfer,
      0 AS Actual 
      FROM
      acc_budgets 
      WHERE periode = "FY200"

      UNION ALL

      SELECT
      budget,
      sum( CASE WHEN `status` = "PR" THEN acc_budget_histories.amount ELSE 0 END ) AS PR,
      sum( CASE WHEN `status` = "Investment" THEN acc_budget_histories.amount ELSE 0 END ) AS Investment,
      sum( CASE WHEN `status` = "PO" THEN acc_budget_histories.amount_po ELSE 0 END ) AS PO,
      0 AS Transfer,
      sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_receive ELSE 0 END ) AS Actual 
      FROM
      acc_budget_histories
      JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
      WHERE
      acc_budgets.deleted_at IS NULL
      and periode = "FY200"
      '.$bu.'
      GROUP BY
      budget, acc_budgets.id

      UNION ALL

      SELECT
      budget,
      sum( CASE WHEN `status` = "PR" THEN canteen_budget_histories.amount ELSE 0 END ) AS PR,
      0 AS Investment,
      sum( CASE WHEN `status` = "PO" THEN canteen_budget_histories.amount_po ELSE 0 END ) AS PO,
      0 AS Transfer,
      sum( CASE WHEN `status` = "Actual" THEN canteen_budget_histories.amount_receive ELSE 0 END ) AS Actual 
      FROM
      canteen_budget_histories
      JOIN acc_budgets ON canteen_budget_histories.budget = acc_budgets.budget_no 
      WHERE
      acc_budgets.deleted_at IS NULL
      and periode = "FY200"
      '.$bu.'
      GROUP BY
      budget, acc_budgets.id

      UNION ALL

      SELECT
      budget_no,
      0 AS PR,
      0 AS Investment,
      0 AS PO,
      0 AS Transfer,
      SUM(local_amount) as Actual
      FROM
      acc_actual_logs 
      WHERE
      acc_actual_logs.deleted_at IS NULL
      and investment_no is null
      and periode = "FY200"
      GROUP BY
      budget_no

      UNION ALL

      SELECT 
      budget_from,
      0 AS PR,
      0 AS Investment,
      0 AS PO,
      -SUM(amount) as Transfer,
      0 as Actual
      FROM  acc_budget_transfers
      WHERE acc_budget_transfers.deleted_at IS NULL
      and posisi = "acc"
      GROUP BY
      budget_from

      UNION ALL

      SELECT 
      budget_to,
      0 AS PR,
      0 AS Investment,
      0 AS PO,
      SUM(amount) as Transfer,
      0 as Actual
      FROM acc_budget_transfers
      WHERE acc_budget_transfers.deleted_at IS NULL
      and posisi = "acc"
      GROUP BY
      budget_to
      ) a 
  GROUP BY
  a.budget_no
  HAVING
  a.budget_no IS NOT NULL and a.budget_no <> "" and deleted IS NULL and periode = "FY200"
  '.$dep.' '.$cat.' '.$per.'
  ');

$response = array(
    'status' => true,
    'datas' => $data
);

return Response::json($response); 

        // where a.deleted_at is null            
        // '.$dep.' '.$cat.' '.$per.'


}

public function budget_edit(Request $request){
    try {
        $simulasi = $request->get('simulasi');
        $sisa = $request->get('sisa');

        $simulasi_jan = $simulasi[0];
        $simulasi_feb = $simulasi[1];
        $simulasi_mar = $simulasi[2];
        $simulasi_apr = $simulasi[3];
        $simulasi_may = $simulasi[4];
        $simulasi_jun = $simulasi[5];
        $simulasi_jul = $simulasi[6];
        $simulasi_aug = $simulasi[7];
        $simulasi_sep = $simulasi[8];
        $simulasi_oct = $simulasi[9];
        $simulasi_nov = $simulasi[10];
        $simulasi_des = $simulasi[11];
        $sisa_jan = $sisa[0];
        $sisa_feb = $sisa[1];
        $sisa_mar = $sisa[2];
        $sisa_apr = $sisa[3];
        $sisa_may = $sisa[4];
        $sisa_jun = $sisa[5];
        $sisa_jul = $sisa[6];
        $sisa_aug = $sisa[7];
        $sisa_sep = $sisa[8];
        $sisa_oct = $sisa[9];
        $sisa_nov = $sisa[10];
        $sisa_des = $sisa[11];

        $amount = $simulasi[0] + $simulasi[1] + $simulasi[2] + $simulasi[3] + $simulasi[4] + $simulasi[5] + $simulasi[6] + $simulasi[7] + $simulasi[8] + $simulasi[9] + $simulasi[10] + $simulasi[11];

        $updatebudget = AccBudget::where('budget_no','=',$request->get('budget'))
        ->update([
            'amount' => $amount,
            'jan_after_adj' => $simulasi_jan,
            'feb_after_adj' => $simulasi_feb,
            'mar_after_adj' => $simulasi_mar,
            'apr_after_adj' => $simulasi_apr,
            'may_after_adj' => $simulasi_may,
            'jun_after_adj' => $simulasi_jun,
            'jul_after_adj' => $simulasi_jul,
            'aug_after_adj' => $simulasi_aug,
            'sep_after_adj' => $simulasi_sep,
            'oct_after_adj' => $simulasi_oct,
            'nov_after_adj' => $simulasi_nov,
            'dec_after_adj' => $simulasi_des,
            'jan_sisa_budget' => $sisa_jan,
            'feb_sisa_budget' => $sisa_feb,
            'mar_sisa_budget' => $sisa_mar,
            'apr_sisa_budget' => $sisa_apr,
            'may_sisa_budget' => $sisa_may,
            'jun_sisa_budget' => $sisa_jun,
            'jul_sisa_budget' => $sisa_jul,
            'aug_sisa_budget' => $sisa_aug,
            'sep_sisa_budget' => $sisa_sep,
            'oct_sisa_budget' => $sisa_oct,
            'nov_sisa_budget' => $sisa_nov,
            'dec_sisa_budget' => $sisa_des
        ]);

        $response = array(
            'status' => true,
            'datas' => 'Berhasil Update Data',
        );
        return Response::json($response);
    } catch (QueryException $e){
     $error_code = $e->errorInfo[1];
     if($error_code == 1062){
        $response = array(
           'status' => false,
           'datas' => 'Errpr'
       );
        return Response::json($response);
    }
    else{
        $response = array(
           'status' => false,
           'datas' => $e->getMessage()
       );
        return Response::json($response);
    }
}
}

public function exportBudget(Request $request){

    $time = date('d-m-Y H;i;s');

    $tglnow = date('Y-m-d');
    $tahun = db::select("select fiscal_year from weekly_calendars where week_date = '$tglnow'");

    $fiscal = 'and acc_budgets.periode = "'.$tahun[0]->fiscal_year.'"';

    $budget_detail = db::select(
        "SELECT * FROM acc_budgets WHERE acc_budgets.deleted_at IS NULL " . $fiscal . " order by acc_budgets.id ASC");

    $data = array(
        'budget_detail' => $budget_detail
    );

    ob_clean();

    Excel::create('Budget List '.$time, function($excel) use ($data){
        $excel->sheet('Data', function($sheet) use ($data) {
          return $sheet->loadView('accounting_purchasing.budget_excel', $data);
      });
    })->export('xlsx');
}

public function budget_log()
{
    $title = 'Budget Log';
    $title_jp = '予算台帳';

    $data = AccBudgetHistory::select('*')->whereNull('acc_budget_histories.deleted_at')
    ->distinct()
    ->get();

    $status = AccBudgetHistory::select('status')->whereNull('acc_budget_histories.deleted_at')
    ->distinct()
    ->get();

    return view('accounting_purchasing.master.budget_log', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'status' => $status
    ))->with('page', 'Budget Log')
    ->with('head', 'Budget Log');
}

public function fetch_budget_log(Request $request)
{
    $budgetlog = AccBudgetHistory::where('id','>','3135')->orderBy('acc_budget_histories.id', 'desc');

    if ($request->get('status') != null)
    {
        $budgetlog = $budgetlog->whereIn('acc_budget_histories.status', $request->get('status'));
    }

    $budgetlog = $budgetlog->select('*')
    ->get();

    return DataTables::of($budgetlog)

    ->editColumn('budget_month', function ($budgetlog)
    {
        if ($budgetlog->status == "PR" || $budgetlog->status == "Investment") {
            return $budgetlog->budget_month;           
        }
        else if ($budgetlog->status == "PO") {
            return $budgetlog->budget_month. ' - ' .$budgetlog->budget_month_po;           
        }
        else if ($budgetlog->status == "Actual") {
            return $budgetlog->budget_month. ' - ' .$budgetlog->budget_month_po. ' - ' .$budgetlog->budget_month_receive;           
        }

    })

    ->addColumn('action', function ($budgetlog)
    {
        $id = $budgetlog->id;
        if (str_contains(Auth::user()->role_code, 'MIS') || str_contains(Auth::user()->role_code, 'ACC')) {
            return ' 
            <a href="" class="btn btn-warning btn-xs"><i class="fa fa-eye"></i></a> 
            ';
        }else{
            return '-';       
        }
    })
    ->rawColumns(['budget_month' => 'budget_month','action' => 'action'])

    ->make(true);
}

public function budget_detail(Request $request)
{
    $detail = AccBudget::where('budget_no','=',$request->get('id'))->first();

    $detail_penggunaan = db::select('
        SELECT
        CASE    
        WHEN
        a.bulan = "Jan" THEN
        13 
        WHEN a.bulan = "Feb" THEN
        14 
        WHEN a.bulan = "Mar" THEN
        15 
        WHEN a.bulan = "Apr" THEN
        4 
        WHEN a.bulan = "May" THEN
        5 
        WHEN a.bulan = "Jun" THEN
        6 
        WHEN a.bulan = "Jul" THEN
        7 
        WHEN a.bulan = "Aug" THEN
        8 
        WHEN a.bulan = "Sep" THEN
        9 
        WHEN a.bulan = "Oct" THEN
        10 
        WHEN a.bulan = "Nov" THEN
        11 
        WHEN a.bulan = "Dec" THEN
        12 
        END AS month_number,
        a.bulan,
        ROUND( SUM( a.actual ), 2 ) AS Actual,
        ROUND( SUM( a.PR ), 2 ) AS PR,
        ROUND( SUM( a.Investment ), 2 ) AS Investment,
        ROUND( SUM( a.PO ), 2 ) AS PO
        FROM
        (
            SELECT
            budget_month as bulan,
            0 as Actual,
            ROUND( sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = acc_budget_histories.budget 
            WHERE
            budget_month IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month 

            UNION ALL

            SELECT
            budget_month_po as bulan,
            0 as Actual,
            0 AS PR,
            0 AS Investment,
            ROUND( sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_po - acc_budget_histories.amount ELSE 0 END ), 2 ) AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = acc_budget_histories.budget 
            WHERE
            budget_month_po IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month_po

            UNION ALL

            SELECT
            budget_month_receive as bulan,
            ROUND( sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_receive - acc_budget_histories.amount_po ELSE 0 END ), 2 ) as Actual,
            0 AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = acc_budget_histories.budget 
            WHERE
            budget_month_receive IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month_receive

            UNION ALL

            SELECT
            month_date AS bulan,
            ROUND( SUM( local_amount ), 2 ) AS Actual,
            0 AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_actual_logs
            LEFT JOIN acc_budgets on acc_budgets.budget_no = acc_actual_logs.budget_no 
            WHERE
            acc_actual_logs.deleted_at IS NULL 
            AND acc_budgets.budget_no = "'.$request->get('id').'" 
            AND acc_actual_logs.investment_no is null
            GROUP BY
            month_date 

            UNION ALL

            SELECT 
            budget_month AS bulan,
            0 AS Actual,            
            ROUND( sum( CASE WHEN `status` = "PR" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = acc_budget_histories.budget 
            WHERE
            budget_month IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month

            UNION ALL

            SELECT 
            budget_month AS bulan,
            0 AS Actual,            
            0 AS PR,
            ROUND( sum( CASE WHEN `status` = "Investment" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = acc_budget_histories.budget 
            WHERE
            budget_month IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month

            UNION ALL

            SELECT 
            budget_month AS bulan,
            0 AS Actual,            
            ROUND( sum( CASE WHEN `status` = "PO" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = acc_budget_histories.budget 
            WHERE
            budget_month IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month

            UNION ALL

            SELECT 
            budget_month_po AS bulan,
            0 AS Actual,            
            0 AS PR,
            0 AS Investment,
            ROUND( sum( CASE WHEN `status` = "PO" THEN acc_budget_histories.amount_po - acc_budget_histories.amount ELSE 0 END ), 2 ) AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = acc_budget_histories.budget 
            WHERE
            budget_month_po IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month_po


            UNION ALL


            SELECT
            budget_month as bulan,
            0 as Actual,
            ROUND( sum( CASE WHEN `status` = "Actual" THEN canteen_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            canteen_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = canteen_budget_histories.budget 
            WHERE
            budget_month IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month 

            UNION ALL

            SELECT
            budget_month_po as bulan,
            0 as Actual,
            0 AS PR,
            0 AS Investment,
            ROUND( sum( CASE WHEN `status` = "Actual" THEN canteen_budget_histories.amount_po - canteen_budget_histories.amount ELSE 0 END ), 2 ) AS PO
            FROM
            canteen_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = canteen_budget_histories.budget 
            WHERE
            budget_month_po IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month_po

            UNION ALL

            SELECT
            budget_month_receive as bulan,
            ROUND( sum( CASE WHEN `status` = "Actual" THEN canteen_budget_histories.amount_receive - canteen_budget_histories.amount_po ELSE 0 END ), 2 ) as Actual,
            0 AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            canteen_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = canteen_budget_histories.budget 
            WHERE
            budget_month_receive IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month_receive

            UNION ALL

            SELECT 
            budget_month AS bulan,
            0 AS Actual,            
            ROUND( sum( CASE WHEN `status` = "PR" THEN canteen_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            canteen_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = canteen_budget_histories.budget 
            WHERE
            budget_month IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month

            UNION ALL

            SELECT 
            budget_month AS bulan,
            0 AS Actual,            
            ROUND( sum( CASE WHEN `status` = "PO" THEN canteen_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            canteen_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = canteen_budget_histories.budget 
            WHERE
            budget_month IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month

            UNION ALL

            SELECT 
            budget_month_po AS bulan,
            0 AS Actual,            
            0 AS PR,
            0 AS Investment,
            ROUND( sum( CASE WHEN `status` = "PO" THEN canteen_budget_histories.amount_po - canteen_budget_histories.amount ELSE 0 END ), 2 ) AS PO
            FROM
            canteen_budget_histories
            LEFT JOIN acc_budgets on acc_budgets.budget_no = canteen_budget_histories.budget 
            WHERE
            budget_month_po IS NOT NULL 
            AND budget_no = "'.$request->get('id').'"
            GROUP BY
            budget_month_po

            ) a 
            GROUP BY
            a.bulan 
            HAVING
            a.bulan IS NOT NULL 
            ORDER BY
            month_number
            ');

$response = array(
    'status' => true,
    'datas' => $detail,
    'data_penggunaan' => $detail_penggunaan
);

return Response::json($response);
}

public function import_budget(Request $request){
    if($request->hasFile('upload_file')) {
        try{                
            $file = $request->file('upload_file');
            $file_name = 'budget'.'('. date("ymd_h.i") .')'.'.'.$file->getClientOriginalExtension();
            $file->move(public_path('uploads/budget/'), $file_name);
            $excel = public_path('uploads/budget/') . $file_name;

            $rows = Excel::load($excel, function($reader) {
                $reader->noHeading();
                        //Skip Header
                $reader->skipRows(1);
            })->get();

            $rows = $rows->toArray();

            for ($i=0; $i < count($rows); $i++) {
                if ($rows[$i][0] != "") {
                    $periode = $rows[$i][0];
                    $budget_no = $rows[$i][1];
                    $department = $rows[$i][2];
                    $description = $rows[$i][3];
                    $amount = $rows[$i][4];
                    $env = $rows[$i][5];
                    $purpose = $rows[$i][6];
                    $pic = $rows[$i][7];
                    $account = $rows[$i][8];
                    $category = $rows[$i][9];
                    $apr_awal = $rows[$i][10];
                    $may_awal = $rows[$i][11];
                    $jun_awal = $rows[$i][12];
                    $jul_awal = $rows[$i][13];
                    $aug_awal = $rows[$i][14];
                    $sep_awal = $rows[$i][15];
                    $oct_awal = $rows[$i][16];
                    $nov_awal = $rows[$i][17];
                    $dec_awal = $rows[$i][18];
                    $jan_awal = $rows[$i][19];
                    $feb_awal = $rows[$i][20];
                    $mar_awal = $rows[$i][21];
                    $adj_frc = $rows[$i][22];
                    $apr_adj = $rows[$i][23];
                    $may_adj = $rows[$i][24];
                    $jun_adj = $rows[$i][25];
                    $jul_adj = $rows[$i][26];
                    $aug_adj = $rows[$i][27];
                    $sep_adj = $rows[$i][28];
                    $oct_adj = $rows[$i][29];
                    $nov_adj = $rows[$i][30];
                    $dec_adj = $rows[$i][31];
                    $jan_adj = $rows[$i][32];
                    $feb_adj = $rows[$i][33];
                    $mar_adj = $rows[$i][34];
                    $apr_sisa = $rows[$i][35];
                    $may_sisa = $rows[$i][36];
                    $jun_sisa = $rows[$i][37];
                    $jul_sisa = $rows[$i][38];
                    $aug_sisa = $rows[$i][39];
                    $sep_sisa = $rows[$i][40];
                    $oct_sisa = $rows[$i][41];
                    $nov_sisa = $rows[$i][42];
                    $dec_sisa = $rows[$i][43];
                    $jan_sisa = $rows[$i][44];
                    $feb_sisa = $rows[$i][45];
                    $mar_sisa = $rows[$i][46];

                    $data2 = AccBudget::firstOrNew(['periode' => $periode, 'budget_no' => $budget_no]);
                    $data2->department = $department;
                    $data2->description = $description;
                    $data2->amount = $amount;
                    $data2->env = $env;
                    $data2->purpose = $purpose;
                    $data2->pic = $pic;
                    $data2->account_name = $account;
                    $data2->category = $category;
                    $data2->apr_budget_awal = $apr_awal;
                    $data2->may_budget_awal = $may_awal;
                    $data2->jun_budget_awal = $jun_awal;
                    $data2->jul_budget_awal = $jul_awal;
                    $data2->aug_budget_awal = $aug_awal;
                    $data2->sep_budget_awal = $sep_awal;
                    $data2->oct_budget_awal = $oct_awal;
                    $data2->nov_budget_awal = $nov_awal;
                    $data2->dec_budget_awal = $dec_awal;
                    $data2->jan_budget_awal = $jan_awal;
                    $data2->feb_budget_awal = $feb_awal;
                    $data2->mar_budget_awal = $mar_awal;
                    $data2->adj_frc = $adj_frc;
                    $data2->apr_after_adj = $apr_adj;
                    $data2->may_after_adj = $may_adj;
                    $data2->jun_after_adj = $jun_adj;
                    $data2->jul_after_adj = $jul_adj;
                    $data2->aug_after_adj = $aug_adj;
                    $data2->sep_after_adj = $sep_adj;
                    $data2->oct_after_adj = $oct_adj;
                    $data2->nov_after_adj = $nov_adj;
                    $data2->dec_after_adj = $dec_adj;
                    $data2->jan_after_adj = $jan_adj;
                    $data2->feb_after_adj = $feb_adj;
                    $data2->mar_after_adj = $mar_adj;
                    $data2->apr_sisa_budget = $apr_sisa;
                    $data2->may_sisa_budget = $may_sisa;
                    $data2->jun_sisa_budget = $jun_sisa;
                    $data2->jul_sisa_budget = $jul_sisa;
                    $data2->aug_sisa_budget = $aug_sisa;
                    $data2->sep_sisa_budget = $sep_sisa;
                    $data2->oct_sisa_budget = $oct_sisa;
                    $data2->nov_sisa_budget = $nov_sisa;
                    $data2->dec_sisa_budget = $dec_sisa;
                    $data2->jan_sisa_budget = $jan_sisa;
                    $data2->feb_sisa_budget = $feb_sisa;    
                    $data2->mar_sisa_budget = $mar_sisa;
                    $data2->created_by = Auth::id();
                    $data2->save();
                }

            }       

            $response = array(
                'status' => true,
                'message' => 'Upload file success',
            );
            return Response::json($response);

        }catch(\Exception $e){
            $response = array(
                'status' => false,
                'message' => $e->getMessage(),
            );
            return Response::json($response);
        }
    }else{
        $response = array(
            'status' => false,
            'message' => 'Upload failed, File not found',
        );
        return Response::json($response);
    }
}

public function budget_control()
{
        // $title = 'Budget Report & Control';
        // $     = '予算報告・管理';

    $title = 'Budget Summary';
    $title_jp = '予算要約';

    $dept = db::select("SELECT department_name as department FROM `departments`");
    
    $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('department')
    ->first();

    return view('accounting_purchasing.display.budget_summary', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'emp_dept' => $emp_dept,
        'department' => $dept
    ))->with('page', 'Budget Summary')
    ->with('head', 'Budget Summary');
}

public function fetch_budget_table(Request $request)
{

  $datefrom = $request->get('datefrom');
  $dateto = $request->get('dateto');

  if ($datefrom == "") {
      $date = ''; 
  }

  if($datefrom != ""){

      if ($dateto != "") {
          $date = 'and DATE_FORMAT(budget_date,"%Y-%m") between '.$datefrom.' and '.$dateto.''; 
      }

      $date = 'and DATE_FORMAT(budget_date,"%Y-%m") = "'.$datefrom.'"'; 
  }

  $department = $request->get('department');

  if ($department != null) {
      $deptt = json_encode($department);
      $dept = str_replace(array("[","]"),array("(",")"),$deptt);

      $dep = 'and acc_budgets.department in'.$dept;
  } else {
      $dep = '';
  }

  $data = db::select('
    SELECT
    budget,
    acc_budgets.amount,
    acc_budgets.description,
    acc_budgets.department,
    sum(CASE WHEN `status` = "PR" THEN acc_budget_histories.amount ELSE 0 END ) AS PR,
    sum(CASE WHEN `status` = "Investment" THEN acc_budget_histories.amount ELSE 0 END ) AS Investment,
    sum(CASE WHEN `status` = "PO" THEN acc_budget_histories.amount_po ELSE 0 END ) AS PO,
    sum(CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_receive ELSE 0 END ) AS Actual
    FROM
    acc_budget_histories 
    JOIN 
    acc_budgets
    ON 
    acc_budget_histories.budget = acc_budgets.budget_no
    WHERE
    acc_budgets.deleted_at IS NULL '.$date.' '.$dep.'
    GROUP BY
    budget,amount,description,department
    ');

  $response = array(
    'status' => true,
    'datas' => $data
);

  return Response::json($response); 
}

public function fetch_budget_summary(Request $request)
{

    $category = $request->get('category');

    if ($category != null) {
        $cattt = json_encode($category);
        $catt = str_replace(array("[","]"),array("(",")"),$cattt);

        $cat = 'and acc_budgets.category in '.$catt;
    } else {
        $cat = '';
    }

    $tglnow = date('Y-m-d');
    $tahun = db::select("select fiscal_year from weekly_calendars where week_date = '$tglnow'");


    $fy = $request->get('fy');

    if ($fy != null) {
        $fiscal_year = json_encode($fy);
        $fiscal_y = str_replace(array("[","]"),array("(",")"),$fiscal_year);

        $fiscal = 'and acc_budgets.periode in '.$fiscal_y;
    } else {
        $fiscal = 'and acc_budgets.periode = "'.$tahun[0]->fiscal_year.'"';
    }

    $resume = db::select('
        SELECT
        periode,
        SUM( apr_after_adj ) AS apr_simulasi,
        SUM( may_after_adj ) AS may_simulasi,
        SUM( jun_after_adj ) AS jun_simulasi,
        SUM( jul_after_adj ) AS jul_simulasi,
        SUM( aug_after_adj ) AS aug_simulasi,
        SUM( sep_after_adj ) AS sep_simulasi,
        SUM( oct_after_adj ) AS oct_simulasi,
        SUM( nov_after_adj ) AS nov_simulasi,
        SUM( dec_after_adj ) AS dec_simulasi,
        SUM( jan_after_adj ) AS jan_simulasi,
        SUM( feb_after_adj ) AS feb_simulasi,
        SUM( mar_after_adj ) AS mar_simulasi
        FROM
        acc_budgets
        where acc_budgets.deleted_at is null
        '.$fiscal.'
        '.$cat.'
        GROUP BY periode
        ');

    
// SELECT
//     DATE_FORMAT( receive_date, '%b' ) AS bulan,
//     ROUND( sum( acc_actuals.amount_dollar ), 2 ) AS Actual,
//     0 AS PR,
//     0 AS Investment,
//     0 AS PO 
// FROM
//     acc_actuals
//     JOIN acc_purchase_order_details ON RIGHT ( CONCAT( SPLIT_STRING ( acc_purchase_order_details.no_po, '-', 1 ), SPLIT_STRING(acc_purchase_order_details.no_po, '-', 2 )), 10 ) = acc_actuals.no_po 
//     AND acc_purchase_order_details.no_item = acc_actuals.item_no 
// WHERE
//     DATE_FORMAT( receive_date, '%b' ) IS NOT NULL 
//     AND budget_item IN ( SELECT budget_no FROM acc_budgets WHERE category = "Expenses" ) 
// GROUP BY
//     DATE_FORMAT(receive_date,'%b')

// SELECT
//     budget_month_receive AS bulan,
//     ROUND( sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_receive ELSE 0 END ), 2 ) AS Actual,         
//     0 AS PR,
//     0 AS Investment,
//     0 AS PO
// FROM
//     acc_budget_histories
//     LEFT JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
// WHERE
//     budget_month_receive IS NOT NULL 
//     '.$fiscal.'
//     '.$cat.' 
// GROUP BY
//     budget_month_receive 

    $act = db::select('
        SELECT
        CASE    
        WHEN
        a.bulan = "Jan" THEN
        13 
        WHEN a.bulan = "Feb" THEN
        14 
        WHEN a.bulan = "Mar" THEN
        15 
        WHEN a.bulan = "Apr" THEN
        4 
        WHEN a.bulan = "May" THEN
        5 
        WHEN a.bulan = "Jun" THEN
        6 
        WHEN a.bulan = "Jul" THEN
        7 
        WHEN a.bulan = "Aug" THEN
        8 
        WHEN a.bulan = "Sep" THEN
        9 
        WHEN a.bulan = "Oct" THEN
        10 
        WHEN a.bulan = "Nov" THEN
        11 
        WHEN a.bulan = "Dec" THEN
        12 
        END AS month_number,
        a.bulan,
        ROUND( SUM( a.actual ), 2 ) AS Actual,
        ROUND( SUM( a.PR ), 2 ) AS PR,
        ROUND( SUM( a.Investment ), 2 ) AS Investment,
        ROUND( SUM( a.PO ), 2 ) AS PO
        FROM
        (
            SELECT
            DATE_FORMAT( receive_date, "%b" ) AS bulan,
            ROUND( sum( acc_actuals.amount_dollar ), 2 ) AS Actual,
            0 AS PR,
            0 AS Investment,
            0 AS PO 
            FROM
            acc_actuals
            LEFT JOIN acc_budgets ON acc_actuals.budget_no = acc_budgets.budget_no 
            WHERE
            DATE_FORMAT( receive_date, "%b" ) IS NOT NULL 
            '.$fiscal.'
            '.$cat.'   
            GROUP BY
            DATE_FORMAT( receive_date, "%b" )

            UNION ALL

            SELECT
            month_date AS bulan,
            ROUND( SUM( local_amount ), 2 ) AS Actual,
            0 AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_actual_logs
            LEFT JOIN acc_budgets ON acc_actual_logs.budget_no = acc_budgets.budget_no 
            WHERE
            acc_actual_logs.deleted_at IS NULL 
            '.$fiscal.'
            '.$cat.'   
            GROUP BY
            month_date 

            UNION ALL

            SELECT 
            budget_month AS bulan,
            0 AS Actual,            
            ROUND( sum( CASE WHEN `status` = "PR" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
            WHERE
            budget_month IS NOT NULL 
            '.$fiscal.'
            '.$cat.'  
            GROUP BY
            budget_month

            UNION ALL

            SELECT 
            budget_month AS bulan,
            0 AS Actual,            
            0 AS PR,
            ROUND( sum( CASE WHEN `status` = "Investment" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
            WHERE
            budget_month IS NOT NULL 
            '.$fiscal.'
            '.$cat.'  
            GROUP BY
            budget_month

            UNION ALL

            SELECT 
            budget_month_po AS bulan,
            0 AS Actual,            
            0 AS PR,
            0 AS Investment,
            ROUND( sum( CASE WHEN `status` = "PO" THEN acc_budget_histories.amount_po ELSE 0 END ), 2 ) AS PO
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
            WHERE
            budget_month_po IS NOT NULL 
            '.$fiscal.'
            '.$cat.'  
            GROUP BY
            budget_month_po

            ) a 
        GROUP BY
        a.bulan 
        HAVING
        a.bulan IS NOT NULL 
        ORDER BY
        month_number
        ');

    $category = db::select('
        SELECT
        category,
        sum(amount) AS amount
        FROM
        acc_budgets
        WHERE
        acc_budgets.deleted_at IS NULL
        '.$fiscal.'
        GROUP BY
        category
        ');

    $act_category = db::select('
        SELECT
        category,
        ROUND( SUM( a.actual ), 2 ) AS Actual,
        ROUND( SUM( a.PR ), 2 ) AS PR,
        ROUND( SUM( a.Investment ), 2 ) AS Investment,
        ROUND( SUM( a.PO ), 2 ) AS PO
        FROM
        (
            SELECT
            category,
            ROUND( sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_receive ELSE 0 END ), 2 ) AS Actual,   
            0 AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN   acc_budgets ON acc_budgets.budget_no = acc_budget_histories.budget
            WHERE
            category is not null
            '.$fiscal.'
            GROUP BY
            category 

            UNION ALL

            SELECT
            category,
            ROUND( SUM( local_amount ), 2 ) AS Actual,
            0 AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_actual_logs
            LEFT JOIN acc_budgets ON acc_actual_logs.budget_no = acc_budgets.budget_no 
            WHERE
            acc_actual_logs.deleted_at IS NULL 
            '.$fiscal.'
            GROUP BY
            category

            UNION ALL

            SELECT 
            category,
            0 AS Actual,            
            ROUND( sum( CASE WHEN `status` = "PR" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN   acc_budgets ON acc_budgets.budget_no = acc_budget_histories.budget
            WHERE
            category is not null
            '.$fiscal.'
            GROUP BY
            category

            UNION ALL

            SELECT 
            category,
            0 AS Actual,            
            0 AS PR,
            ROUND( sum( CASE WHEN `status` = "Investment" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS Investment,
            0 AS PO
            FROM
            acc_budget_histories
            LEFT JOIN   acc_budgets ON acc_budgets.budget_no = acc_budget_histories.budget
            WHERE
            category is not null
            '.$fiscal.'
            GROUP BY
            category

            UNION ALL

            SELECT 
            category,
            0 AS Actual,            
            0 AS PR,
            0 AS Investment,
            ROUND( sum( CASE WHEN `status` = "PO" THEN acc_budget_histories.amount_po ELSE 0 END ), 2 ) AS PO
            FROM
            acc_budget_histories
            LEFT JOIN   acc_budgets ON acc_budgets.budget_no = acc_budget_histories.budget
            WHERE
            category is not null
            '.$fiscal.' 
            GROUP BY
            category

            ) a 
        GROUP BY
        a.category 
        HAVING
        a.category IS NOT NULL 

        ');

    // $type = db::select('
    //     SELECT
    //     account_name,
    //     sum(amount) AS amount
    //     FROM
    //     acc_budgets
    //     WHERE
    //     acc_budgets.deleted_at IS NULL
    //     GROUP BY
    //     account_name
    //     ');

    $response = array(
        'status' => true,
        'cat_budget' => $category,
        'resume' => $resume,
        'act' => $act,
        'act_category' => $act_category
    );

    return Response::json($response); 
}

public function budget_monthly()
{
    $title = 'Budget Monthly';
    $title_jp = '月次予算';

    $dept = db::select("SELECT department_name as department FROM `departments`");

    $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('department')
    ->first();

    return view('accounting_purchasing.display.budget_monthly', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'emp_dept' => $emp_dept,
        'department' => $dept
    ))->with('page', 'Budget Monthly')
    ->with('head', 'Budget Monthly');
}


public function fetch_budget_monthly(Request $request)
{

    $category = $request->get('category');

    if ($category != null) {
        $cattt = json_encode($category);
        $catt = str_replace(array("[","]"),array("(",")"),$cattt);

        $cat = 'and acc_budgets.category in '.$catt;
    } else {
        $cat = '';
    }

    $tglnow = date('Y-m-d');
    $tahun = db::select("select fiscal_year from weekly_calendars where week_date = '$tglnow'");


    $fy = $request->get('fy');
    $tahun_fiscal =  "";

    if ($fy != null) {
        $fiscal_year = json_encode($fy);
        $fiscal_y = str_replace(array("[","]"),array("(",")"),$fiscal_year);

        $fiscal = 'and acc_budgets.periode in '.$fiscal_y;
        $tahun_fiscal = 'fiscal_year in '.$fiscal_y;
    } else {
        $fiscal = 'and acc_budgets.periode = "'.$tahun[0]->fiscal_year.'"';
        $tahun_fiscal = 'fiscal_year = "'.$tahun[0]->fiscal_year.'"';
    }

    $department = $request->get('department');

    if ($department != null) {
        if ($department == "General Affairs Department") {
          $department = "Human Resources Department";
      }
      $dept = 'and acc_budgets.department = "'.$department.'"';
  } else {
    $dept = '';
}

$resume = db::select('
    SELECT
    periode,
    SUM( apr_after_adj ) AS apr_simulasi,
    SUM( may_after_adj ) AS may_simulasi,
    SUM( jun_after_adj ) AS jun_simulasi,
    SUM( jul_after_adj ) AS jul_simulasi,
    SUM( aug_after_adj ) AS aug_simulasi,
    SUM( sep_after_adj ) AS sep_simulasi,
    SUM( oct_after_adj ) AS oct_simulasi,
    SUM( nov_after_adj ) AS nov_simulasi,
    SUM( dec_after_adj ) AS dec_simulasi,
    SUM( jan_after_adj ) AS jan_simulasi,
    SUM( feb_after_adj ) AS feb_simulasi,
    SUM( mar_after_adj ) AS mar_simulasi
    FROM
    acc_budgets
    where acc_budgets.deleted_at is null
    '.$fiscal.'
    '.$cat.'
    '.$dept.'
    GROUP BY periode
    ');

$act = db::select('

    SELECT 
    DISTINCT(DATE_FORMAT( week_date, "%m" )) as month_no,
    DATE_FORMAT( week_date, "%Y-%m" ) as `tahun`,
    b.bulan,
    b.month_number,
    COALESCE(b.PR,0) as PR,
    COALESCE(b.PO,0) as PO,
    COALESCE(b.Investment,0) as Investment,
    COALESCE(b.Actual,0) as Actual
    FROM
    weekly_calendars
    LEFT join (SELECT
        IF
        (
            LENGTH(
                CASE

                WHEN a.bulan = "Jan" THEN
                1 
                WHEN a.bulan = "Feb" THEN
                2 
                WHEN a.bulan = "Mar" THEN
                3 
                WHEN a.bulan = "Apr" THEN
                4 
                WHEN a.bulan = "May" THEN
                5 
                WHEN a.bulan = "Jun" THEN
                6 
                WHEN a.bulan = "Jul" THEN
                7 
                WHEN a.bulan = "Aug" THEN
                8 
                WHEN a.bulan = "Sep" THEN
                9 
                WHEN a.bulan = "Oct" THEN
                10 
                WHEN a.bulan = "Nov" THEN
                11 
                WHEN a.bulan = "Dec" THEN
                12 
                END 
                ) = 1,
            CONCAT(
                "0",
                CASE

                WHEN a.bulan = "Jan" THEN
                1 
                WHEN a.bulan = "Feb" THEN
                2 
                WHEN a.bulan = "Mar" THEN
                3 
                WHEN a.bulan = "Apr" THEN
                4 
                WHEN a.bulan = "May" THEN
                5 
                WHEN a.bulan = "Jun" THEN
                6 
                WHEN a.bulan = "Jul" THEN
                7 
                WHEN a.bulan = "Aug" THEN
                8 
                WHEN a.bulan = "Sep" THEN
                9 
                WHEN a.bulan = "Oct" THEN
                10 
                WHEN a.bulan = "Nov" THEN
                11 
                WHEN a.bulan = "Dec" THEN
                12 
                END 
                ),
            CASE

            WHEN a.bulan = "Jan" THEN
            1 
            WHEN a.bulan = "Feb" THEN
            2 
            WHEN a.bulan = "Mar" THEN
            3 
            WHEN a.bulan = "Apr" THEN
            4 
            WHEN a.bulan = "May" THEN
            5 
            WHEN a.bulan = "Jun" THEN
            6 
            WHEN a.bulan = "Jul" THEN
            7 
            WHEN a.bulan = "Aug" THEN
            8 
            WHEN a.bulan = "Sep" THEN
            9 
            WHEN a.bulan = "Oct" THEN
            10 
            WHEN a.bulan = "Nov" THEN
            11 
            WHEN a.bulan = "Dec" THEN
            12 
            END 
            ) AS month_number,
        a.bulan,
        ROUND( SUM( a.actual ), 2 ) AS Actual,
        ROUND( SUM( a.PR ), 2 ) AS PR,
        ROUND( SUM( a.Investment ), 2 ) AS Investment,
        ROUND( SUM( a.PO ), 2 ) AS PO 
        FROM
        (
            SELECT
            DATE_FORMAT( receive_date, "%b" ) AS bulan,
            ROUND( sum( acc_actuals.amount_dollar ), 2 ) AS Actual,
            0 AS PR,
            0 AS Investment,
            0 AS PO 
            FROM
            acc_actuals
            LEFT JOIN acc_budgets ON acc_actuals.budget_no = acc_budgets.budget_no 
            WHERE
            DATE_FORMAT( receive_date, "%b" ) IS NOT NULL 
            '.$fiscal.'
            '.$cat.'  
            '.$dept.'
            GROUP BY
            DATE_FORMAT( receive_date, "%b" ) UNION ALL
            SELECT
            month_date AS bulan,
            ROUND( SUM( local_amount ), 2 ) AS Actual,
            0 AS PR,
            0 AS Investment,
            0 AS PO 
            FROM
            acc_actual_logs
            LEFT JOIN acc_budgets ON acc_actual_logs.budget_no = acc_budgets.budget_no 
            WHERE
            acc_actual_logs.deleted_at IS NULL 
            '.$fiscal.'
            '.$cat.'  
            '.$dept.' 
            GROUP BY
            month_date UNION ALL
            SELECT
            budget_month AS bulan,
            0 AS Actual,
            ROUND( sum( CASE WHEN `status` = "PR" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS PR,
            0 AS Investment,
            0 AS PO 
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
            WHERE
            budget_month IS NOT NULL 
            '.$fiscal.'
            '.$cat.'  
            '.$dept.'
            GROUP BY
            budget_month UNION ALL
            SELECT
            budget_month AS bulan,
            0 AS Actual,
            0 AS PR,
            ROUND( sum( CASE WHEN `status` = "Investment" THEN acc_budget_histories.amount ELSE 0 END ), 2 ) AS Investment,
            0 AS PO 
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
            WHERE
            budget_month IS NOT NULL 
            '.$fiscal.'
            '.$cat.'  
            '.$dept.' 
            GROUP BY
            budget_month UNION ALL
            SELECT
            budget_month_po AS bulan,
            0 AS Actual,
            0 AS PR,
            0 AS Investment,
            ROUND( sum( CASE WHEN `status` = "PO" THEN acc_budget_histories.amount_po ELSE 0 END ), 2 ) AS PO 
            FROM
            acc_budget_histories
            LEFT JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
            WHERE
            budget_month_po IS NOT NULL 
            '.$fiscal.'
            '.$cat.'  
            '.$dept.'
            GROUP BY
            budget_month_po 
            ) a 
        WHERE
        Actual != 0 
        OR a.PR != 0 
        OR a.PO != 0 
        OR a.Investment != 0
        GROUP BY
        a.bulan 
        HAVING
        a.bulan IS NOT NULL 
        ORDER BY
        month_number) b on b.month_number = ( DATE_FORMAT( week_date, "%m" ) )
where '.$tahun_fiscal.'
ORDER BY DATE_FORMAT( week_date, "%Y-%m" )
');

$response = array(
    'status' => true,
    'resume' => $resume,
    'act' => $act
);

return Response::json($response); 
}


public function fetch_budget_monthly_table(Request $request)
{

    $category = $request->get('category');

    if ($category != null) {
        $cattt = json_encode($category);
        $catt = str_replace(array("[","]"),array("(",")"),$cattt);

        $cat = 'and acc_budgets.category in '.$catt;
    } else {
        $cat = '';
    }

    $tglnow = date('Y-m-d');
    $tahun = db::select("select fiscal_year from weekly_calendars where week_date = '$tglnow'");


    $fy = $request->get('fy');

    if ($fy != null) {
        $fiscal_year = json_encode($fy);
        $fiscal_y = str_replace(array("[","]"),array("(",")"),$fiscal_year);

        $fiscal = 'and acc_budgets.periode in '.$fiscal_y;
    } else {
        $fiscal = 'and acc_budgets.periode = "'.$tahun[0]->fiscal_year.'"';
    }

    $department = $request->get('department');

    if ($department != null) {
        if ($department == "General Affairs Department") {
          $department = "Human Resources Department";
      }

      $dept = 'and acc_budgets.department = "'.$department.'"';
  } else {
    $dept = '';
}

$data = db::select('select * from acc_budgets where acc_budgets.deleted_at is null '.$fiscal.' '.$cat.' '.$dept);

$act = db::select('
    SELECT
    CASE    
    WHEN
    a.bulan = "Jan" THEN
    13 
    WHEN a.bulan = "Feb" THEN
    14 
    WHEN a.bulan = "Mar" THEN
    15 
    WHEN a.bulan = "Apr" THEN
    4 
    WHEN a.bulan = "May" THEN
    5 
    WHEN a.bulan = "Jun" THEN
    6 
    WHEN a.bulan = "Jul" THEN
    7 
    WHEN a.bulan = "Aug" THEN
    8 
    WHEN a.bulan = "Sep" THEN
    9 
    WHEN a.bulan = "Oct" THEN
    10 
    WHEN a.bulan = "Nov" THEN
    11 
    WHEN a.bulan = "Dec" THEN
    12 
    END AS month_number,
    a.bulan,
    a.budget_no,
    ROUND( SUM( a.actual ), 2 ) AS Actual
    FROM
    (

        SELECT
        DATE_FORMAT(receive_date, "%b") AS bulan,
        acc_actuals.budget_no,
        ROUND( SUM( amount_dollar ), 2 ) AS Actual,       
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_actuals
        LEFT JOIN acc_budgets ON acc_actuals.budget_no = acc_budgets.budget_no 
        WHERE
        DATE_FORMAT(receive_date, "%b") IS NOT NULL
        '.$fiscal.' '.$cat.' '.$dept.'
        GROUP BY
        DATE_FORMAT(receive_date, "%b"), budget_no


        UNION ALL

        SELECT
        month_date AS bulan,
        acc_actual_logs.budget_no,
        ROUND( SUM( local_amount ), 2 ) AS Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_actual_logs
        LEFT JOIN acc_budgets ON acc_actual_logs.budget_no = acc_budgets.budget_no 
        WHERE
        acc_actual_logs.deleted_at IS NULL
        '.$fiscal.' '.$cat.' '.$dept.'
        GROUP BY
        month_date, budget_no

        UNION ALL

        SELECT
        "Apr" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "May" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Jun" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Jul" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Aug" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Sep" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Oct" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Nov" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Dec" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Jan" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Feb" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        UNION ALL

        SELECT
        "Mar" as bulan,
        acc_budgets.budget_no,
        0 as Actual,
        0 AS PR,
        0 AS Investment,
        0 AS PO
        FROM
        acc_budgets

        ) a 
    GROUP BY
    a.bulan, a.budget_no
    HAVING
    a.bulan IS NOT NULL and a.budget_no IS NOT NULL
    ORDER BY
    budget_no, month_number
    ');

    //actual 

    // SELECT
    // budget_month_receive AS bulan,
    // budget_no,
    // ROUND( sum( CASE WHEN `status` = "Actual" THEN acc_budget_histories.amount_receive ELSE 0 END ), 2 ) AS Actual,         
    // 0 AS PR,
    // 0 AS Investment,
    // 0 AS PO
    // FROM
    // acc_budget_histories
    // LEFT JOIN acc_budgets ON acc_budget_histories.budget = acc_budgets.budget_no 
    // WHERE
    // budget_month_receive IS NOT NULL
    // GROUP BY
    // budget_month_receive, budget_no

$response = array(
    'status' => true,
    'datas' => $data,
    'actual' => $act
);

return Response::json($response); 
}

public function fetch_budget_detail(Request $request){
    $budget = $request->get("budget");
    $status = $request->get("status");


        // $qry = "select acc_budget_histories.* from acc_budgets
        // left join acc_budget_histories on acc_budget_histories.budget = acc_budgets.budget_no
        // left join acc_actual_logs on acc_actual_logs.budget_no = acc_budgets.budget_no
        // where budget = '".$budget."' and status='".$status."'";

    if ($status == "Transfer") {
        $qry = "
        select *, 'Transfer' as status from acc_budget_transfers
        where acc_budget_transfers.budget_from = '".$budget."' or acc_budget_transfers.budget_to = '".$budget."'  ";
    }
    else if($status == "Actual")
            // select acc_budget_histories.budget,acc_budget_histories.budget_month_receive, acc_budget_histories.category_number,acc_budget_histories.po_number,acc_budget_histories.no_item,acc_budget_histories.amount_receive,acc_actual_logs.budget_no, acc_actual_logs.month_date,acc_actual_logs.description, acc_actual_logs.local_amount, 'Actual' as status from acc_budgets
            //     left join acc_budget_histories on acc_budget_histories.budget = acc_budgets.budget_no
            //     left join acc_actual_logs on acc_actual_logs.budget_no = acc_budgets.budget_no
            //     where acc_budget_histories.budget = '".$budget."' and status = '".$status."'  or acc_actual_logs.budget_no = '".$budget."' ";
        $qry = "
    SELECT
    a.budget_no,
    a.category_number,
    a.po_number,
    a.type,
    a.month_date,
    a.description,
    a.amount,
    a.`status`
    FROM (
        select 
        budget as budget_no, 
        category_number,
        po_number,
        '' as type,
        budget_month_receive as month_date,
        no_item as description,
        amount_receive as amount,
        'Actual' as `status`
        from acc_budget_histories
        where acc_budget_histories.budget = '".$budget."' 
        and `status` = 'Actual'

        UNION ALL

        select
        acc_actual_logs.budget_no, 
        '' as category_number,
        '' as po_number,
        acc_actual_logs.type,
        acc_actual_logs.month_date,
        acc_actual_logs.description, 
        acc_actual_logs.local_amount as amount,
        'Actual' as `status`
        from acc_actual_logs
        where acc_actual_logs.budget_no = '".$budget."' 
        and acc_actual_logs.investment_no is null
        ) a        
        ";
        else{
            $qry = "
            select * from acc_budget_histories
            where acc_budget_histories.budget = '".$budget."' and status = '".$status."'";
        }



        $bud = DB::select($qry);

        $response = array(
            'status' => true,
            'datas' => $bud
        );

        return Response::json($response); 
    }

        //==================================//
        //          Receive Goods           //
        //==================================//

    public function receive_goods()
    {
        $title = 'Receive Goods';
        $title_jp = '着荷品';

        $status = AccActual::select('*')->whereNull('acc_actuals.deleted_at')
        ->distinct()
        ->get();

        return view('accounting_purchasing.master.receive_goods', array(
            'title' => $title,
            'title_jp' => $title_jp,
        ))->with('page', 'Receive Goods')
        ->with('head', 'Receive Goods');
    }

    public function fetch_receive(Request $request)
    {
        $actual = AccActual::orderBy('acc_actuals.id', 'desc');

        if ($request->get('category') != null)
        {
            $actual = $actual->whereIn('acc_actuals.category', $request->get('category'));
        }

        $actual = $actual->select('*')->get();

        return DataTables::of($actual)

        ->editColumn('vendor_code', function ($actual)
        {
            return $actual->vendor_code. ' - ' .$actual->vendor_name;
        })

        ->editColumn('amount', function ($actual)
        {
            return '$'.$actual->amount;
        })

        ->addColumn('action', function ($actual)
        {
            $id = $actual->id;

            return ' 
            <button class="btn btn-xs btn-info" data-toggle="tooltip" title="Details" onclick="modalView('.$id.')"><i class="fa fa-eye"></i> Detail</button>
            ';
        })

        ->rawColumns(['action' => 'action'])
        ->make(true);
    }

    public function receive_detail(Request $request)
    {
        $detail = AccActual::find($request->get('id'));

        $response = array(
            'status' => true,
            'datas' => $detail,
        );

        return Response::json($response);
    }

    public function import_receive(Request $request){
        if($request->hasFile('upload_file')) {
            try{                
                $file = $request->file('upload_file');
                $file_name = 'receive_'. date("ymd_h.i") .'.'.$file->getClientOriginalExtension();
                $file->move(public_path('uploads/receive/'), $file_name);
                $excel = public_path('uploads/receive/') . $file_name;

                $rows = Excel::load($excel, function($reader) {
                    $reader->noHeading();
                        //Skip Header
                    $reader->skipRows(1);
                })->get();

                $rows = $rows->toArray();

                for ($i=0; $i < count($rows); $i++) {
                // $currency  = $rows[$i][1];
                // $vendor_code = $rows[$i][4];
                // $vendor_name = $rows[$i][5];                    
                // $receive_date = $rows[$i][14];
                // $document_no = $rows[$i][15];
                // $invoice_no = $rows[$i][17];    
                // $no_po_sap_urut = $rows[$i][18];
                // $no_po = $rows[$i][19];
                // $category = $rows[$i][20];
                // $item_description = $rows[$i][22];
                // $qty = $rows[$i][25];
                // $uom = $rows[$i][26];
                // $price = $rows[$i][27];
                // $amount = $rows[$i][28];
                // $amount_dollar = $rows[$i][31];
                // $gl_number = $rows[$i][40];
                // $gl_description = $rows[$i][41];
                // $cost_center = $rows[$i][42];
                // $cost_description = $rows[$i][43];
                // $pch_code = $rows[$i][44];

                    $currency  = $rows[$i][30];
                    $vendor_code = $rows[$i][16];
                    $vendor_name = $rows[$i][17];                    
                    $receive_date = $rows[$i][9];
                    $document_no = $rows[$i][2];
                    $reference = $rows[$i][4];
                    $invoice_no = $rows[$i][26];    
                    $no_po_sap = $rows[$i][35];
                    $no_po_sap_urut = $rows[$i][36];
                    $no_po = $rows[$i][47];
                    $category = $rows[$i][13];
                    $item_description = $rows[$i][20];
                    $qty = $rows[$i][33];
                    $uom = $rows[$i][34];
                    $price = $rows[$i][39];
                    $per = $rows[$i][41];
                    $amount = $rows[$i][29];
                    $amount_dollar = $rows[$i][27];
                    $gl_number = $rows[$i][23];
                    $gl_description = $rows[$i][49];
                    $cost_center = $rows[$i][24];
                    $cost_description = $rows[$i][50];
                    $pch_code = $rows[$i][38];

                    $movement_type = $rows[$i][14];

                    $real_price = $price/$per;

                    if($movement_type == "102") {
                        $qty = $qty * -1;
                        $amount = $amount * -1; 
                        $amount_dollar = $amount_dollar * -1;
                    }

                // $no_po_sap = explode("-", trim($no_po_sap_urut));
                        $item_no = substr($item_description,0,7); //get 7 char kode item

                        if($pch_code == "G40" && ($category == "A" || $category == "K")) {

                            $actual = AccActual::where('document_no', $document_no)
                            ->select('document_no')
                            ->first();

                            if (count($actual) == 0) { //kalo insert

                             $data2 = AccActual::create([
                                'currency' => $currency,
                                'vendor_code' => $vendor_code,
                                'vendor_name' => $vendor_name,
                                'receive_date' => $receive_date,
                                'document_no' => $document_no,
                                'reference' => $reference,
                                'invoice_no' => $invoice_no,
                                'no_po_sap' => (int)$no_po_sap,
                                'no_urut' => $no_po_sap_urut,
                                'no_po' => $no_po,
                                'category' => $category,
                                'item_no' => $item_no,
                                'item_description' => $item_description,
                                'qty' => $qty,
                                'uom' => $uom,
                                'price' => $real_price,
                                'amount' => $amount,
                                'amount_dollar' =>  $amount_dollar,
                                'gl_number' => $gl_number,
                                'gl_description' => $gl_description,
                                'cost_center' => $cost_center,
                                'cost_description' => $cost_description,
                                'pch_code' => $pch_code,
                                'created_by' => Auth::id()
                            ]);


                                // 'no_po_sap' => (int)$no_po_sap[0],
                                // 'no_urut' => $no_po_sap[1],

                             $data2->save();

                               //Get PO
                             $po_detail = AccPurchaseOrder::join('acc_purchase_order_details','acc_purchase_orders.no_po','=','acc_purchase_order_details.no_po')
                             ->where('acc_purchase_order_details.no_po', $no_po)
                             ->where('no_item',$item_no)
                             ->first();

                             if (count($po_detail) == 0) {
                                 $po_detail = AccPurchaseOrder::join('acc_purchase_order_details','acc_purchase_orders.no_po','=','acc_purchase_order_details.no_po')
                                 ->where('no_po_sap', (int)$no_po_sap)
                                 ->where('no_item',$item_no)
                                 ->first();
                             }



                             // $total_all = $po_detail->qty_receive + $qty;

                                //Update QTY RECEIVE PO
                             // $update_qty_receive = AccPurchaseOrderDetail::where('no_po','=',$po_detail->no_po)
                             // ->where('no_item','=',$item_no)
                             // ->update(['qty_receive' => $total_all, 'date_receive' => $receive_date]);

                                //get log amount

                             $budget_log = AccBudgetHistory::where('po_number','=',$po_detail->no_po)
                             ->where(DB::raw('SUBSTRING(no_item, 1, 7)'),'=',$item_no)
                             ->where('budget','=',$po_detail->budget_item)
                             ->first();

                             $amount_po = $budget_log->amount_po;
                             $datereceive = $data2->receive_date;
                                //Get Data From Budget Master
                             $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$datereceive'");

                             foreach ($fy as $fys) {
                                $fiscal = $fys->fiscal_year;
                            }

                            $bulan = strtolower(date("M",strtotime($datereceive)));

                            $sisa_bulan = $bulan.'_sisa_budget';

                            if ($budget_log->status != "Actual") {
                                    //get Data Budget Based On Periode Dan Nomor
                                $budgetdata = AccBudget::where('budget_no','=',$po_detail->budget_item)->first();

                                // ->where('periode','=', $fiscal)

                                    //Tambahkan Budget Skrg Dengan PO yang Ada Di Log
                                $totalPlusPO = $budgetdata->$sisa_bulan + $amount_po;

                                $updatebudget = AccBudget::where('budget_no','=',$po_detail->budget_item)
                                ->update([
                                    $sisa_bulan => $totalPlusPO
                                ]);
                            }

                                // get Data Budget Based On Periode Dan Nomor
                            $budgetdata = AccBudget::where('budget_no','=',$po_detail->budget_item)->first();

                                // Kurangi dengan amount_dollar
                            $totalminusreceive = $budgetdata->$sisa_bulan - $amount_dollar;

                                // Setelah itu update data budgetnya dengan yang actual
                            $dataupdate = AccBudget::where('budget_no','=',$po_detail->budget_item)
                            ->update([
                                $sisa_bulan => $totalminusreceive
                            ]);

                               //Update Log Budget
                            $total_budget_ori = $budget_log->amount_original + $amount;
                            $total_budget = $budget_log->amount_receive + $amount_dollar;

                            // $po_detail->no_po

                            $update_budget_log = AccBudgetHistory::where('po_number','=',$po_detail->no_po)
                            ->where(DB::raw('SUBSTRING(no_item, 1, 7)'),'=',$item_no)
                            ->where('budget','=',$po_detail->budget_item)
                            ->update([
                                'budget_month_receive' => strtolower(date("M",strtotime($datereceive))),
                                'currency_original' => $currency,
                                'amount_original' => $total_budget_ori,
                                'amount_receive' => $total_budget,
                                'status' => 'Actual'
                            ]);


                           } else if (count($actual) > 0){ //kalo update


                            $data2 = AccActual::where('document_no','=',$document_no)
                            ->update([
                                'currency' => $currency,
                                'vendor_code' => $vendor_code,
                                'vendor_name' => $vendor_name,
                                'receive_date' => $receive_date,
                                'document_no' => $document_no,
                                'reference' => $reference,
                                'invoice_no' => $invoice_no,
                                'no_po_sap' => (int)$no_po_sap,
                                'no_urut' => $no_po_sap_urut,
                                'no_po' => $no_po,
                                'category' => $category,
                                'item_no' => $item_no,
                                'item_description' => $item_description,
                                'qty' => $qty,
                                'uom' => $uom,
                                'price' => $real_price,
                                'amount' => $amount,
                                'amount_dollar' => $amount_dollar,
                                'gl_number' => $gl_number,
                                'gl_description' => $gl_description,
                                'cost_center' => $cost_center,
                                'cost_description' => $cost_description,
                                'pch_code' => $pch_code,
                                'created_by' => Auth::id()
                            ]);

                           //Get PO
                            // $po_detail = AccPurchaseOrder::join('acc_purchase_order_details','acc_purchase_orders.no_po','=','acc_purchase_order_details.no_po')
                            // ->where('no_po_sap', $no_po_sap[0])
                            // ->where('no_item',$item_no)
                            // ->first();

                            // $data2->currency = $currency;
                            // $data2->vendor_code = $vendor_code;
                            // $data2->vendor_name = $vendor_name;
                            // $data2->receive_date = $receive_date;
                            // $data2->document_no = $document_no;
                            // $data2->invoice_no = $invoice_no;
                            // $data2->no_po_sap = $no_po_sap[0];
                            // $data2->no_urut = $no_po_sap[1];
                            // $data2->no_po = $no_po;
                            // $data2->category = $category;
                            // $data2->item_no = $item_no;
                            // $data2->item_description = $item_description;
                            // $data2->qty = $qty;
                            // $data2->uom = $uom;
                            // $data2->price = $price;
                            // $data2->amount = $amount;
                            // $data2->amount_dollar = $amount_dollar;
                            // $data2->gl_number = $gl_number;
                            // $data2->gl_description = $gl_description;
                            // $data2->cost_center = $cost_center;
                            // $data2->cost_description = $cost_description;
                            // $data2->pch_code = $pch_code;
                            // $data2->created_by = Auth::id();
                            // $data2->save(); 
                        }

                        //GET DATA
                        // $datapo = AccPurchaseOrderDetail::where('no_po','=',$po_detail->no_po)
                        // ->where('no_item','=',$item_no)
                        // ->first();

                        //UPDATE STATUS
                        // if ($datapo->qty_receive >= $datapo->qty) {
                        //     $update_qty_receive = AccPurchaseOrderDetail::where('no_po','=',$po_detail->no_po)
                        //     ->where('no_item','=',$item_no)
                        //     ->update(['status' => 'close']);
                        // }
                    }
                }       

                $response = array(
                    'status' => true,
                    'message' => 'Upload Berhasil',
                );
                return Response::json($response);

            }catch(\Exception $e){
                $response = array(
                    'status' => false,
                    'message' => $e->getMessage(),
                );
                return Response::json($response);
            }
        }else{
            $response = array(
                'status' => false,
                'message' => 'Upload failed, File not found',
            );
            return Response::json($response);
        }
    }


        //==================================//
        //       Monitoring & Display       //
        //==================================//

    public function monitoringPR(){

          // $fys = db::select("select DISTINCT fiscal_year from weekly_calendars");
      $dept = db::select("SELECT department_name as department FROM `departments`");
      $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
      ->select('department')
      ->first();

      return view('accounting_purchasing.display.pr_monitoring',  
        array(
          'title' => 'Purchase Requisition Monitoring & Control', 
          'title_jp' => 'PR監視・管理',
          'department' => $dept,
          'emp_dept' => $emp_dept
      )
    )->with('page', 'Purchase Requisition Control');
  }

  public function fetchMonitoringPR(Request $request)
  {
      $tahun = date('Y');

      $datefrom = $request->get('datefrom');
      $dateto = $request->get('dateto');

      if ($datefrom == "") {
          $datefrom = date('Y-m', strtotime(carbon::now()->subMonth(5)));
      }

      if ($dateto == "") {
          $dateto = date('Y-m', strtotime(carbon::now()));
      }

      $department = $request->get('department');

      if ($department != null) {
          if ($department[0] == "Maintenance Department") {
              array_push($department,"Production Engineering Department");
          }

          else if ($department[0] == "Procurement Department") {
              array_push($department,"Purchasing Control Department");
          }

          else if ($department[0] == "Human Resources Department") {
              array_push($department,"General Affairs Department");
          }

          else if ($department[0] == "Woodwind Instrument - Assembly (WI-A) Department") {
              array_push($department,"Educational Instrument (EI) Department");
          }

          $deptt = json_encode($department);
          $dept = str_replace(array("[","]"),array("(",")"),$deptt);

          $dep = 'and acc_purchase_requisitions.department in '.$dept;
      } else {
          $dep = '';
      }

      $data = db::select("
        SELECT
        count( no_pr ) AS jumlah,
        monthname( submission_date ) AS bulan,
        YEAR ( submission_date ) AS tahun,
        sum( CASE WHEN receive_date IS NULL THEN 1 ELSE 0 END ) AS NotSigned,
        sum( CASE WHEN receive_date IS NOT NULL THEN 1 ELSE 0 END ) AS Signed 
        FROM
        acc_purchase_requisitions 
        WHERE
        acc_purchase_requisitions.deleted_at IS NULL 
        AND DATE_FORMAT( submission_date, '%Y-%m' ) BETWEEN '".$datefrom."' AND '".$dateto."' ".$dep." 
        GROUP BY
        bulan,
        tahun 
        ORDER BY
        tahun,
        MONTH ( submission_date ) ASC
        ");

      // $data_pr_belum_po = db::select("
      //   SELECT
      //   acc_purchase_requisitions.no_pr,
      //   sum( CASE WHEN sudah_po IS NULL THEN 1 ELSE 0 END ) AS belum_po,
      //   sum( CASE WHEN sudah_po IS NOT NULL THEN 1 ELSE 0 END ) AS sudah_po 
      //   FROM
      //   acc_purchase_requisitions
      //   LEFT JOIN acc_purchase_requisition_items ON acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr 
      //   WHERE
      //   acc_purchase_requisitions.deleted_at IS NULL 
      //   AND receive_date IS NOT NULL 
      //   AND DATE_FORMAT( submission_date, '%Y-%m' ) BETWEEN '".$datefrom."' AND '".$dateto."' ".$dep." 
      //   GROUP BY
      //   no_pr 
      //   ORDER BY
      //   submission_date ASC");

      // $data_po_belum_receive = db::select("
      //   SELECT
      //   acc_purchase_requisitions.no_pr,
      //   sum( CASE WHEN acc_purchase_order_details.`status` IS NULL THEN 1 ELSE 0 END ) AS belum_close,
      //   sum( CASE WHEN acc_purchase_order_details.`status` IS NOT NULL THEN 1 ELSE 0 END ) AS sudah_close 
      //   FROM
      //   acc_purchase_requisitions
      //   LEFT JOIN acc_purchase_requisition_items ON acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr 
      //   LEFT JOIN acc_purchase_order_details on acc_purchase_requisition_items.no_pr = acc_purchase_order_details.no_pr and acc_purchase_requisition_items.item_code = acc_purchase_order_details.no_item
      //   WHERE
      //   acc_purchase_requisitions.deleted_at IS NULL 
      //   AND acc_purchase_requisition_items.sudah_po IS NOT NULL 
      //   AND acc_purchase_requisitions.receive_date IS NOT NULL
      //   AND DATE_FORMAT( submission_date, '%Y-%m' ) 
      //   BETWEEN '".$datefrom."' AND '".$dateto."' ".$dep." 
      //   GROUP BY
      //   no_pr 
      //   ORDER BY
      //   submission_date ASC
      //   ");

      $response = array(
        'status' => true,
        'datas' => $data,
        // 'data_pr_belum_po' => $data_pr_belum_po,
        // 'data_po_belum_receive' => $data_po_belum_receive,
        'tahun' => $tahun,
        'datefrom' => $datefrom,
        'dateto' => $dateto,
        'department' => $department
    );

      return Response::json($response); 
  }

  public function fetchMonitoringPROutstanding(Request $request)
  {

      $tahun = date('Y');

      $datefrom = $request->get('datefrom');
      $dateto = $request->get('dateto');

      if ($datefrom == "") {
          $datefrom = date('Y-m', strtotime(carbon::now()->subMonth(11)));
      }

      if ($dateto == "") {
          $dateto = date('Y-m', strtotime(carbon::now()));
      }

      $department = $request->get('department');

      if ($department != null) {

        if ($department[0] == "Maintenance Department") {
          array_push($department,"Production Engineering Department");
      }

      else if ($department[0] == "Procurement Department") {
          array_push($department,"Purchasing Control Department");
      }

      else if ($department[0] == "Human Resources Department") {
          array_push($department,"General Affairs Department");
      }

      else if ($department[0] == "Woodwind Instrument - Assembly (WI-A) Department") {
          array_push($department,"Educational Instrument (EI) Department");
      }

      $deptt = json_encode($department);
      $dept = str_replace(array("[","]"),array("(",")"),$deptt);

      $dep = 'and acc_purchase_requisitions.department in '.$dept;
  } else {
      $dep = '';
  }

  $data = db::select("
    select acc_purchase_requisitions.no_pr,acc_purchase_requisitions.department, sum(case when sudah_po is null then 1 else 0 end) as belum_po, sum(case when sudah_po is not null then 1 else 0 end) as sudah_po from acc_purchase_requisitions left join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.deleted_at is null and receive_date is not null and DATE_FORMAT(submission_date,'%Y-%m') between '".$datefrom."' and '".$dateto."' ".$dep."  GROUP BY no_pr order by submission_date ASC");

  $response = array(
    'status' => true,
    'datas' => $data,
    'tahun' => $tahun,
    'datefrom' => $datefrom,
    'dateto' => $dateto,
    'departement' => $dep
);

  return Response::json($response); 
}

public function monitoringPrPch(){

          // $fys = db::select("select DISTINCT fiscal_year from weekly_calendars");
  $dept = db::select("SELECT department_name as department FROM `departments`");

  return view('accounting_purchasing.display.pr_monitoring_pch',  
    array(
      'title' => 'Purchase Requisition Monitoring & Control', 
      'title_jp' => 'PR監視・管理',
      'department' => $dept
  )
)->with('page', 'Purchase Requisition Control');
}


public function fetchMonitoringPRPch(Request $request){

  $datefrom = date("Y-m-d",  strtotime('-30 days'));
  $dateto = date("Y-m-d");

  $last = AccPurchaseRequisition::whereNull('receive_date')
  ->whereNull('deleted_at')
  ->orderBy('tanggal', 'asc')
  ->select(db::raw('date(submission_date) as tanggal'))
  ->first();

  if(strlen($request->get('datefrom')) > 0){
    $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
}else{
    if($last){
      $tanggal = date_create($last->tanggal);
      $now = date_create(date('Y-m-d'));
      $interval = $now->diff($tanggal);
      $diff = $interval->format('%a%');

      if($diff > 30){
        $datefrom = date('Y-m-d', strtotime($last->tanggal));
    }
}
}


if(strlen($request->get('dateto')) > 0){
    $dateto = date('Y-m-d', strtotime($request->get('dateto')));
}

$department = $request->get('department');

if ($department != null) {
  $deptt = json_encode($department);
  $dept = str_replace(array("[","]"),array("(",")"),$deptt);

  $dep = 'and acc_purchase_requisitions.department in'.$dept;
} else {
  $dep = '';
}

          //per tgl
$data = db::select("
 select date.week_date, coalesce(belum_diterima.total, 0) as jumlah_belum, coalesce(sudah_diterima.total, 0) as jumlah_sudah from 
 (select week_date from weekly_calendars 
 where date(week_date) >= '".$datefrom."'
 and date(week_date) <= '".$dateto."') date
 left join
 (select date(submission_date) as date, count(id) as total from acc_purchase_requisitions
 where date(submission_date) >= '".$datefrom."' and date(submission_date) <= '".$dateto."' and acc_purchase_requisitions.deleted_at is null and receive_date is null  ".$dep."
 group by date(submission_date)) belum_diterima
 on date.week_date = belum_diterima.date
 left join
 (select date(submission_date) as date, count(id) as total from acc_purchase_requisitions
 where date(submission_date) >= '".$datefrom."' and date(submission_date) <= '".$dateto."' and acc_purchase_requisitions.deleted_at is null and receive_date is not null ".$dep."
 group by date(submission_date)) sudah_diterima
 on date.week_date = sudah_diterima.date
 order by week_date asc");

          //per department
$data_dept = db::select("
    select dept.department, coalesce(pr.total, 0) as jumlah_dept from 
    (select distinct department from employee_syncs where department is not null) dept
    left join
    (select department, count(id) as total from acc_purchase_requisitions
    where acc_purchase_requisitions.deleted_at is null 
    group by department) pr
    on dept.department = pr.department
    order by department asc");

$data_pr_belum_po = db::select("
    select acc_purchase_requisitions.no_pr, sum(case when sudah_po is null then 1 else 0 end) as belum_po, sum(case when sudah_po is not null then 1 else 0 end) as sudah_po from acc_purchase_requisitions left join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.deleted_at is null and receive_date is not null and suspend is null ".$dep."  GROUP BY no_pr order by submission_date asc");

$data_suspend = db::select("
    select acc_purchase_requisitions.no_pr, sum(case when sudah_po is null then 1 else 0 end) as belum_po, sum(case when sudah_po is not null then 1 else 0 end) as sudah_po from acc_purchase_requisitions left join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.deleted_at is null and receive_date is not null and suspend is not null ".$dep."  GROUP BY no_pr order by submission_date asc");

$data_investment_belum_po = db::select("
    SELECT
    acc_investments.reff_number,
    sum( CASE WHEN sudah_po IS NULL THEN 1 ELSE 0 END ) AS belum_po,
    sum( CASE WHEN sudah_po IS NOT NULL THEN 1 ELSE 0 END ) AS sudah_po 
    FROM
    acc_investments
    LEFT JOIN acc_investment_details ON acc_investments.reff_number = acc_investment_details.reff_number 
    WHERE
    acc_investments.deleted_at IS NULL
    AND posisi = 'finished' 
    GROUP BY
    reff_number 
    ORDER BY
    submission_date ASC
    ");

$year = date('Y');

$response = array(
    'status' => true,
    'datas' => $data,
    'data_dept' => $data_dept,
    'data_pr_belum_po' => $data_pr_belum_po,
    'data_suspend' => $data_suspend,
    'data_investment_belum_po' => $data_investment_belum_po,
    'year' => $year
);

return Response::json($response);
}

public function fetchtablePR(Request $request)
{
  $datefrom = $request->get('datefrom');
  $dateto = $request->get('dateto');

  if ($datefrom == "") {
      $datefrom = date('Y-m', strtotime(carbon::now()->subMonth(5)));
  }

  if ($dateto == "") {
      $dateto = date('Y-m', strtotime(carbon::now()));
  }

  $department = $request->get('department');

  if ($department != null) {

      if ($department[0] == "Maintenance Department") {
          array_push($department,"Production Engineering Department");
      }

      else if ($department[0] == "Procurement Department") {
          array_push($department,"Purchasing Control Department");
      }

      else if ($department[0] == "Human Resources Department") {
          array_push($department,"General Affairs Department");
      }
      
      else if ($department[0] == "Woodwind Instrument - Assembly (WI-A) Department") {
          array_push($department,"Educational Instrument (EI) Department");
      }

      $deptt = json_encode($department);
      $dept = str_replace(array("[","]"),array("(",")"),$deptt);

      $dep = 'and acc_purchase_requisitions.department in'.$dept;
  } else {
      $dep = '';
  }


  $data = db::select("
    SELECT
    acc_purchase_requisitions.id,
    no_pr,
    emp_id,
    emp_name,
    department_shortname,
    section,
    no_budget,
    submission_date,
    po_due_date,
    receive_date,
    file,
    posisi,
    `status`,
    staff,
    manager,
    manager_name,
    ( SELECT `name` FROM employee_syncs WHERE employee_id = dgm ) AS dgm,
    ( SELECT `name` FROM employee_syncs WHERE employee_id = gm ) AS gm,
    approvalm,
    dateapprovalm,
    approvaldgm,
    dateapprovaldgm,
    approvalgm,
    dateapprovalgm,
    alasan,
    datereject 
    FROM
    acc_purchase_requisitions
    JOIN departments ON acc_purchase_requisitions.department = department_name 
    WHERE
    acc_purchase_requisitions.STATUS != 'received' 
    AND posisi != 'user'
    AND acc_purchase_requisitions.deleted_at IS NULL 
    AND DATE_FORMAT( submission_date, '%Y-%m' ) BETWEEN '".$datefrom."' 
    AND '".$dateto."' ".$dep." 
    ORDER BY submission_date ASC");


  // $data_pr_belum_po = db::select("
  //   SELECT 
  //   acc_purchase_requisitions.no_pr,
  //   departments.department_shortname,
  //   acc_purchase_requisition_items.item_code,
  //   acc_purchase_requisition_items.item_desc,
  //   acc_purchase_requisition_items.item_request_date 
  //   FROM
  //   acc_purchase_requisitions
  //   LEFT JOIN acc_purchase_requisition_items ON acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr
  //   JOIN departments ON acc_purchase_requisitions.department = departments.department_name 
  //   WHERE
  //   acc_purchase_requisitions.deleted_at IS NULL 
  //   AND receive_date IS NOT NULL 
  //   AND sudah_po IS NULL 
  //   AND DATE_FORMAT( submission_date, '%Y-%m' ) BETWEEN '".$datefrom."' 
  //   AND '".$dateto."' ".$dep." 
  //   ORDER BY submission_date ASC");


  // $data_po_belum_receive = db::select("
  //   SELECT DISTINCT
  //   acc_purchase_requisitions.no_pr, 
  //   departments.department_shortname,
  //   acc_purchase_orders.no_po,
  //   acc_purchase_orders.tgl_po,
  //   acc_purchase_orders.supplier_name,
  //   acc_purchase_order_details.nama_item,
  //   IF(acc_purchase_orders.posisi = 'pch', 'PO Terkirim', 'PO Approval') as status_po
  //   FROM acc_purchase_orders
  //   LEFT JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
  //   LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
  //   LEFT JOIN acc_purchase_requisition_items ON acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr
  //   JOIN departments ON acc_purchase_requisitions.department = departments.department_name 
  //   WHERE
  //   acc_purchase_requisitions.deleted_at IS NULL 
  //   AND acc_purchase_requisitions.receive_date IS NOT NULL
  //   AND acc_purchase_requisition_items.sudah_po IS NOT NULL 
  //   AND acc_purchase_orders.deleted_at IS NULL
  //   AND acc_purchase_order_details.`status` IS NULL 
  //   AND DATE_FORMAT( tgl_po, '%Y-%m' ) BETWEEN '".$datefrom."' AND '".$dateto."' 
  //   ".$dep." 
  //   ORDER BY
  //   tgl_po ASC ");

  $response = array(
    'status' => true,
    'datas' => $data
    // 'data_pr_belum_po' => $data_pr_belum_po
);

  return Response::json($response); 
}

public function fetchtablePRPch(Request $request)
{
  $datefrom = $request->get('datefrom');
  $dateto = $request->get('dateto');

  if ($datefrom == "") {
      $datefrom = date('Y-m', strtotime(carbon::now()->subMonth(11)));
  }

  if ($dateto == "") {
      $dateto = date('Y-m', strtotime(carbon::now()));
  }

  $department = $request->get('department');

  if ($department != null) {
      $deptt = json_encode($department);
      $dept = str_replace(array("[","]"),array("(",")"),$deptt);

      $dep = 'and acc_purchase_requisitions.department in'.$dept;
  } else {
      $dep = '';
  }


  $data = db::select("select id, no_pr, emp_id, emp_name, department, section, no_budget, submission_date, po_due_date, receive_date, file, posisi, `status`, staff, manager, manager_name, (select `name` from employee_syncs where employee_id = dgm) as dgm, (select `name` from employee_syncs where employee_id = gm) as gm , approvalm, dateapprovalm, approvaldgm, dateapprovaldgm, approvalgm, dateapprovalgm, alasan, datereject from acc_purchase_requisitions where acc_purchase_requisitions.status = 'approval_acc' and acc_purchase_requisitions.deleted_at is null and DATE_FORMAT(submission_date,'%Y-%m') between '".$datefrom."' and '".$dateto."' ".$dep." order by dateapprovalgm asc");

  $data_investment = db::select("
    select * from acc_investments where acc_investments.posisi = 'finished' and acc_investments.receive_date is null and acc_investments.deleted_at is null and DATE_FORMAT(submission_date,'%Y-%m') between '".$datefrom."' and '".$dateto."' order by submission_date asc");

  $data_pr_belum_po = db::select("select acc_purchase_requisitions.no_pr,acc_purchase_requisitions.receive_date, acc_purchase_requisitions.department, acc_purchase_requisition_items.item_code, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.item_request_date from acc_purchase_requisitions left join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.deleted_at is null and receive_date is not null and sudah_po is null and suspend is null and DATE_FORMAT(submission_date,'%Y-%m') between '".$datefrom."' and '".$dateto."' ".$dep." order by submission_date ASC");

  $data_suspend = db::select("select acc_purchase_requisitions.no_pr,acc_purchase_requisitions.receive_date, acc_purchase_requisitions.department, acc_purchase_requisition_items.item_code, acc_purchase_requisition_items.item_desc, acc_purchase_requisition_items.item_request_date from acc_purchase_requisitions left join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr where acc_purchase_requisitions.deleted_at is null and receive_date is not null and sudah_po is null and suspend is not null and DATE_FORMAT(submission_date,'%Y-%m') between '".$datefrom."' and '".$dateto."' ".$dep." order by submission_date ASC");

  $response = array(
    'status' => true,
    'datas' => $data,
    'data_pr_belum_po' => $data_pr_belum_po,
    'data_suspend' => $data_suspend,
    'data_investment' => $data_investment
);

  return Response::json($response); 
}

public function detailMonitoringPR(Request $request){

  $bulan = $request->get("bulan");
  $status = $request->get("status");
  $tglfrom = $request->get("tglfrom");
  $tglto = $request->get("status");
  $department = $request->get("department");

  $status_sign = "";

  if ($status == "Sign Not Completed") {
      $status_sign = "and receive_date is null";
  }
  else if ($status == "Sign Completed") {
      $status_sign = "and receive_date is not null";
  }


  if ($department != null) {
      $deptt = json_encode($department);
      $dept = str_replace(array("[","]"),array("(",")"),$deptt);
      $dep = 'and acc_purchase_requisitions.department in'.$dept;
  } else {
      $dep = '';
  }


  $pr = DB::select("
    SELECT
            * 
    FROM
    acc_purchase_requisitions 
    WHERE
    deleted_at IS NULL 
    AND monthname( submission_date ) = '".$bulan."' 
    AND DATE_FORMAT( submission_date, '%Y-%m' ) BETWEEN '".$tglfrom."' 
    AND '".$tglto."' ".$dep." ".$status_sign."
    ");

  return DataTables::of($pr)
  ->editColumn('submission_date', function ($pr)
  {
    return $pr->submission_date;
})
  ->editColumn('note', function ($pr)
  {
    $note = "";
    if ($pr->note != null)
    {
        $note = $pr->note;
    }
    else
    {
        $note = '-';
    }

    return $note;
})
  ->editColumn('status', function ($pr)
  {
    $id = $pr->id;

    if ($pr->status == "approval")
    {
        return '<label class="label label-warning">Approval</a>';
    }
    else if ($pr->status == "approval_acc")
    {
        return '<label class="label label-info">Diverifikasi Purchasing</a>';
    }
    else if ($pr->status == "received")
    {
        return '<label class="label label-success">Diterima Purchasing</a>';
    }

})
  ->addColumn('action', function ($pr)
  {
    $id = $pr->id;

                // <a href="purchase_requisition/detail/' . $id . '" class="btn btn-info btn-xs" data-toggle="tooltip" title="Detail PR"><i class="fa fa-eye"></i></a>

    if($pr->status == "approval"){
        return '
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        ';
    }
    else{
        return '
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        ';
    }


})
  ->editColumn('file', function ($pr)
  {

    $data = json_decode($pr->file);

    $fl = "";

    if ($pr->file != null)
    {
        for ($i = 0;$i < count($data);$i++)
        {
            $fl .= '<a href="../files/pr/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
        }
    }
    else
    {
        $fl = '-';
    }

    return $fl;
})
  ->rawColumns(['status' => 'status', 'action' => 'action', 'file' => 'file'])
  ->make(true);
}

public function detailMonitoringPRPch(Request $request){

  $tanggal = $request->get("tanggal");
  $status = $request->get("status");
  $tglfrom = $request->get("tglfrom");
  $tglto = $request->get("status");
  $department = $request->get("department");

  $status_sign = "";

  if ($status == "PR Incompleted") {
      $status_sign = "and receive_date is null";
  }
  else if ($status == "PR Completed") {
      $status_sign = "and receive_date is not null";
  }

  $qry = "SELECT  * FROM acc_purchase_requisitions WHERE deleted_at IS NULL and submission_date = '".$tanggal."' and DATE_FORMAT(submission_date,'%Y-%m') between '".$tglfrom."' and '".$tglto."' ".$department." ".$status_sign." ";

  $pr = DB::select($qry);

  return DataTables::of($pr)
  ->editColumn('submission_date', function ($pr)
  {
    return $pr->submission_date;
})
  ->editColumn('note', function ($pr)
  {
    $note = "";
    if ($pr->note != null)
    {
        $note = $pr->note;
    }
    else
    {
        $note = '-';
    }

    return $note;
})
  ->editColumn('status', function ($pr)
  {
    $id = $pr->id;

    if ($pr->status == "approval")
    {
        return '<label class="label label-warning">Approval</a>';
    }
    else if ($pr->status == "approval_acc")
    {
        return '<label class="label label-info">Diverifikasi Purchasing</a>';
    }
    else if ($pr->status == "received")
    {
        return '<label class="label label-success">Diterima Purchasing</a>';
    }

})
  ->addColumn('action', function ($pr)
  {
    $id = $pr->id;

                // <a href="purchase_requisition/detail/' . $id . '" class="btn btn-info btn-xs" data-toggle="tooltip" title="Detail PR"><i class="fa fa-eye"></i></a>

    if($pr->status == "approval"){
        return '
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        ';
    }
    else{
        return '
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        ';
    }


})
  ->editColumn('file', function ($pr)
  {

    $data = json_decode($pr->file);

    $fl = "";

    if ($pr->file != null)
    {
        for ($i = 0;$i < count($data);$i++)
        {
            $fl .= '<a href="../files/pr/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
        }
    }
    else
    {
        $fl = '-';
    }

    return $fl;
})
  ->rawColumns(['status' => 'status', 'action' => 'action', 'file' => 'file'])
  ->make(true);
}

public function detailMonitoringPRPO(Request $request){

    $pr = $request->get("pr");
    $status = $request->get("status");
    $tglfrom = $request->get("tglfrom");
    $tglto = $request->get("status");
    $department = $request->get("department");

    $status_sign = "";

    if ($status == "Belum PO") {
        $status_sign = "and sudah_po is null";
    }
    else if ($status == "Sudah PO") {
        $status_sign = "and sudah_po is not null";
    }


    if ($department != null) {
      $deptt = json_encode($department);
      $dept = str_replace(array("[","]"),array("(",")"),$deptt);
      $dep = 'and acc_purchase_requisitions.department in'.$dept;
  } else {
      $dep = '';
  }


  $qry = "SELECT acc_purchase_requisitions.submission_date, acc_purchase_requisition_items.*, (select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order, (select supplier_name from acc_purchase_order_details join acc_purchase_orders on acc_purchase_orders.no_po = acc_purchase_order_details.no_po where acc_purchase_order_details.no_item = acc_purchase_requisition_items.item_code ORDER BY acc_purchase_order_details.created_at desc limit 1) as last_vendor, quotation, date_quotation, IFNULL(TIMESTAMPDIFF( MONTH, date_quotation, now()), '') AS diff from acc_purchase_requisitions left join acc_purchase_requisition_items on acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr left join acc_items on acc_items.kode_item = acc_purchase_requisition_items.item_code WHERE acc_purchase_requisition_items.deleted_at is NULL and acc_purchase_requisitions.no_pr = '".$pr."' and DATE_FORMAT(submission_date,'%Y-%m') between '".$tglfrom."' and '".$tglto."' ".$dep." ".$status_sign." ";

  $pr = DB::select($qry);

  return DataTables::of($pr)
  ->editColumn('item_request_date', function ($pr)
  {
    return date('d-M-Y', strtotime($pr->item_request_date)) ;
})
  ->editColumn('item_qty', function ($pr)
  {
    return $pr->item_qty.' '.$pr->item_uom;
})
  ->editColumn('item_price', function ($pr)
  {
    return number_format($pr->item_price,0,",",".");
})
  ->editColumn('item_amount', function ($pr)
  {
    return number_format($pr->item_amount,0,",",".");
})
  ->editColumn('last_order', function ($pr)
  {
    if ($pr->last_order != null) {
        return date('d-M-Y', strtotime($pr->last_order)) ;
    }
    else{
        return '-';
    }
})

  ->editColumn('last_vendor', function ($pr)
  {
    if ($pr->last_vendor != null) {
        return $pr->last_vendor;
    }
    else{
        return '-';
    }
})

  ->editColumn('quotation', function ($pr)
  {
    if ($pr->quotation != null) {

        $quote = "";

        $all_quotation = explode(",", $pr->quotation);

        for ($i=0; $i < count($all_quotation); $i++) { 
            $quote .= '<a href="../files/quotation/' . $all_quotation[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
        }

        $quote .= '<br><input type="file" id="'.$pr->item_code.'" multiple="" class="file_'.$pr->item_code.'" style="width:100%">';

        return $quote;
    }
    else{
        if ($pr->item_code != null) {
            return '<input type="file" id="'.$pr->item_code.'" multiple="" class="file_'.$pr->item_code.'" style="width:100%">';
        }
        else{
            return '-';
        }
    }
})

  ->editColumn('date_quotation', function ($pr)
  {
    if ($pr->date_quotation != null) {
        return date('d-M-Y', strtotime($pr->date_quotation)) ;
    }
    else{
        return '-';
    }
})

  ->editColumn('diff', function ($pr)
  {
    if ($pr->diff != "" || $pr->diff != null) {
        return $pr->diff.' Month';
    }else{
        return '-';
    }
})

  ->addColumn('action', function ($pr)
  {
    if ($pr->item_code != null) {
        return '
        <button class="btn btn-xs btn-success" data-toggle="tooltip" title="Save" style="margin-right:5px;"  onclick="save_quotation(\''.$pr->item_code.'\')"><i class="fa fa-save"></i></button>
        ';
    }
})


  ->rawColumns(['action' => 'action','quotation' => 'quotation'])
  ->make(true);
}

public function detailMonitoringPRActual(Request $request){

    $pr = $request->get("pr");
    $status = $request->get("status");
    $tglfrom = $request->get("tglfrom");
    $tglto = $request->get("status");
    $department = $request->get("department");


    $status_sign = "";

    if ($status == "Belum Datang") {
        $status_sign = "and acc_purchase_order_details.`status` is null";
    }
    else if ($status == "Sudah Datang") {
        $status_sign = "and acc_purchase_order_details.`status` is not null";
    }

    if ($department != null) {
      $deptt = json_encode($department);
      $dept = str_replace(array("[","]"),array("(",")"),$deptt);
      $dep = 'and acc_purchase_requisitions.department in'.$dept;
  } else {
      $dep = '';
  }



  $practual = DB::select("
    SELECT acc_purchase_orders.*, acc_purchase_order_details.*, acc_purchase_requisitions.department FROM acc_purchase_orders
    LEFT JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
    LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
    WHERE
    acc_purchase_orders.deleted_at IS NULL
    AND acc_purchase_order_details.no_pr = '".$pr."'
    AND DATE_FORMAT( submission_date, '%Y-%m' ) BETWEEN '".$tglfrom."' 
    AND '".$tglto."' ".$dep." ".$status_sign."
    ");

  return DataTables::of($practual)

  ->editColumn('tgl_po', function ($practual)
  {
    return $practual->tgl_po;
})
  ->editColumn('status', function ($practual)
  {
    if ($practual->status == null) {
        return '<span class="label label-danger">Belum Close</span>';
    }
    else if ($practual->status != null) {
        return '<span class="label label-success">Sudah Close</span>';
    }

})
  ->rawColumns(['status' => 'status'])
  ->make(true);
}

public function post_quotation(Request $request)
{
    try {
        $id_user = Auth::id();
        $tujuan_upload = 'files/quotation';
        $arr_file = [];

        for ($i=0; $i < $request->input('jumlah'); $i++) { 
          $file = $request->file('file_datas_'.$i);
          $nama = $file->getClientOriginalName();

          $filename = pathinfo($nama, PATHINFO_FILENAME);
          $extension = pathinfo($nama, PATHINFO_EXTENSION);

          $filename = md5($filename.date('YmdHisa')).'.'.$extension;

          $file->move($tujuan_upload,$filename);

          array_push($arr_file, $filename);
      }

      $update_quot = Accitem::where('kode_item','=',$request->input('item_code'))
      ->update([
        'quotation' => implode(',',$arr_file),
        'date_quotation' => date('Y-m-d')
    ]);

      $response = array(
        'status' => true,
    );
      return Response::json($response);
  } 

  catch (\Exception $e) {
    $response = array(
        'status' => false,
        'message' => $e->getMessage()
    );
    return Response::json($response);
}
}

public function monitoringPO(){

    return view('accounting_purchasing.display.po_monitoring',  
        array(
          'title' => 'Purchase Order Monitoring', 
          'title_jp' => 'PO管理',
      )
    )->with('page', 'Purchase Order Monitoring');
}

public function fetchMonitoringPO(Request $request){

  $datefrom = date("Y-m-d",  strtotime('-30 days'));
  $dateto = date("Y-m-d");

  $last = AccPurchaseOrder::where('status','=','pch')
  ->orderBy('tanggal', 'asc')
  ->select(db::raw('date(tgl_po) as tanggal'))
  ->first();

  if(strlen($request->get('datefrom')) > 0){
    $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
}
else{
    if($last){
      $tanggal = date_create($last->tanggal);
      $now = date_create(date('Y-m-d'));
      $interval = $now->diff($tanggal);
      $diff = $interval->format('%a%');

      if($diff > 30){
        $datefrom = date('Y-m-d', strtotime($last->tanggal));
    }
}
}


if(strlen($request->get('dateto')) > 0){
    $dateto = date('Y-m-d', strtotime($request->get('dateto')));
}

          //per tgl
$data = db::select("
    select date.week_date, coalesce(belum_diterima.total, 0) as jumlah_belum, coalesce(sudah_diterima.total, 0) as jumlah_sudah from 
    (select week_date from weekly_calendars 
    where date(week_date) >= '".$datefrom."'
    and date(week_date) <= '".$dateto."') date
    join
    (select date(tgl_po) as date, count(id) as total from acc_purchase_orders
    where date(tgl_po) >= '".$datefrom."' and date(tgl_po) <= '".$dateto."' and acc_purchase_orders.deleted_at is null and posisi = 'pch' and (`status` = 'sap' or `status` = 'not_sap')
    group by date(tgl_po)) sudah_diterima
    on date.week_date = sudah_diterima.date
    left join
    (select date(tgl_po) as date, count(id) as total from acc_purchase_orders
    where date(tgl_po) >= '".$datefrom."' and date(tgl_po) <= '".$dateto."' and acc_purchase_orders.deleted_at is null and `status` != 'sap'
    group by date(tgl_po)) belum_diterima
    on date.week_date = belum_diterima.date
    order by week_date asc
    ");

$year = date('Y');

$response = array(
    'status' => true,
    'datas' => $data,
    'year' => $year
);

return Response::json($response);
}

public function detailMonitoringPO(Request $request){

  $tanggal = $request->get("tanggal");
  $status = $request->get("status");
  $tglfrom = $request->get("tglfrom");
  $tglto = $request->get("tglto");


  $status_sign = "";

  if ($status == "PO Incompleted") {
      $status_sign = "and status != 'sap'";
  }
  else if ($status == "PO Completed") {
      $status_sign = "and posisi = 'pch' and status = 'sap'";
  }


  $qry = "SELECT * FROM acc_purchase_orders WHERE deleted_at IS NULL and DATE_FORMAT(tgl_po,'%Y-%m-%d') = '".$tanggal."' ".$status_sign." order by id DESC";
  $po = DB::select($qry);

  return DataTables::of($po)

  ->editColumn('tgl_po', function ($po)
  {
    return date('Y-m-d', strtotime($po->tgl_po));
})

  ->editColumn('no_po_sap', function ($po)
  {
    $id = $po->id;

    $po_sap = "";
    if ($po->no_po_sap == null && $po->status == "not_sap")
    {
        $po_sap = '<a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-md" onClick="editSAP(' . $id . ')"><i class="fa fa-edit"></i> NO PO SAP</a>';
    }
    else if ($po->no_po_sap != null){
        $po_sap = $po->no_po_sap;   
    }
    else
    {
        $po_sap = '-';
    }

    return $po_sap;
})

  ->editColumn('status', function ($po)
  {
    $id = $po->id;

    if ($po->posisi == "staff_pch")
    {
        return '<label class="label label-danger">Staff Purchasing</label>';
    }

    else if ($po->posisi == "manager_pch")
    {
        return '<label class="label label-warning">Diverifikasi Manager</label>';
    }

    else if ($po->posisi == "dgm_pch")
    {
        return '<label class="label label-primary">Diverifikasi GM Support</label>';
    }

    else if ($po->posisi == "gm_pch")
    {
        return '<label class="label label-primary">Diverifikasi GM</label>';
    }

    else if ($po->posisi == "pch")
    {
        return '<label class="label label-success">Sudah Diverifikasi</label>';
    }

})
  ->addColumn('action', function ($po)
  {
    $id = $po->id;
    if ($po->posisi == "staff_pch") {
        return '
        <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        <button class="btn btn-xs btn-success" data-toggle="tooltip" title="Send Email" style="margin-right:5px;"  onclick="sendEmail(' . $id .')"><i class="fa fa-envelope"></i> Send Email</button>
        ';
    }

    else if ($po->posisi == "pch") {
        return '
        <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"> Report</i></a>
        ';
    }

    else{
        return '
        <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        <label class="label label-success">Email Sudah Dikirim</label>
        ';   
    }
})
  ->rawColumns(['status' => 'status', 'action' => 'action', 'no_po_sap' => 'no_po_sap'])
  ->make(true);
}

public function fetchtablePO(Request $request)
{
  $datefrom = $request->get('datefrom');
  $dateto = $request->get('dateto');

  if ($datefrom == "") {
      $datefrom = date('Y-m-d', strtotime(carbon::now()->subMonth(11)));
  }

  if ($dateto == "") {
      $dateto = date('Y-m-d', strtotime(carbon::now()));
  }

  $data = db::select("

    SELECT
    t1.*,IF(t1.goods_price != 0,sum( t1.goods_price * t1.qty ),sum( t1.service_price * t1.qty )) AS amount 
    FROM
    (
        SELECT
        acc_purchase_orders.*,
        date(acc_purchase_orders.tgl_po) as po_date,
        acc_purchase_order_details.budget_item,
        acc_purchase_order_details.goods_price,
        acc_purchase_order_details.service_price,
        acc_purchase_order_details.qty 
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po 
        WHERE
        acc_purchase_orders.`status` != 'sap' 
        AND acc_purchase_orders.deleted_at IS NULL 
        AND DATE_FORMAT( tgl_po, '%Y-%m-%d' ) BETWEEN  '".$datefrom."' AND '".$dateto."' 
        ORDER BY
        tgl_po ASC 
        ) t1
        GROUP BY t1.no_po");

          //select id, remark, no_po, no_po_sap, DATE_FORMAT(tgl_po,'%Y-%m-%d'),supplier_code, supplier_name, supplier_status, buyer_id, buyer_name, authorized2, authorized2_name, approval_authorized2, date_approval_authorized2, authorized3, authorized3_name, date_approval_authorized3, approval_authorized3, authorized4, authorized4_name, date_approval_authorized4, approval_authorized4, reject, datereject, posisi, `status` from acc_purchase_orders where acc_purchase_orders.`status` != 'sap' and acc_purchase_orders.deleted_at is null and DATE_FORMAT(tgl_po,'%Y-%m-%d') between '2020-08-01' and '2020-09-01'  order by tgl_po asc

    $response = array(
        'status' => true,
        'datas' => $data
    );

    return Response::json($response); 
}

public function investmentControl(){

    $dept = db::select("SELECT department_name as department FROM `departments`");
    $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('department')
    ->first();

    return view('accounting_purchasing.display.investment_control',  
        array(
          'title' => 'Investment Monitoring & Control', 
          'title_jp' => '投資監視・管理',
          'emp_dept' => $emp_dept,
          'department' => $dept
      )
    )->with('page', 'Investment Control');

}

public function fetchInvestmentControl(Request $request){

  $datefrom = date("Y-m-d",  strtotime('-30 days'));
  $dateto = date("Y-m-d");

  $last = AccInvestment::where('posisi','<>','finished')
  ->orderBy('tanggal', 'asc')
  ->select(db::raw('date(submission_date) as tanggal'))
  ->first();

  if(strlen($request->get('datefrom')) > 0){
    $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
}
else{
    if($last){
      $tanggal = date_create($last->tanggal);
      $now = date_create(date('Y-m-d'));
      $interval = $now->diff($tanggal);
      $diff = $interval->format('%a%');

      if($diff > 30){
        $datefrom = date('Y-m-d', strtotime($last->tanggal));
    }
}
}


if(strlen($request->get('dateto')) > 0){
    $dateto = date('Y-m-d', strtotime($request->get('dateto')));
}

$department = $request->get('department');

if ($department != null) {

  if ($department[0] == "Maintenance Department") {
      array_push($department,"Production Engineering Department");
  }

  else if ($department[0] == "Procurement Department") {
      array_push($department,"Purchasing Control Department");
  }

  else if ($department[0] == "Human Resources Department") {
      array_push($department,"General Affairs Department");
  }
  
  else if ($department[0] == "Woodwind Instrument - Assembly (WI-A) Department") {
      array_push($department,"Educational Instrument (EI) Department");
  }

  $deptt = json_encode($department);
  $dept = str_replace(array("[","]"),array("(",")"),$deptt);

  $dep = 'and acc_investments.applicant_department in '.$dept;
} else {
  $dep = '';
}

          //per tgl
$data = db::select("
 SELECT
 date2.week_date,
 date2.week_name,
 sum( date2.not_finish ) AS undone,
 sum( date2.finish ) done 
 FROM
 (
     SELECT
     date.week_date,
     date.week_name,
     COALESCE ( not_finish.total, 0 ) AS not_finish,
     COALESCE ( finish.total, 0 ) AS finish 
     FROM
     ( SELECT week_date, week_name FROM weekly_calendars WHERE date( week_date ) >= '".$datefrom."' AND date( week_date ) <= '".$dateto."' ) date
         LEFT JOIN (
         SELECT
         date( submission_date ) AS date,
         count( id ) AS total 
         FROM
         acc_investments 
         WHERE
         date( submission_date ) >= '".$datefrom."' 
         AND date( submission_date ) <= '".$dateto."' ".$dep." 
         AND acc_investments.deleted_at IS NULL 
         AND posisi = 'finished' 
         GROUP BY
         date( submission_date )) finish ON date.week_date = finish.date
     LEFT JOIN (
         SELECT
         date( submission_date ) AS date,
         count( id ) AS total 
         FROM
         acc_investments 
         WHERE
         date( submission_date ) >= '".$datefrom."' 
         AND date( submission_date ) <= '".$dateto."' ".$dep." 
         AND acc_investments.deleted_at IS NULL 
         AND `posisi` != 'finished' 
         GROUP BY
         date( submission_date )) not_finish ON date.week_date = not_finish.date 
     ORDER BY
     week_date ASC 
     ) date2 
 GROUP BY
 date2.week_name       
 ORDER BY week_date ASC   
 ");

// $data_investment_belum_po = db::select("
//     SELECT
//     acc_investments.reff_number,
//     sum( CASE WHEN sudah_po IS NULL THEN 1 ELSE 0 END ) AS belum_po,
//     sum( CASE WHEN sudah_po IS NOT NULL THEN 1 ELSE 0 END ) AS sudah_po 
//     FROM
//     acc_investments
//     LEFT JOIN acc_investment_details ON acc_investments.reff_number = acc_investment_details.reff_number 
//     WHERE
//     acc_investments.deleted_at IS NULL
//     AND posisi = 'finished' 
//     ".$dep." 
//     GROUP BY
//     reff_number 
//     ORDER BY
//     submission_date ASC
//     ");

// $data_investment_belum_receive = db::select("
//     SELECT
//     acc_investments.reff_number,
//     sum( CASE WHEN acc_purchase_order_details.`status` IS NULL THEN 1 ELSE 0 END ) AS belum_close,
//     sum( CASE WHEN acc_purchase_order_details.`status` IS NOT NULL THEN 1 ELSE 0 END ) AS sudah_close 
//     FROM
//     acc_investments
//     LEFT JOIN acc_investment_details ON acc_investments.reff_number = acc_investment_details.reff_number 
//     LEFT JOIN acc_purchase_order_details on acc_investment_details.reff_number = acc_purchase_order_details.no_pr 
//     and acc_investment_details.no_item = acc_purchase_order_details.no_item
//     WHERE
//     acc_investments.deleted_at IS NULL 
//     AND acc_investment_details.sudah_po IS NOT NULL 
//     AND acc_investments.receive_date IS NOT NULL
//     ".$dep." 
//     GROUP BY
//     reff_number 
//     ORDER BY
//     submission_date ASC
//     ");

$year = date('Y');

$response = array(
    'status' => true,
    'datas' => $data,
    'year' => $year,
    'department' => $dep
    // 'data_investment_belum_po' => $data_investment_belum_po
    // 'data_investment_belum_receive' => $data_investment_belum_receive
);

return Response::json($response);
}



public function fetchtableinv(Request $request)
{
  $datefrom = date("Y-m-d",  strtotime('-30 days'));
  $dateto = date("Y-m-d");

  $last = AccInvestment::where('posisi','!=','finished')
  ->orderBy('tanggal', 'asc')
  ->select(db::raw('date(submission_date) as tanggal'))
  ->first();

  if(strlen($request->get('datefrom')) > 0){
    $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
}else{
    if($last){
      $tanggal = date_create($last->tanggal);
      $now = date_create(date('Y-m-d'));
      $interval = $now->diff($tanggal);
      $diff = $interval->format('%a%');

      if($diff > 30){
        $datefrom = date('Y-m-d', strtotime($last->tanggal));
    }
}
}


if(strlen($request->get('dateto')) > 0){
    $dateto = date('Y-m-d', strtotime($request->get('dateto')));
}


$department = $request->get('department');

if ($department != null) {

    if ($department[0] == "Maintenance Department") {
      array_push($department,"Production Engineering Department");
  }

  else if ($department[0] == "Procurement Department") {
      array_push($department,"Purchasing Control Department");
  }

  else if ($department[0] == "Human Resources Department") {
      array_push($department,"General Affairs Department");
  }

  else if ($department[0] == "Woodwind Instrument - Assembly (WI-A) Department") {
      array_push($department,"Educational Instrument (EI) Department");
  }

  $deptt = json_encode($department);
  $dept = str_replace(array("[","]"),array("(",")"),$deptt);

  $dep = 'and acc_investments.applicant_department in'.$dept;
} else {
  $dep = '';
}

$data = db::select("
    SELECT 
    acc_investments.*, departments.department_shortname
    FROM
    acc_investments
    JOIN 
    departments
    on acc_investments.applicant_department = departments.department_name
    WHERE
    acc_investments.`posisi` != 'finished' 
    AND acc_investments.deleted_at IS NULL 
    AND DATE_FORMAT( submission_date, '%Y-%m-%d' ) BETWEEN '".$datefrom."' 
    AND '".$dateto."' ".$dep."
    ORDER BY
    reff_number ASC
    ");

// $data_investment_belum_po = db::select("
//     SELECT
//     acc_investments.*,
//     acc_investment_details.*,
//     departments.department_shortname 
//     FROM
//     acc_investments
//     LEFT JOIN acc_investment_details ON acc_investments.reff_number = acc_investment_details.reff_number
//     JOIN departments ON acc_investments.applicant_department = departments.department_name 
//     WHERE
//     acc_investments.deleted_at IS NULL 
//     AND sudah_po IS NULL 
//     AND posisi = 'finished' ".$dep." 
//     ORDER BY
//     submission_date ASC
//     ");

// $data_po_belum_receive = db::select("
//     SELECT DISTINCT
//     acc_investments.reff_number, 
//     departments.department_shortname,
//     acc_purchase_orders.no_po,
//     acc_purchase_orders.tgl_po,
//     acc_purchase_orders.supplier_name,
//     acc_purchase_order_details.nama_item,
//     IF(acc_purchase_orders.posisi = 'pch', 'PO Terkirim', 'PO Approval') as status_po
//     FROM acc_purchase_orders
//     LEFT JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
//     LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
//     LEFT JOIN acc_investment_details ON acc_investments.reff_number = acc_investment_details.reff_number
//     JOIN departments ON acc_investments.applicant_department = departments.department_name 
//     WHERE
//     acc_investments.deleted_at IS NULL 
//     AND acc_investments.receive_date IS NOT NULL
//     AND acc_investment_details.sudah_po IS NOT NULL 
//     AND acc_purchase_orders.deleted_at IS NULL
//     AND acc_purchase_order_details.`status` IS NULL 
//     AND DATE_FORMAT( tgl_po, '%Y-%m' ) BETWEEN '".$datefrom."' AND '".$dateto."' 
//     ".$dep." 
//     ORDER BY
//     tgl_po ASC 
//     ");

$response = array(
    'status' => true,
    'datas' => $data
    // 'data_investment_belum_po' => $data_investment_belum_po
    // 'data_po_belum_receive' => $data_po_belum_receive
);

return Response::json($response); 
}


public function detailMonitoringInv(Request $request){

  $week = $request->get("week");
  $status = $request->get("status");
  $tglfrom = $request->get("tglfrom");
  $tglto = $request->get("status");
  $department = $request->get("department");

  $status_sign = "";

  if ($status == "Investment Incompleted") {
      $status_sign = "and posisi != 'finished'";
  }
  else if ($status == "Investment Completed") {
      $status_sign = "and posisi = 'finished'";
  }

  $qry = "SELECT acc_investments.*, weekly_calendars.week_name FROM acc_investments JOIN weekly_calendars on acc_investments.submission_date = weekly_calendars.week_date WHERE acc_investments.deleted_at is null and week_name = '".$week."' ".$department." ".$status_sign." ORDER BY acc_investments.id DESC";


  $invest = DB::select($qry);

  return DataTables::of($invest)
  ->editColumn('submission_date', function ($invest)
  {
    return date('d F Y', strtotime($invest->submission_date));
})

  ->editColumn('supplier_code', function ($invest)
  {
    return $invest->supplier_code.' - '.$invest->supplier_name;
})
  ->editColumn('file', function ($invest)
  {
    $data = json_decode($invest->file);

    $fl = "";

    if ($invest->file != null)
    {
        for ($i = 0;$i < count($data);$i++)
        {
            $fl .= '<a href="../files/investment/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
        }
    }
    else
    {
        $fl = '-';
    }

    return $fl;
})
  ->editColumn('status', function ($invest)
  {
    $id = $invest->id;

    if ($invest->posisi == "user" && $invest->status == "approval")
    {
        return '<label class="label label-danger">Belum Dikirim</label>';
    }
    if ($invest->posisi == "user" && $invest->status == "comment")
    {
        return '<label class="label label-warning">Commented</label>';
    }
    else if ($invest->posisi == "acc_budget" || $invest->posisi == "acc_pajak")
    {
        return '<label class="label label-warning">Verifikasi Oleh Accounting</label>';
    }
    else if ($invest->posisi == "manager")
    {
        return '<label class="label label-warning">Diverifikasi Manager</label>';
    }
    else if ($invest->posisi == "dgm")
    {
        return '<label class="label label-warning">Diverifikasi DGM</label>';
    }
    else if ($invest->posisi == "gm")
    {
        return '<label class="label label-warning">Diverifikasi GM</label>';
    }
    else if ($invest->posisi == "manager_acc")
    {
        return '<label class="label label-warning">Diverifikasi Manager Accounting</label>';
    }
    else if ($invest->posisi == "direktur_acc")
    {
        return '<label class="label label-warning">Diverifikasi Direktur Accounting</label>';
    }
    else if ($invest->posisi == "presdir")
    {
        return '<label class="label label-warning">Diverifikasi Presdir</label>';
    }
    else if ($invest->posisi == "finished")
    {
        return '<label class="label label-success">Telah Diverifikasi</label>';
    }

})
  ->addColumn('action', function ($invest)
  {
    $id = $invest->id;

    if ($invest->posisi == "user")
    {
        return '
        <a href="detail/' . $id . '" class="btn btn-warning btn-xs"><i class="fa fa-edit"></i> Edit</a>
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report PDF</a>
        ';
    }
    else if ($invest->posisi == "acc_budget" || $invest->posisi == "acc_pajak")
    {
        return '<a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report PDF</a>';

    }
    else if ($invest->posisi == "acc" || $invest->posisi == "manager" || $invest->posisi == "dgm" || $invest->posisi == "gm" || $invest->posisi == "manager_acc" || $invest->posisi == "direktur_acc" || $invest->posisi == "presdir" || $invest->posisi == "finished")
    {
        return '
        <a href="report/' . $id . '" target="_blank" class="btn btn-warning btn-md" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report Investment</a>
        ';
    }
})

  ->rawColumns(['status' => 'status', 'action' => 'action', 'file' => 'file', 'supplier_code' => 'supplier_code'])
  ->make(true);
}

public function detailMonitoringInvTable(Request $request){

    $reff_number = $request->get("reff");
    $status = $request->get("status");
    $tglfrom = $request->get("tglfrom");
    $tglto = $request->get("status");
    $department = $request->get("department");

    $status_sign = "";

    if ($status == "Belum PO") {
        $status_sign = "and sudah_po is null";
    }
    else if ($status == "Sudah PO") {
        $status_sign = "and sudah_po is not null";
    }

    $qry = "SELECT acc_investments.reff_number,acc_investments.submission_date, acc_investment_details.* from acc_investments left join acc_investment_details on acc_investments.reff_number = acc_investment_details.reff_number WHERE acc_investment_details.deleted_at is NULL and acc_investments.reff_number = '".$reff_number."' ".$department." ".$status_sign." ";

    $inv = DB::select($qry);

    return DataTables::of($inv)
    ->editColumn('submission_date', function ($inv)
    {
        return $inv->submission_date;
    })
    ->editColumn('status', function ($inv)
    {
        if ($inv->sudah_po == null) {
            return '<span class="label label-danger">Belum PO</span>';
        }
        else if ($inv->sudah_po != null) {
            return '<span class="label label-success">Sudah PO</span>';
        }
    })
    ->rawColumns(['status' => 'status'])
    ->make(true);
}


public function detailMonitoringInvActual(Request $request){

    $reff_number = $request->get("reff");
    $status = $request->get("status");
    $tglfrom = $request->get("tglfrom");
    $tglto = $request->get("status");
    $department = $request->get("department");

    $status_sign = "";

    if ($status == "Belum Datang") {
        $status_sign = "and acc_purchase_order_details.`status` is null";
    }
    else if ($status == "Sudah Datang") {
        $status_sign = "and acc_purchase_order_details.`status` is not null";
    }

    $inv = DB::select("
        SELECT acc_purchase_orders.*, acc_purchase_order_details.*, acc_investments.applicant_department FROM acc_purchase_orders
        LEFT JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
        LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
        WHERE
        acc_purchase_orders.deleted_at IS NULL
        AND acc_purchase_order_details.no_pr = '".$reff_number."'
        AND DATE_FORMAT( submission_date, '%Y-%m' ) BETWEEN '".$tglfrom."' 
        AND '".$tglto."' ".$department." ".$status_sign."

        ");

    return DataTables::of($inv)

    ->editColumn('tgl_po', function ($inv)
    {
        return $inv->tgl_po;
    })
    ->editColumn('status', function ($inv)
    {
        if ($inv->status == null) {
            return '<span class="label label-danger">Belum Close</span>';
        }
        else if ($inv->status != null) {
            return '<span class="label label-success">Sudah Close</span>';
        }

    })
    ->rawColumns(['status' => 'status'])
    ->make(true);
}




    //==================================//
    //    Upload Transaksi Diluar PO    //
    //==================================//

public function upload_transaksi()
{
    $title = 'Upload Transaksi';
    $title_jp = '取引処理のアップロード';

    return view('accounting_purchasing.master.upload_transaksi', array(
        'title' => $title,
        'title_jp' => $title_jp,
    ))->with('page', 'Upload Transaksi')
    ->with('head', 'Upload Transaksi');
}

public function fetch_upload_transaksi(Request $request)
{
    $actual = AccActualLog::orderBy('acc_actual_logs.id', 'desc');

    if ($request->get('periode') != null)
    {
        $actual = $actual->whereIn('acc_actual_logs.periode', $request->get('periode'));
    }

    if ($request->get('month') != null)
    {
        $actual = $actual->where('acc_actual_logs.month_date', $request->get('month'));
    }

    $actual = $actual->select('*')->get();

    return DataTables::of($actual)

    ->editColumn('amount', function ($actual)
    {
        if ($actual->currency == "USD") {
            return "$ ".$actual->amount;   
        } else if ($actual->currency == "JPY") {
            return "¥ ".$actual->amount;   
        } else if ($actual->currency == "IDR") {
            return "Rp. ".$actual->amount;   
        }
    })

    ->addColumn('action', function ($actual)
    {
        $id = $actual->id;

        return ' 
        <button class="btn btn-sm btn-danger" data-toggle="tooltip" title="Details" onclick="modalDelete('.$id.')"><i class="fa fa-trash"></i> Delete</button>
        ';
    })

    ->rawColumns(['action' => 'action'])
    ->make(true);
}


public function import_transaksi(Request $request){
    if($request->hasFile('upload_file')) {
        try{                
            $file = $request->file('upload_file');
            $file_name = 'transaksi_'. date("ymd_h.i") .'.'.$file->getClientOriginalExtension();
            $file->move(public_path('uploads/transaksi/'), $file_name);
            $excel = public_path('uploads/transaksi/') . $file_name;

            $rows = Excel::load($excel, function($reader) {
                $reader->noHeading();
                    //Skip Header
                $reader->skipRows(1);
            })->get();

            $rows = $rows->toArray();

            for ($i=0; $i < count($rows); $i++) {
                if ($rows[$i][0] != "") {
                    $periode = "";
                    $document_no = "";
                    $type = "";                    
                    $description = "";            
                    $reference = "";
                    $gl_number = "";
                    $post_date = "";    
                    $local_amount = "";
                    $local_currency = "";
                    $amount = "";
                    $currency = "";
                    $budget_no = "";
                    $investment_no = "";
                    $month_date = "";

                    $periode  = $rows[$i][0];
                    $document_no = $rows[$i][1];
                    $type = $rows[$i][2];                    
                    $description = $rows[$i][3];            
                    $reference = $rows[$i][4];
                    $gl_number = $rows[$i][5];
                    $post_date = $rows[$i][6];    
                    $local_amount = $rows[$i][7];
                    $local_currency = $rows[$i][8];
                    $amount = $rows[$i][9];
                    $currency = $rows[$i][10];
                    $budget_no = $rows[$i][11];
                    $investment_no = $rows[$i][12];
                    $month_date = $rows[$i][13];

                    $data2 = AccActualLog::create([
                        'periode' => $periode,
                        'document_no' => $document_no,
                        'type' => $type,
                        'description' => $description,
                        'reference' => $reference,
                        'gl_number' => $gl_number,
                        'post_date' => $post_date,
                        'local_amount' => $local_amount,
                        'local_currency' => $local_currency,
                        'amount' => $amount,
                        'currency' => $currency,
                        'budget_no' => $budget_no,
                        'investment_no' => $investment_no,
                        'month_date' => $month_date,
                        'created_by' => Auth::id()
                    ]);

                    $data2->save();

                    if ($budget_no != "" || $budget_no != null) {
                        if ($investment_no == null || $investment_no == "") {
                            $bulan = strtolower(date("M",strtotime($post_date)));
                            $sisa_bulan = $bulan.'_sisa_budget';

                            $budgetdata = AccBudget::where('budget_no','=',$budget_no)->where('periode','=', $periode)->first();

                            //Kurangi Budget Skrg Dengan Actual
                            $total = $budgetdata->$sisa_bulan - $local_amount;

                            $updatebudget = AccBudget::where('budget_no','=',$budget_no)->where('periode','=', $periode)
                            ->update([
                                $sisa_bulan => $total
                            ]);
                        }
                    }

                }
            }       

            $response = array(
                'status' => true,
                'message' => 'Upload Berhasil',
            );
            return Response::json($response);

        }catch(\Exception $e){
            $response = array(
                'status' => false,
                'message' => $e->getMessage(),
            );
            return Response::json($response);
        }
    }else{
        $response = array(
            'status' => false,
            'message' => 'Upload failed, File not found',
        );
        return Response::json($response);
    }
}


public function delete_transaksi(Request $request)
{
    $actual = AccActualLog::find($request->get("id"));


    $bulan = strtolower(date("M",strtotime($actual->post_date)));
    $sisa_bulan = $bulan.'_sisa_budget';

    $budgetdata = AccBudget::where('budget_no','=',$actual->budget_no)->where('periode','=', $actual->periode)->first();

        //Kurangi Budget Skrg Dengan Actual
    $total = $budgetdata->$sisa_bulan + $actual->local_amount;

    $updatebudget = AccBudget::where('budget_no','=',$actual->budget_no)->where('periode','=', $actual->periode)
    ->update([
        $sisa_bulan => $total
    ]);

    $actual->delete();

    $response = array(
        'status' => true
    );

    return Response::json($response);
}

public function exportOutstandingPR(Request $request){

    $time = date('d-m-Y H;i;s');

    $tanggal = "";

    if (strlen($request->get('date_pr')) > 0)
    {
        $datepr = date('Y-m-d', strtotime($request->get('date_pr')));
    }

    $pr_detail = db::select(
        "SELECT
        acc_purchase_requisitions.no_budget,
        '' AS no_po,
        acc_purchase_requisitions.no_pr,
        acc_purchase_requisition_items.item_desc,
        acc_purchase_requisitions.department,
        acc_purchase_requisition_items.item_currency,
        acc_purchase_requisition_items.item_qty,
        acc_purchase_requisition_items.item_uom,
        acc_purchase_requisition_items.item_price,
        acc_purchase_requisition_items.item_amount,
        DATE_FORMAT(acc_purchase_requisitions.submission_date,'%Y-%m-%d') as submission_date,
        monthname( submission_date ) AS periode 
        FROM
        acc_purchase_requisitions
        JOIN acc_purchase_requisition_items ON acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr 
        WHERE
        acc_purchase_requisitions.deleted_at IS NULL 
        AND sudah_po IS NULL 
        AND submission_date <= '".$datepr."'

        UNION ALL

        SELECT
        acc_purchase_requisitions.no_budget,
        acc_purchase_order_details.no_po,
        acc_purchase_requisitions.no_pr,
        acc_purchase_requisition_items.item_desc,
        acc_purchase_requisitions.department,
        acc_purchase_requisition_items.item_currency,
        acc_purchase_requisition_items.item_qty,
        acc_purchase_requisition_items.item_uom,
        acc_purchase_requisition_items.item_price,
        acc_purchase_requisition_items.item_amount,
        DATE_FORMAT(acc_purchase_requisitions.submission_date,'%Y-%m-%d') as submission_date,
        monthname( submission_date ) AS periode 
        FROM
        acc_purchase_requisitions
        JOIN acc_purchase_requisition_items ON acc_purchase_requisitions.no_pr = acc_purchase_requisition_items.no_pr
        JOIN acc_purchase_order_details ON acc_purchase_order_details.no_pr = acc_purchase_requisition_items.no_pr and acc_purchase_order_details.nama_item = acc_purchase_requisition_items.item_desc
        WHERE
        acc_purchase_requisitions.deleted_at IS NULL 
        AND sudah_po IS NOT NULL 
        AND submission_date <= '".$datepr."' AND DATE_FORMAT(acc_purchase_order_details.created_at,'%Y-%m-%d') > '".$datepr."'");

    $data = array(
        'pr_detail' => $pr_detail
    );

    ob_clean();

    Excel::create('Outstanding PR List '.$datepr, function($excel) use ($data){
        $excel->sheet('Location', function($sheet) use ($data) {
          return $sheet->loadView('accounting_purchasing.report.outstanding_pr_excel', $data);
      });
    })->export('xlsx');
}

public function exportOutstandingInvestment(Request $request){
    $time = date('d-m-Y H;i;s');
    $tanggal = "";

    if (strlen($request->get('date_inv')) > 0)
    {
        $dateinv = date('Y-m-d', strtotime($request->get('date_inv')));
    }

    $inv_detail = db::select(
        "
        SELECT
        acc_investment_budgets.budget_no,
        '' AS no_po,
        acc_investments.reff_number,
        acc_investment_details.detail,
        acc_investments.applicant_department,
        acc_investments.currency,
        acc_investment_details.qty,
        acc_investment_details.uom,
        acc_investment_details.price,
        acc_investment_details.amount,
        DATE_FORMAT(acc_investments.submission_date,'%Y-%m-%d') as submission_date,
        monthname( submission_date ) AS periode,
        acc_investments.supplier_code,
        acc_investments.supplier_name
        FROM
        acc_investments
        JOIN acc_investment_details ON acc_investments.reff_number = acc_investment_details.reff_number 
        join acc_investment_budgets ON acc_investments.reff_number = acc_investment_budgets.reff_number
        WHERE
        acc_investments.deleted_at IS NULL 
        AND sudah_po IS NULL 
        and acc_investments.category = 'Expense'
        AND submission_date <= '".$dateinv."'


        UNION ALL

        SELECT
        acc_investment_budgets.budget_no,
        acc_purchase_order_details.no_po,
        acc_investments.reff_number,
        acc_investment_details.detail,
        acc_investments.applicant_department,
        acc_investments.currency,
        acc_investment_details.qty,
        acc_investment_details.uom,
        acc_investment_details.price,
        acc_investment_details.amount,
        DATE_FORMAT(acc_investments.submission_date,'%Y-%m-%d') as submission_date,
        monthname( submission_date ) AS periode,
        acc_investments.supplier_code,
        acc_investments.supplier_name
        FROM
        acc_investments
        JOIN acc_investment_details ON acc_investments.reff_number = acc_investment_details.reff_number
        join acc_investment_budgets ON acc_investments.reff_number = acc_investment_budgets.reff_number
        JOIN acc_purchase_order_details ON acc_purchase_order_details.no_pr = acc_investment_details.reff_number and acc_purchase_order_details.nama_item = acc_investment_details.detail 
        WHERE
        acc_investments.deleted_at IS NULL 
        and acc_investments.category = 'Expense'
        AND sudah_po IS NOT NULL 
        AND submission_date <= '".$dateinv."' AND DATE_FORMAT(acc_purchase_order_details.created_at,'%Y-%m-%d') > '".$dateinv."'");

    $data = array(
        'inv_detail' => $inv_detail
    );

    ob_clean();

    Excel::create('Outstanding Investment List '.$dateinv, function($excel) use ($data){
        $excel->sheet('Location', function($sheet) use ($data) {
          return $sheet->loadView('accounting_purchasing.report.outstanding_inv_excel', $data);
      });
    })->export('xlsx');
}

public function exportOutstandingPO(Request $request){
    $time = date('d-m-Y H;i;s');
    $tanggal = "";

    if (strlen($request->get('date_po')) > 0)
    {
        $datepo = date('Y-m-d', strtotime($request->get('date_po')));
    }

    $po_detail = db::select(
        "
        SELECT
        acc_purchase_orders.remark,
        acc_purchase_requisitions.department AS department_pr,
        acc_investments.applicant_department AS department_investment,
        acc_purchase_order_details.budget_item,
        acc_purchase_order_details.no_po,
        acc_purchase_order_details.no_pr,
        acc_purchase_order_details.nama_item,
        acc_purchase_orders.currency,
        acc_purchase_order_details.qty,
        acc_purchase_order_details.uom,
        acc_purchase_order_details.goods_price,
        acc_purchase_order_details.service_price,
        DATE_FORMAT( tgl_po, '%Y-%m-%d' ) AS tgl_po,
        monthname( tgl_po ) AS periode,
        acc_purchase_orders.supplier_name,
        acc_purchase_order_details.delivery_date
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
        LEFT JOIN acc_purchase_requisitions ON acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
        LEFT JOIN acc_investments ON acc_purchase_order_details.no_pr = acc_investments.reff_number
        JOIN acc_budget_histories ON acc_budget_histories.category_number = acc_purchase_order_details.no_pr and acc_budget_histories.no_item = acc_purchase_order_details.nama_item
        WHERE
        acc_purchase_orders.deleted_at IS NULL 
        AND acc_budget_histories.`status` != 'Actual'
        AND DATE_FORMAT( tgl_po, '%Y-%m-%d' ) <= '".$datepo."'");

    $data = array(
        'po_detail' => $po_detail
    );

    ob_clean();

    Excel::create('Outstanding PO List '.$datepo, function($excel) use ($data){
        $excel->sheet('Location', function($sheet) use ($data) {
          return $sheet->loadView('accounting_purchasing.report.outstanding_po_excel', $data);
      });
    })->export('xlsx');
}

public function outstanding_all_equipment()
{
    $title = 'Outstanding PR PO Investment';
    $title_jp = '';

    return view('accounting_purchasing.master.outstanding', array(
        'title' => $title,
        'title_jp' => $title_jp,
    ))->with('page', 'Data Outstanding')
    ->with('head', 'Data Outstanding');
}

    //==================================//
    //          Transfer Budget         //
    //==================================//

public function transfer_budget()
{
    $title = 'Transfer Budget';
    $title_jp = '予算流用';

    $status = AccBudgetTransfer::select('*')
    ->whereNull('acc_budget_transfers.deleted_at')
    ->distinct()
    ->get();

    $budgets = AccBudget::select('acc_budgets.budget_no', 'acc_budgets.description')
    ->where('periode','=','FY200')
    ->distinct()
    ->get();

    return view('accounting_purchasing.master.transfer_budget', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'budgets' => $budgets
    ))->with('page', 'Transfer Budget')
    ->with('head', 'Transfer Budget');
}

public function transfer_budget_post(Request $request)
{
    try {

        $budget_from = $request->get('budget_from');
        $budget_to = $request->get('budget_to');

        $department_from = AccBudget::select('department')
        ->where('budget_no','=',$budget_from)
        ->first();

        $department_to = AccBudget::select('department')
        ->where('budget_no','=',$budget_to)
        ->first();

        $manager_from = null;
        $manager_name_from = null;

        $manager_to = null;
        $manager_name_to = null;

        $posisi = null;

        if($department_from->department == "Production Engineering Department")
        {
            $managfrom = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Maintenance Department' and position like 'manager%'");
        }
        else if($department_from->department == "Purchasing Control Department")
        {
            $managfrom = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Procurement Department' and position like 'manager%'");
        }
        else if($department_from->department == "General Affairs Department")
        {
            $managfrom = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Human Resources Department' and position like 'manager%'");
        }
        else if($department_from->department == "Management Information System Department")
        {
            $managfrom = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and position like 'General Manager%'");
        }
        else
        {
            $managfrom = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = '".$department_from->department."' and position like 'manager%'");
        }


            //cek manager ada atau tidak
        if ($managfrom != null)
        {
            $posisi = "manager_from";

            foreach ($managfrom as $mgfrom)
            {
                $manager_from = $mgfrom->employee_id;
                $manager_name_from = $mgfrom->name;
            }
        }



        if($department_to->department == "Production Engineering Department")
        {
            $managto = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Maintenance Department' and position like 'manager%'");
        }
        else if($department_to->department == "Purchasing Control Department")
        {
            $managto = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Procurement Department' and position like 'manager%'");
        }
        else if($department_to->department == "General Affairs Department")
        {
            $managto = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Human Resources Department' and position like 'manager%'");
        }
        else if($department_to->department == "Management Information System Department")
        {
            $managto = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and position like 'General Manager%'");
        }
        else
        {
            $managto = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = '".$department_to->department."' and position like 'manager%'");
        }
            //cek manager ada atau tidak
        if ($managto != null)
        {
            foreach ($managto as $mgto)
            {
                $manager_to = $mgto->employee_id;
                $manager_name_to = $mgto->name;
            }
        }

        $id_user = Auth::id();

        $acc = AccBudgetTransfer::create([
         'request_date' => date('Y-m-d'),
         'budget_from' => $budget_from,
         'budget_to' => $budget_to,
         'amount' => $request->get('amount'),
         'approval_f' => $manager_from,
         'approval_t' => $manager_to,
         'approval_from' => $manager_name_from,
         'approval_to' => $manager_name_to,
         'posisi' => $posisi,
         'created_by' => $id_user
     ]);

        $acc->save();

        $nik_manager = explode("-",$acc->approval_f);

        $mails = "select distinct email from acc_budget_transfers join users on acc_budget_transfers.approval_f = users.username where acc_budget_transfers.id = ".$acc->id;

        $mailtoo = DB::select($mails);

        $isimail = "select * FROM acc_budget_transfers where acc_budget_transfers.id =". $acc->id;
        $isitransfer = db::select($isimail);

        Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($isitransfer, 'transfer_budget'));

        $response = array(
            'status' => true,
            'datas' => "Berhasil",
        );
        return Response::json($response);

    } catch (QueryException $e){
      $response = array(
         'status' => false,
         'datas' => $e->getMessage()
     );
      return Response::json($response);
  }
}

public function transfer_budget_post_new(Request $request)
{
    try {

        $budget_from = $request->get('budget_from');
        $budget_to = $request->get('budget_to');
        $amount = $request->get('amount');
        $id_user = Auth::id();

        $date = date('Y-m-d');
                //FY
        $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$date'");

        foreach ($fy as $fys) {
            $fiscal = $fys->fiscal_year;
        }

        $sisa_bulan = strtolower(date('M')).'_sisa_budget';
        $sisa_simulasi_bulan = strtolower(date('M')).'_after_adj';

        $budget_from_awal = AccBudget::where('budget_no', $budget_from)->where('periode', $fiscal)->first();

        // Dikurangi dulu dari budget awal
        $totalfrom = $budget_from_awal->$sisa_bulan - $amount; //sisa budget
        $simulasi_from = $budget_from_awal->$sisa_simulasi_bulan - $amount;
        $amountfrom = $budget_from_awal->amount - $amount;

        if ($totalfrom < 0) {
            $response = array(
                'status' => false,
                'datas' => "Budget Awal Tidak Mencukupi",
            );
            return Response::json($response);
        }

        $dataupdate = AccBudget::where('budget_no', $budget_from)->where('periode', $fiscal)->update([
            $sisa_bulan => $totalfrom,
            $sisa_simulasi_bulan => $simulasi_from,
            'amount' => $amountfrom
        ]);

        // Ditambah Ke Budget Tujuan

        $budget_to_akhir = AccBudget::where('budget_no', $budget_to)->where('periode', $fiscal)->first();

        $totalto = $budget_to_akhir->$sisa_bulan + $amount; //sisa budget 
        $simulasito = $budget_to_akhir->$sisa_simulasi_bulan + $amount;
        $amountto = $budget_to_akhir->amount + $amount;

        $dataupdate = AccBudget::where('budget_no', $budget_to)->where('periode', $fiscal)->update([
            $sisa_bulan => $totalto,
            $sisa_simulasi_bulan => $simulasito,
            'amount' => $amountto
        ]);

        $acc = AccBudgetTransfer::create([
            'request_date' => date('Y-m-d'),
            'budget_from' => $budget_from,
            'budget_to' => $budget_to,
            'amount' => $amount,
            'note' => $request->get('note'),
            'approval_f' => null,
            'approval_t' => null,
            'approval_from' => null,
            'approval_to' => null,
            'posisi' => null,
            'created_by' => $id_user
        ]);

        $acc->save();


        $response = array(
            'status' => true,
            'datas' => "Berhasil",
        );
        return Response::json($response);

    } catch (QueryException $e){
      $response = array(
         'status' => false,
         'datas' => $e->getMessage()
     );
      return Response::json($response);
  }
}

public function fetch_transfer_budget(){
    $data = db::select('select * from acc_budget_transfers where deleted_at is null order by id desc');

    $response = array(
        'status' => true,
        'datas' => $data
    );

    return Response::json($response);
}

public function transfer_approvalfrom($id){

    $transfer = AccBudgetTransfer::find($id);

    try{
        if ($transfer->posisi == "manager_from")
        {
            $transfer->posisi = "manager_to";
            $transfer->date_approval_from = "Approval_".date('Y-m-d');

            $mailto = "select distinct email from acc_budget_transfers join users on acc_budget_transfers.approval_t = users.username where acc_budget_transfers.id = '".$id."'";
            $mails = DB::select($mailto);
            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }
            $transfer->save();

            $isimail = "select * from acc_budget_transfers where acc_budget_transfers.id = ".$id;

            $transfer_isi = db::select($isimail);

            Mail::to($mailtoo)->send(new SendEmail($transfer_isi, 'transfer_budget'));

            $message = 'Transfer Budget Dari '.$transfer->budget_from.' Ke '.$transfer->budget_to ;
            $message2 ='Berhasil di approve';
        }
        else{
            $message = 'Transfer Budget Dari '.$transfer->budget_from.' Ke '.$transfer->budget_to ;
            $message2 ='Sudah di approve/reject';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $transfer->budget_from,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $transfer->budget_to,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}


public function transfer_approvalto($id){

    $transfer = AccBudgetTransfer::find($id);

    try{
        if ($transfer->posisi == "manager_to")
        {
            $transfer->posisi = "acc";
            $transfer->date_approval_to = "Approval_".date('Y-m-d');

                //Mulai proses perhitungan Budget

            $date = date('Y-m-d');
                //FY
            $fy = db::select("select fiscal_year from weekly_calendars where week_date = '$date'");

            foreach ($fy as $fys) {
                $fiscal = $fys->fiscal_year;
            }

            $sisa_bulan = strtolower(date('M')).'_sisa_budget';

            $budget_from = AccBudget::where('budget_no', $transfer->budget_from)->where('periode', $fiscal)->first();

                // Dikurangi dulu dari budget awal
                $totalfrom = $budget_from->$sisa_bulan - $transfer->amount; //sisa budget 

                $dataupdate = AccBudget::where('budget_no', $transfer->budget_from)->where('periode', $fiscal)->update([
                    $sisa_bulan => $totalfrom
                ]);

                // Ditambah Ke Budget Tujuan

                $budget_to = AccBudget::where('budget_no', $transfer->budget_to)->where('periode', $fiscal)->first();

                $totalto = $budget_to->$sisa_bulan + $transfer->amount; //sisa budget 

                $dataupdate = AccBudget::where('budget_no', $transfer->budget_to)->where('periode', $fiscal)->update([
                    $sisa_bulan => $totalto
                ]);

                $mailto = "select distinct email from users where username = 'PI0902001'"; // kirim bu laila
                $mails = DB::select($mailto);
                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                $transfer->save();

                $isimail = "select * from acc_budget_transfers where acc_budget_transfers.id = ".$id;

                $transfer_isi = db::select($isimail);

                Mail::to($mailtoo)->send(new SendEmail($transfer_isi, 'transfer_budget'));

                $message = 'Transfer Budget Dari '.$transfer->budget_from.' Ke '.$transfer->budget_to ;
                $message2 ='Berhasil di approve';
            }
            else{

                $message = 'Transfer Budget Dari '.$transfer->budget_from.' Ke '.$transfer->budget_to ;
                $message2 ='Sudah di approve/reject';
            }

            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $transfer->budget_from,
                'message' => $message,
                'message2' => $message2,
            ))->with('page', 'Approval');

        } catch (Exception $e) {
            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $transfer->budget_to,
                'message' => 'Error',
                'message2' => $e->getMessage(),
            ))->with('page', 'Approval');
        }
    }


    //==================================//
    //      Verifikasi Investment       //
    //==================================//
    public function verifikasi_investment($id)
    {
        $inv = AccInvestment::find($id);

        $path = '/investment_list/'.$inv->pdf;
        $file_path = asset($path);

        return view('accounting_purchasing.verifikasi.investment_verifikasi', array(
            'investment' => $inv,
            'file_path' => $file_path,
        ))->with('page', 'Investment');
    }

    public function approval_investment(Request $request, $id)
    {
        try {

            $approve = $request->get('approve');

            if ($approve == "1") {

                $investment = AccInvestment::find($id);

                if ($investment->posisi == "manager")
                {

                    if ($investment->approval_dgm != null) {
                        $investment->posisi = "dgm";
                        $investment->approval_manager = $investment->approval_manager."/Approved/".date('Y-m-d H:i:s');

                        $dgm_id = explode("/", $investment->approval_dgm);
                        $mailto = "select distinct email from users where username = '" .$dgm_id[0]. "'";

                        $mails = DB::select($mailto);

                        foreach ($mails as $mail)
                        {
                            $mailtoo = $mail->email;
                        }
                    }
                    else{
                        $investment->posisi = "gm";
                        $investment->approval_manager = $investment->approval_manager."/Approved/".date('Y-m-d H:i:s');

                        $gm_id = explode("/", $investment->approval_gm);
                        $mailto = "select distinct email from users where username = '" .$gm_id[0]. "'";

                        $mails = DB::select($mailto);

                        foreach ($mails as $mail)
                        {
                            $mailtoo = $mail->email;
                        }
                    }
                }

                else if ($investment->posisi == "dgm")
                {
                    $investment->posisi = "gm";
                    $investment->approval_dgm = $investment->approval_dgm."/Approved/".date('Y-m-d H:i:s');

                    $gm_id = explode("/", $investment->approval_gm);
                    $mailto = "select distinct email from users where username = '" .$gm_id[0]. "'";

                    $mails = DB::select($mailto);

                    foreach ($mails as $mail)
                    {
                        $mailtoo = $mail->email;
                    }
                }

                else if ($investment->posisi == "gm")
                {

                    $investment->posisi = "manager_acc";
                    $investment->approval_gm = $investment->approval_gm."/Approved/".date('Y-m-d H:i:s');

                    $manager_acc_id = explode("/", $investment->approval_manager_acc);
                    $mailto = "select distinct email from users where username = '" .$manager_acc_id[0]. "'";

                    $mails = DB::select($mailto);

                    foreach ($mails as $mail)
                    {
                        $mailtoo = $mail->email;
                    }
                }

                else if ($investment->posisi == "manager_acc")
                {

                    $investment->posisi = "direktur_acc";
                    $investment->approval_manager_acc = $investment->approval_manager_acc."/Approved/".date('Y-m-d H:i:s');

                    $direktur_acc_id = explode("/", $investment->approval_dir_acc);
                    $mailto = "select distinct email from users where username = '" .$direktur_acc_id[0]. "'";

                    $mails = DB::select($mailto);

                    foreach ($mails as $mail)
                    {
                        $mailtoo = $mail->email;
                    }
                }

                else if ($investment->posisi == "direktur_acc")
                {

                    $investment->posisi = "presdir";
                    $investment->approval_dir_acc = $investment->approval_dir_acc."/Approved/".date('Y-m-d H:i:s');

                    $presdir_id = explode("/", $investment->approval_presdir);
                    $mailto = "select distinct email from users where username = '" .$presdir_id[0]. "'";

                    $mails = DB::select($mailto);

                    foreach ($mails as $mail)
                    {
                        $mailtoo = $mail->email;
                    }
                }

                else if ($investment->posisi == "presdir")
                {

                    $investment->posisi = "finished";
                    $investment->approval_presdir = $investment->approval_presdir."/Approved/".date('Y-m-d H:i:s');

                    //kirim email ke Mas Shega & Mas Hamzah
                    $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
                    $mailtoo = DB::select($mails);
                }

                $investment->save();

                $judul = substr($investment->reff_number, 0, 7);

                $detail_inv = AccInvestment::select('acc_investments.*','acc_investment_details.no_item', 'acc_investment_details.detail', 'acc_investment_details.qty', 'acc_investment_details.price', 'acc_investment_details.vat_status', 'acc_investment_details.amount')
                ->leftJoin('acc_investment_details', 'acc_investments.reff_number', '=', 'acc_investment_details.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $inv_budget = AccInvestment::join('acc_investment_budgets', 'acc_investments.reff_number', '=', 'acc_investment_budgets.reff_number')
                ->where('acc_investments.id', '=', $id)
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('Legal', 'potrait');

                $pdf->loadView('accounting_purchasing.report.report_investment', array(
                    'inv' => $detail_inv,
                    'inv_budget' => $inv_budget
                ));

                $pdf->save(public_path() . "/investment_list/INV_".$judul.".pdf");

                $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$investment->id;
                $investe = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($investe, 'investment'));

                return redirect('/investment/verifikasi/'.$id)->with('status', 'Investment Approved Successfully')
                ->with('page', 'Investment');
            }
            else
            {
                return redirect('/investment/verifikasi/' . $id)->with('error', 'Investment Not Approved')
                ->with('page', 'Investment');
            }
            
        } catch (Exception $e) {

            return redirect('/investment/verifikasi/' . $id)->with('error', 'Investment Not Approved')
            ->with('page', 'Investment');

        }
        
    }

    public function reject_investment(Request $request, $id)
    {
        try {

            $reject_note = $request->get('alasan');

            $investment = AccInvestment::find($id);
            $investment->reject_note = $reject_note;

            if ($investment->posisi == "acc_budget") {
                $investment->posisi = "user";
                $investment->reject = "acc_budget/".date('Y-m-d H:i:s');
            }
            else if($investment->posisi == "acc_pajak"){
                $investment->posisi = "user";
                $investment->reject = "acc_pajak/".date('Y-m-d H:i:s');
            }
            else if($investment->posisi == "manager"){
                $investment->posisi = "user";
                $investment->reject = "manager/".date('Y-m-d H:i:s');
            }
            else if($investment->posisi == "dgm"){
                $investment->posisi = "user";
                $investment->reject = "dgm/".date('Y-m-d H:i:s');

                $manager = explode("/", $investment->approval_manager);
                if(count($manager) > 1){
                    $investment->approval_manager = $manager[0]."/".$manager[1];
                }
            }
            else if($investment->posisi == "gm"){
                $investment->posisi = "user";
                $investment->reject = "gm/".date('Y-m-d H:i:s');

                $manager = explode("/", $investment->approval_manager);
                $dgm = explode("/", $investment->approval_dgm);

                if(count($manager) > 1){
                    $investment->approval_manager = $manager[0]."/".$manager[1];
                }
                if(count($dgm) > 1){
                    $investment->approval_dgm = $dgm[0]."/".$dgm[1];
                } 
            }
            else if($investment->posisi == "manager_acc"){
                $investment->posisi = "user";
                $investment->reject = "manager_acc/".date('Y-m-d H:i:s');

                $manager = explode("/", $investment->approval_manager);
                $dgm = explode("/", $investment->approval_dgm);
                $gm = explode("/", $investment->approval_gm);

                if(count($manager) > 1){
                    $investment->approval_manager = $manager[0]."/".$manager[1];
                }
                if(count($dgm) > 1){
                    $investment->approval_dgm = $dgm[0]."/".$dgm[1];
                }
                if(count($gm) > 1){
                    $investment->approval_gm = $gm[0]."/".$gm[1];
                }

            }
            else if($investment->posisi == "direktur_acc"){
                $investment->posisi = "user";
                $investment->reject = "direktur_acc/".date('Y-m-d H:i:s');

                $manager = explode("/", $investment->approval_manager);
                $dgm = explode("/", $investment->approval_dgm);
                $gm = explode("/", $investment->approval_gm);
                $manager_acc = explode("/", $investment->approval_manager_acc);

                if(count($manager) > 1){
                    $investment->approval_manager = $manager[0]."/".$manager[1];
                }
                if(count($dgm) > 1){
                    $investment->approval_dgm = $dgm[0]."/".$dgm[1];
                }
                if(count($gm) > 1){
                    $investment->approval_gm = $gm[0]."/".$gm[1];
                } 
                if(count($manager_acc) > 1){
                    $investment->approval_manager_acc = $manager_acc[0]."/".$manager_acc[1];
                } 

            }
            else if($investment->posisi == "presdir"){
                $investment->posisi = "user";
                $investment->reject = "presdir/".date('Y-m-d H:i:s');

                $manager = explode("/", $investment->approval_manager);
                $dgm = explode("/", $investment->approval_dgm);
                $gm = explode("/", $investment->approval_gm);
                $manager_acc = explode("/", $investment->approval_manager_acc);
                $dir_acc = explode("/", $investment->approval_dir_acc);

                if(count($manager) > 1){
                    $investment->approval_manager = $manager[0]."/".$manager[1];
                }
                if(count($dgm) > 1){
                    $investment->approval_dgm = $dgm[0]."/".$dgm[1];
                }
                if(count($gm) > 1){
                    $investment->approval_gm = $gm[0]."/".$gm[1];
                } 
                if(count($manager_acc) > 1){
                    $investment->approval_manager_acc = $manager_acc[0]."/".$manager_acc[1];
                } 
                if(count($dir_acc) > 1){
                    $investment->approval_dir_acc = $dir_acc[0]."/".$dir_acc[1];
                }

            }

            $investment->save();

            $isimail = "select acc_investments.*, acc_investment_budgets.budget_no, acc_investment_budgets.budget_name, acc_investment_budgets.category_budget, acc_investment_budgets.sisa as total_budget, acc_investment_budgets.total as total_pengeluaran FROM acc_investments join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number where acc_investments.id = ".$id;
            $tolak = db::select($isimail);

            //kirim email ke Buyer
            $mails = "select distinct email from users where users.username = '".$investment->applicant_id."'";
            $mailtoo = DB::select($mails);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'investment'));
            return redirect('/investment/check/'.$id)->with('error', 'Investment Not Approved')->with('page', 'Investment');

        } catch (Exception $e) {

            return redirect('/investment/check/'.$id)->with('error', 'Reject Error')->with('page', 'Investment');
        }
    }



    // Terima Barang

    public function wh_receive_equipment(){
        $title = 'Receive Barang';
        $title_jp = '備品受取';


        $po_detail = db::select("
            SELECT DISTINCT acc_purchase_order_details.no_po
            from acc_purchase_orders 
            join acc_purchase_order_details on
            acc_purchase_orders.no_po = acc_purchase_order_details.no_po
            WHERE
            posisi = 'pch' 
            and acc_purchase_order_details.`status` is null     
            AND DATE(tgl_po) > '2022-04-01'
            order by acc_purchase_order_details.id
            ");

        return view('accounting_purchasing.master.receive_wh', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'po_detail' => $po_detail
        ))->with('page', 'Receive Warehouse')->with('head', 'Receive Equipment Warehouse');
    }

    public function wh_receive_ga(){
        $title = 'Receive Barang GA';
        $title_jp = '総務課備品受取';

        $po_detail = db::select("
            SELECT DISTINCT
            acc_purchase_order_details.no_po 
            FROM
            acc_purchase_orders
            JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
            WHERE
            acc_purchase_orders.posisi = 'pch' 
            AND acc_purchase_order_details.`status` IS NULL 
            AND acc_purchase_orders.no_po like '%GA%'
            ORDER BY
            acc_purchase_order_details.id 
            ");

        return view('accounting_purchasing.master.receive_ga', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'po_detail' => $po_detail
        ))->with('page', 'Receive GA')->with('head', 'Receive GA');
    }

    public function wh_receive_kantin(){
        $title = 'Receive Barang Kantin';
        $title_jp = '';

        $po_detail = db::select("
            SELECT DISTINCT
            canteen_purchase_order_details.no_po 
            FROM
            canteen_purchase_orders
            JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po
            WHERE
            canteen_purchase_orders.posisi = 'pch' 
            AND canteen_purchase_order_details.`status` IS NULL 
            ORDER BY
            canteen_purchase_order_details.id 
            ");

        return view('accounting_purchasing.master.receive_ga_kantin', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'po_detail' => $po_detail
        ))->with('page', 'Receive GA Kantin')->with('head', 'Receive GA Kantin');
    }

    public function fetch_receive_equipment(Request $request){
        $data = db::select("
            SELECT
            acc_purchase_order_details.* 
            from acc_purchase_orders 
            join acc_purchase_order_details on
            acc_purchase_orders.no_po = acc_purchase_order_details.no_po
            WHERE
            acc_purchase_orders.deleted_at is null and
            acc_purchase_orders.no_po = '". $request->get('no_po')."'" );

        $response = array(
            'status' => true,
            'datas' => $data,
        );
        return Response::json($response);
    }

    public function fetch_receive_kantin(Request $request){
        $data = db::select("
            SELECT
            canteen_purchase_order_details.* 
            from canteen_purchase_orders 
            join canteen_purchase_order_details on
            canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po
            WHERE
            canteen_purchase_orders.deleted_at is null and
            canteen_purchase_orders.no_po = '". $request->get('no_po')."'" 
        );

        $response = array(
            'status' => true,
            'datas' => $data,
        );
        return Response::json($response);
    }

    public function update_receive(Request $request){
        try {
            $item = $request->get('item');

            foreach ($item as $itm) {

                if($itm['qty'] == "" || $itm['date'] == ""){
                    $response = array(
                     'status' => false,
                     'message' => 'Mohon Diisi Jumlah & Tanggal Kedatangan',
                 );
                    return Response::json($response);
                }

                else {
                    $po_detail = AccPurchaseOrderDetail::where('id', $itm['id'])
                    ->first();

                    if($po_detail->qty < ($po_detail->qty_receive + (float) $itm['qty']) ){
                        $response = array(
                         'status' => false,
                         'message' => 'Jumlah Yang Dimasukkan Melebihi Pembelian Barang',
                     );
                        return Response::json($response);
                    }

                    $inv = AccPurchaseOrderDetail::where('id', $itm['id'])
                    ->update([
                        'qty_receive' => $po_detail->qty_receive + (float) $itm['qty'],
                        'date_receive' => $itm['date'],
                        'surat_jalan' => $itm['surat_jalan']
                    ]);

                    $item = AccItem::select('category')
                    ->leftJoin('acc_item_categories','acc_items.kategori','=','acc_item_categories.category_id')
                    ->where('kode_item','=',$itm['no_item'])
                    ->first();

                    if (count($item) > 0) {
                        if ($item->category == 'Barang Modal') {
                            $receive = AccReceive::create([
                                'no_po' => $itm['no_po'],
                                'no_pr' => $po_detail->no_pr,
                                'no_item' => $itm['no_item'],
                                'nama_item' => $po_detail->nama_item,
                                'qty' => $po_detail->qty,
                                'qty_receive' => $itm['qty'],
                                'date_receive' => $itm['date'],
                                'surat_jalan' => $itm['surat_jalan'],
                                'status' => 'Barang Modal',
                                'created_by' => Auth::id()
                            ]);

                            //BARANG MODAL
                            $modals = AccModalStock::create([
                                'no_po' => $itm['no_po'],
                                'no_pr' => $po_detail->no_pr,
                                'no_item' => $itm['no_item'],
                                'nama_item' => $po_detail->nama_item,
                                'qty' => $po_detail->qty,
                                'qty_receive' => $itm['qty'],
                                'date_receive' => $itm['date'],
                                'surat_jalan' => $itm['surat_jalan'],
                                'created_by' => Auth::id()
                            ]);
                        }
                        else{
                            $receive = AccReceive::create([
                                'no_po' => $itm['no_po'],
                                'no_pr' => $po_detail->no_pr,
                                'no_item' => $itm['no_item'],
                                'nama_item' => $po_detail->nama_item,
                                'qty' => $po_detail->qty,
                                'qty_receive' => $itm['qty'],
                                'date_receive' => $itm['date'],
                                'surat_jalan' => $itm['surat_jalan'],
                                'created_by' => Auth::id()
                            ]);
                        }
                    }
                    else{
                        $receive = AccReceive::create([
                            'no_po' => $itm['no_po'],
                            'no_pr' => $po_detail->no_pr,
                            'no_item' => $itm['no_item'],
                            'nama_item' => $po_detail->nama_item,
                            'qty' => $po_detail->qty,
                            'qty_receive' => $itm['qty'],
                            'date_receive' => $itm['date'],
                            'surat_jalan' => $itm['surat_jalan'],
                            'created_by' => Auth::id()
                        ]);
                    }
                    
                    
                    // $receive->save();

                    $like = $receive->no_po;

                    

                    // if ($receive->no_po == $like) {
                    //     $jum = preg_match("/I018711/i", $receive->nama_item);

                    //     if ($jum > 0) {

                    if (strpos($like, 'IT') !== false) {

                        $cat = "";
                        if(strpos(strtoupper($receive->nama_item), 'IPAD')){
                            $cat = 'iPad';
                        }else if(strpos(strtoupper($receive->nama_item), 'COMPUTER')){
                            $cat = 'Computer';
                        }else if(strpos(strtoupper($receive->nama_item), 'INTEL')){
                            $cat = 'Mini PC';
                        }else if(strpos(strtoupper($receive->nama_item), 'LENOVO')){
                            $cat = 'Laptop';
                        }else if(strpos(strtoupper($receive->nama_item), 'Scanner')){
                            $cat = 'Scanner';
                        }else{
                            $cat = 'Lain-Lain';
                        }

                        if ($receive->qty_receive <= 100) {
                            for ($i=1; $i <= $receive->qty_receive; $i++) { 

                                $inventory = MisInventoryNew::create([
                                    'no_po' => $receive->no_po,
                                    'no_pr' => $receive->no_pr,
                                    'nama_item' => $receive->nama_item,
                                    'qty' => 1,
                                    'date_to' => $receive->date_receive,
                                    'category' => $cat,
                                    'id_order' => $receive->id
                                ]);
                            }
                            
                        }else{

                            $inventory = MisInventoryNew::create([
                                'no_po' => $receive->no_po,
                                'no_pr' => $receive->no_pr,
                                'nama_item' => $receive->nama_item,
                                'qty' => $receive->qty_receive,
                                'date_to' => $receive->date_receive,
                                'category' => $cat,
                                'id_order' => $receive->id
                            ]);
                            
                        }

                    }else{

                        $cat = "";
                        if(strpos(strtoupper($receive->nama_item), 'IPAD')){
                            $cat = 'iPad';
                        }else if(strpos(strtoupper($receive->nama_item), 'COMPUTER')){
                            $cat = 'Computer';
                        }else if(strpos(strtoupper($receive->nama_item), 'INTEL')){
                            $cat = 'Mini PC';
                        }else if(strpos(strtoupper($receive->nama_item), 'LENOVO')){
                            $cat = 'Laptop';
                        }else if(strpos(strtoupper($receive->nama_item), 'Scanner')){
                            $cat = 'Scanner';
                        }else{
                            $cat = 'Lain-Lain';
                        }

                        if ($cat == "iPad" || $cat == "Computer" || $cat == "Mini PC" || $cat == "Laptop") {

                            if ($receive->qty_receive <= 100) {
                                for ($i=1; $i <= $receive->qty_receive; $i++) { 

                                    $inventory = MisInventoryNew::create([
                                        'no_po' => $receive->no_po,
                                        'no_pr' => $receive->no_pr,
                                        'nama_item' => $receive->nama_item,
                                        'qty' => 1,
                                        'date_to' => $receive->date_receive,
                                        'category' => $cat,
                                        'id_order' => $receive->id
                                    ]);
                                }

                            }else{
                                $inventory = MisInventoryNew::create([
                                    'no_po' => $receive->no_po,
                                    'no_pr' => $receive->no_pr,
                                    'nama_item' => $receive->nama_item,
                                    'qty' => $receive->qty_receive,
                                    'date_to' => $receive->date_receive,
                                    'category' => $cat,
                                    'id_order' => $receive->id
                                ]);

                            }
                        }

                    }
                  //     }

                  // }




                        // $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where employee_id = 'PI0103002' or employee_id = 'PI0906001'";
                        // $mailtoo = DB::select($mails);

                        // $mailscc = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where department = 'Management Information System Department' and employee_id  in('PI2101043') and end_date is null";
                        // $mailtoocc = DB::select($mailscc);

                        // $isimail = "select mis_inventories.id, mis_inventories.description, mis_inventories.qty, mis_inventories.`condition`, users.`name` as nama, mis_inventories.created_at as tanggal, acc_receives.no_po as no_po, acc_receives.no_item as no_item, acc_receives.nama_item from mis_inventories join users on mis_inventories.created_by = users.id 
                        // join acc_receives on mis_inventories.id_order = acc_receives.id where mis_inventories.id = ".$inventory->id;                

                        // $inventory = db::select($isimail);
                        // Mail::to($mailtoo)->cc($mailtoocc)->send(new SendEmail($inventory, 'barang_mis'));
                    // }

                    // $budget_log = AccBudgetHistory::where('po_number','=',$itm['no_po'])
                    // ->where(DB::raw('SUBSTRING(no_item, 1, 7)'),'=',$itm['no_item'])
                    // ->first();

                    // var_dump($itm['no_po']);
                    // var_dump($itm['no_item']);
                    // var_dump($budget_log);

                    // $update_budget_log = AccBudgetHistory::where('po_number','=',$itm['no_po'])
                    // ->where(DB::raw('SUBSTRING(no_item, 1, 7)'),'=',$itm['no_item'])
                    // ->update([
                    //     'budget_month_receive' => strtolower(date('M')),
                    //     'amount_receive' => $budget_log->amount_po,
                    //     'status' => 'Actual'
                    // ]);

                    //GET DATA
                    $datapo =  AccPurchaseOrderDetail::where('id', $itm['id'])
                    ->first();

                    //UPDATE STATUS
                    if ($datapo->qty_receive >= $datapo->qty) {
                        $update_qty_receive = AccPurchaseOrderDetail::where('id','=',$itm['id'])
                        ->update(['status' => 'close']);
                    }
                }

            }

                    // 

            // for ($i=0; $i < count($id); $i++) { 
            //     $po_id = AccPurchaseOrderDetail::where('id', $id)->first();

            //     $total_all = $po_id->qty_receive + $qty;

            // }

            $response = array(
                'status' => true,
                'message' => 'Update Receive Berhasil'
            );
            return Response::json($response);
        } 
        catch (Exception $e) {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );
            return Response::json($response);
        }
    }

    public function update_receive_ga(Request $request){
        try {
            $item = $request->get('item');

            foreach ($item as $itm) {
                if ($itm['qty'] != null && $itm['date'] != null) {

                    //Get PO
                    $po_detail = AccPurchaseOrderDetail::where('id', $itm['id'])
                    ->first();

                    if($po_detail->qty < ($po_detail->qty_receive + (float) $itm['qty']) ){
                        $response = array(
                         'status' => false,
                         'message' => 'Jumlah Yang Dimasukkan Melebihi Pembelian Barang',
                     );
                        return Response::json($response);
                    }

                    $inv = AccPurchaseOrderDetail::where('id', $itm['id'])
                    ->update([
                        'qty_receive' => $po_detail->qty_receive + (float) $itm['qty'],
                        'date_receive' => $itm['date'],
                        'surat_jalan' => $itm['surat_jalan']
                    ]);


                    $receive = AccReceive::create([
                        'no_po' => $itm['no_po'],
                        'no_pr' => $po_detail->no_pr,
                        'no_item' => $itm['no_item'],
                        'nama_item' => $po_detail->nama_item,
                        'qty' => $po_detail->qty,
                        'qty_receive' => $itm['qty'],
                        'date_receive' => $itm['date'],
                        'surat_jalan' => $itm['surat_jalan'],
                        'created_by' => Auth::id()
                    ]);

                    $receive->save();

                    $budget_log = AccBudgetHistory::where('po_number','=',$itm['no_po'])
                    ->where(DB::raw('SUBSTRING(no_item, 1, 7)'),'=',$itm['no_item'])
                    ->first();

                    $update_budget_log = AccBudgetHistory::where('po_number','=',$itm['no_po'])
                    ->where(DB::raw('SUBSTRING(no_item, 1, 7)'),'=',$itm['no_item'])
                    ->update([
                        'budget_month_receive' => strtolower(date('M')),
                        'amount_receive' => $budget_log->amount_po,
                        'status' => 'Actual'
                    ]);

                    $datapo =  AccPurchaseOrderDetail::where('id', $itm['id'])
                    ->first();

                    if ($datapo->qty_receive >= $datapo->qty) {
                        $update_qty_receive = AccPurchaseOrderDetail::where('id','=',$itm['id'])
                        ->update(['status' => 'close']);
                    }
                }
            }

            $response = array(
                'status' => true,
                'message' => 'Update Receive Berhasil'
            );
            return Response::json($response);
        } 
        catch (Exception $e) {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );
            return Response::json($response);
        }
    }

    public function update_receive_kantin(Request $request){
        try {
            $item = $request->get('item');

            foreach ($item as $itm) {

                if($itm['qty'] == "" || $itm['date'] == ""){
                    $response = array(
                     'status' => false,
                     'message' => 'Mohon Diisi Jumlah & Tanggal Kedatangan',
                 );
                    return Response::json($response);
                }

                else {
                    $po_detail = CanteenPurchaseOrderDetail::where('id', $itm['id'])
                    ->first();

                    if($po_detail->qty < ($po_detail->qty_receive + (float) $itm['qty']) ){
                        $response = array(
                         'status' => false,
                         'message' => 'Jumlah Yang Dimasukkan Melebihi Pembelian Barang',
                     );
                        return Response::json($response);
                    }

                    $inv = CanteenPurchaseOrderDetail::where('id', $itm['id'])
                    ->update([
                        'qty_receive' => $po_detail->qty_receive + (float) $itm['qty'],
                        'date_receive' => $itm['date'],
                        'surat_jalan' => $itm['surat_jalan']
                    ]);


                    $receive = CanteenReceive::create([
                        'no_po' => $itm['no_po'],
                        'no_item' => $itm['no_item'],
                        'nama_item' => $po_detail->nama_item,
                        'qty' => (float) $po_detail->qty,
                        'qty_receive' => (float) $itm['qty'],
                        'date_receive' => $itm['date'],
                        'surat_jalan' => $itm['surat_jalan'],
                        'created_by' => Auth::id()
                    ]);

                    $receive->save();

                    $budget_log = CanteenBudgetHistory::where('po_number','=',$itm['no_po'])
                    ->where(DB::raw('SUBSTRING(no_item, 1, 7)'),'=',$itm['no_item'])
                    ->first();

                    $update_budget_log = CanteenBudgetHistory::where('po_number','=',$itm['no_po'])
                    ->where(DB::raw('SUBSTRING(no_item, 1, 7)'),'=',$itm['no_item'])
                    ->update([
                        'budget_month_receive' => strtolower(date('M')),
                        'amount_receive' => $budget_log->amount_po,
                        'status' => 'Actual'
                    ]);

                    $datapo = CanteenPurchaseOrderDetail::where('id', $itm['id'])->first();

                    if ($datapo->qty_receive >= $datapo->qty) {
                        $update_qty_receive = CanteenPurchaseOrderDetail::where('id','=',$itm['id'])
                        ->update(['status' => 'close']);
                    }
                }
            }

            $response = array(
                'status' => true,
                'message' => 'Update Receive Kantin Berhasil'
            );
            return Response::json($response);
        } 
        catch (Exception $e) {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );
            return Response::json($response);
        }
    }

    public function canteenprapprovalmanager($id){
        $pr = CanteenPurchaseRequisition::find($id);
        try{
            if ($pr->posisi == "manager")
            {

                // $pr->posisi = 'pch';
                // $pr->approvalm = "Approved";
                // $pr->dateapprovalm = date('Y-m-d H:i:s');
                // $pr->approvalgm = "Approved";
                // $pr->dateapprovalgm = date('Y-m-d H:i:s');
                // $pr->status = "approval_acc";

                //kirim email ke Mas Shega & Mas Hamzah
                // $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
                // $mailtoo = DB::select($mails);

                $pr->posisi = "gm";
                $pr->approvalm = "Approved";
                $pr->dateapprovalm = date('Y-m-d H:i:s');

                $mailto = "select distinct email from canteen_purchase_requisitions join users on canteen_purchase_requisitions.gm = users.username where canteen_purchase_requisitions.id = '" . $pr->id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                 $mailtoo = $mail->email;
             }

             $pr->save();

             $detail_pr = CanteenPurchaseRequisition::select('canteen_purchase_requisitions.*','canteen_purchase_requisition_items.*','canteen_budget_histories.beg_bal','canteen_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = canteen_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
             ->leftJoin('canteen_purchase_requisition_items', 'canteen_purchase_requisitions.no_pr', '=', 'canteen_purchase_requisition_items.no_pr')
             ->join('canteen_budget_histories', function($join) {
                $join->on('canteen_budget_histories.category_number', '=', 'canteen_purchase_requisition_items.no_pr');
                $join->on('canteen_budget_histories.no_item','=', 'canteen_purchase_requisition_items.item_desc');
            })
             ->where('canteen_purchase_requisitions.id', '=', $id)
             ->distinct()
             ->get();

             $exchange_rate = AccExchangeRate::select('*')
             ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
             ->where('currency','!=','USD')
             ->orderBy('currency','ASC')
             ->get();

             $pdf = \App::make('dompdf.wrapper');
             $pdf->getDomPDF()->set_option("enable_php", true);
             $pdf->setPaper('A4', 'potrait');

             $pdf->loadView('general_affairs.report.report_pr', array(
                'pr' => $detail_pr,
                'rate' => $exchange_rate
            ));

             $pdf->save(public_path() . "/kantin/pr_list/PR".$pr->no_pr.".pdf");

             $isimail = "select canteen_purchase_requisitions.*,canteen_purchase_requisition_items.item_desc, canteen_purchase_requisition_items.item_request_date, canteen_purchase_requisition_items.item_qty, canteen_purchase_requisition_items.item_uom, canteen_purchase_requisition_items.item_price, canteen_purchase_requisition_items.item_amount FROM canteen_purchase_requisitions join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr where canteen_purchase_requisitions.id = ".$id;
             $purchaserequisition = db::select($isimail);

             Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($purchaserequisition, 'canteen_purchase_requisition'));

             $message = 'PR Kantin dengan Nomor '.$pr->no_pr;
             $message2 ='Berhasil di approve';
         }
         else{
            $message = 'PR Kantin dengan Nomor. '.$pr->no_pr;
            $message2 ='Sudah di approve/reject';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}

public function canteenprapprovalgm($id){
    $pr = CanteenPurchaseRequisition::find($id);
    try{
        if ($pr->posisi == "gm")
        {
            $pr->posisi = 'pch';
            $pr->approvalgm = "Approved";
            $pr->dateapprovalgm = date('Y-m-d H:i:s');
            $pr->status = "approval_acc";

                //kirim email ke Mas Shega & Mas Hamzah
            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
            $mailtoo = DB::select($mails);

            $pr->save();

            $isimail = "select canteen_purchase_requisitions.*,canteen_purchase_requisition_items.item_desc, canteen_purchase_requisition_items.item_request_date, canteen_purchase_requisition_items.item_qty, canteen_purchase_requisition_items.item_uom, canteen_purchase_requisition_items.item_price, canteen_purchase_requisition_items.item_amount FROM canteen_purchase_requisitions join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr where canteen_purchase_requisitions.id = ".$id;
            $purchaserequisition = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($purchaserequisition, 'canteen_purchase_requisition'));

            $detail_pr = CanteenPurchaseRequisition::select('canteen_purchase_requisitions.*','canteen_purchase_requisition_items.*','canteen_budget_histories.beg_bal','canteen_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = canteen_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
            ->leftJoin('canteen_purchase_requisition_items', 'canteen_purchase_requisitions.no_pr', '=', 'canteen_purchase_requisition_items.no_pr')
            ->join('canteen_budget_histories', function($join) {
                $join->on('canteen_budget_histories.category_number', '=', 'canteen_purchase_requisition_items.no_pr');
                $join->on('canteen_budget_histories.no_item','=', 'canteen_purchase_requisition_items.item_desc');
            })
            ->where('canteen_purchase_requisitions.id', '=', $id)
            ->distinct()
            ->get();

            $exchange_rate = AccExchangeRate::select('*')
            ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
            ->where('currency','!=','USD')
            ->orderBy('currency','ASC')
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('general_affairs.report.report_pr', array(
                'pr' => $detail_pr,
                'rate' => $exchange_rate
            ));

            $pdf->save(public_path() . "/kantin/pr_list/PR".$pr->no_pr.".pdf");

            $message = 'PR Kantin dengan Nomor '.$pr->no_pr;
            $message2 ='Berhasil di Approve';
        }
        else{
            $message = 'PR Kantin dengan Nomor. '.$pr->no_pr;
            $message2 ='Sudah di approve/reject';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Approval');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->no_pr,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Approval');
    }
}

public function canteen_check_purchase_requisition($id)
{
    $emp_id = Auth::user()->username;
    $pr = CanteenPurchaseRequisition::find($id);
    $items = CanteenPurchaseRequisitionItem::select('canteen_purchase_requisition_items.*')->join('canteen_purchase_requisitions', 'canteen_purchase_requisition_items.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
    ->where('canteen_purchase_requisitions.id', '=', $id)->get();

    $path = '/kantin/pr_list/' . $pr->file_pdf;            
    $file_path = asset($path);

    return view('general_affairs.report.check_purchase_requisition', array(
        'pr' => $pr,
        'items' => $items,
        'file_path' => $file_path,
        'uom' => $this->uom
    ))->with('page', 'Purchase Requisition Canteen');
}

public function canteen_checked_purchase_requisition(Request $request, $id){

    $pr = CanteenPurchaseRequisition::find($id);

    if($pr->posisi == "pch"){
        $pr->receive_date = date('Y-m-d');
        $pr->status = 'received';
        $pr->save();

        $detail_pr = CanteenPurchaseRequisition::select('canteen_purchase_requisitions.*','canteen_purchase_requisition_items.*','canteen_budget_histories.beg_bal','canteen_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = canteen_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
        ->leftJoin('canteen_purchase_requisition_items', 'canteen_purchase_requisitions.no_pr', '=', 'canteen_purchase_requisition_items.no_pr')
        ->join('canteen_budget_histories', function($join) {
            $join->on('canteen_budget_histories.category_number', '=', 'canteen_purchase_requisition_items.no_pr');
            $join->on('canteen_budget_histories.no_item','=', 'canteen_purchase_requisition_items.item_desc');
        })
        ->where('canteen_purchase_requisitions.id', '=', $id)
        ->distinct()
        ->get();

        $exchange_rate = AccExchangeRate::select('*')
        ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
        ->where('currency','!=','USD')
        ->orderBy('currency','ASC')
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('general_affairs.report.report_pr', array(
            'pr' => $detail_pr,
            'rate' => $exchange_rate
        ));

        $pdf->save(public_path() . "/kantin/pr_list/PR".$pr->no_pr.".pdf");

        return redirect('/canteen/purchase_requisition/check/'.$id)->with('status', 'PR Kantin Sudah Berhasil Diterima')
        ->with('page', 'Purchase Requisition Canteen');
    }
}

public function canteenprreject(Request $request, $id)
{
    $pr = CanteenPurchaseRequisition::find($id);

    if ($pr->posisi == "manager" || $pr->posisi == "gm")
    {
        $pr->datereject = date('Y-m-d H:i:s');
        $pr->posisi = "user";
        $pr->approvalm = null;
        $pr->dateapprovalm = null;
        $pr->approvaldgm = null;
        $pr->dateapprovaldgm = null;
    }

    $pr->save();

    $isimail = "select canteen_purchase_requisitions.*,canteen_purchase_requisition_items.item_desc, canteen_purchase_requisition_items.item_request_date, canteen_purchase_requisition_items.item_qty, canteen_purchase_requisition_items.item_uom, canteen_purchase_requisition_items.item_price, canteen_purchase_requisition_items.item_amount FROM canteen_purchase_requisitions join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr where canteen_purchase_requisitions.id = ".$id;
    $purchaserequisition = db::select($isimail);

        //kirim email ke User
    $mails = "select distinct email from canteen_purchase_requisitions join users on canteen_purchase_requisitions.emp_id = users.username where canteen_purchase_requisitions.id ='" . $pr->id . "'";
    $mailtoo = DB::select($mails);


    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($purchaserequisition, 'canteen_purchase_requisition'));

    $message = 'PR dengan Nomor. '.$pr->no_pr;
    $message2 ='Tidak Disetujui';

    return view('accounting_purchasing.verifikasi.pr_message', array(
        'head' => $pr->no_pr,
        'message' => $message,
        'message2' => $message2,
    ))->with('page', 'Approval');

}

public function wh_print_equipment(){
    $title = 'Print Barang';
    $title_jp = '備品ラベル印刷';

    $po_detail = db::select("
        SELECT DISTINCT acc_receives.no_po from acc_receives order by id desc");

    return view('accounting_purchasing.master.receive_print_wh', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'po_detail' => $po_detail
    ))->with('page', 'Print Warehouse')->with('head', 'Receive Equipment Warehouse');
}

public function fetch_print_equipment(Request $request){
    $data = db::select("
        SELECT
        acc_receives.* 
        from acc_receives 
        WHERE
        acc_receives.no_po = '". $request->get('no_po')."'" );

    $response = array(
        'status' => true,
        'datas' => $data,
    );
    return Response::json($response);
}

public function label_kedatangan($id){

        //Get PO
    // $po_receive = AccReceive::where('id', $id)
    // ->first();

    $po_receive = AccReceive::select('acc_receives.*','acc_purchase_requisition_items.penerima')
    ->leftjoin('acc_purchase_requisition_items', function($join) {
        $join->on('acc_receives.no_pr', '=', 'acc_purchase_requisition_items.no_pr');
        $join->on('acc_receives.no_item','=', 'acc_purchase_requisition_items.item_code');
    })
    ->where('acc_receives.id',$id)
    ->first();

    return view('accounting_purchasing.report.label_kedatangan', array(
        'kode_item' => $po_receive->no_item,
        'description' => $po_receive->nama_item,
        'po' => $po_receive->no_po,
        'pr' => $po_receive->no_pr,
        'penerima' => $po_receive->penerima,
        'date' => $po_receive->date_receive,
        'quantity' => $po_receive->qty_receive
    ));
}

    // Terima Barang

public function wh_cetak_bukti(){
    $title = 'Kirim Barang';
    $title_jp = '備品送付';

    return view('accounting_purchasing.master.receive_cetak_bukti', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', 'Receive Bukti')->with('head', 'Receive Cetak Bukti');
}

public function fetch_cetak_bukti(Request $request){

        //Get PO
    $receive = AccReceive::where('no_po', $request->get('no_po'))
    ->where('no_item', $request->get('no_item'))
    ->where('qty_receive',$request->get('qty'))
    ->first();

    $response = array(
        'status' => true,
        'datas' => $receive,
    );
    return Response::json($response);
}

public function create_cetak_bukti(Request $request){
    try {
        $receive = $request->get('receive');
        $tanggal_terima = date('d-M-Y', strtotime($request->get('tanggal_terima')));

        $id_print = $tanggal_terima.' '.$request->get('date_terima');

        foreach ($receive as $rcv) {

            $receive = AccReceiveReport::create([
                'id_print' => 'Receive_'.$id_print,
                'no_po' => $rcv['no_po'],
                'no_item' => $rcv['no_item'],
                'nama_item' => $rcv['nama_item'],
                'qty_receive' => $rcv['qty_receive'],
                'date_receive' => $rcv['date_receive'],
                'created_by' => Auth::id()
            ]);

            $receive->save();
        }

        $response = array(
            'status' => true,
            'message' => 'Cetak Bukti Penerimaan Berhasil'
        );
        return Response::json($response);
    } 
    catch (Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function bukti_penerimaan()
{
  try {
    $receive = DB::SELECT("SELECT DISTINCT id_print from acc_receive_reports order by id desc");

    $response = array(
      'status' => true,
      'receive' => $receive
  );

    return Response::json($response); 
} catch (\Exception $e) {
    $response = array(
      'status' => false,
      'message'=> $e->getMessage()
  );

    return Response::json($response); 
}
}

public function cetak_bukti_penerimaan($id)
{

 $receives = db::select("
    SELECT 
    acc_receive_reports.no_po,
    acc_receive_reports.nama_item,
    acc_receive_reports.qty_receive,
    acc_receive_reports.date_receive,
    acc_purchase_orders.supplier_name
    FROM
    acc_receive_reports 
    left join acc_purchase_orders
    on acc_purchase_orders.no_po = acc_receive_reports.no_po
    WHERE
    id_print = '".$id."'
    AND acc_receive_reports.deleted_at IS NULL
    ");


 $pdf = \App::make('dompdf.wrapper');
 $pdf->getDomPDF()->set_option("enable_php", true);
 $pdf->setPaper('A4', 'potrait');

 $pdf->loadView('accounting_purchasing.master.receive_print_report', array(
  'receives' => $receives,
));

 return $pdf->stream($id.".pdf");
}

public function index_penerimaan_barang($id)
{
    $title = 'Penerimaan Barang Warehouse';
    $title_jp = '';

    return view('accounting_purchasing.master.receive_penerimaan_barang', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'id' => $id
    ))->with('page', 'Penerimaan Barang Warehouse');
}

public function fetch_penerimaan_barang(Request $request)
{
    $receive = db::select("
        SELECT 
        acc_receive_reports.id,
        acc_receive_reports.no_po,
        acc_receive_reports.nama_item,
        acc_receive_reports.qty_receive,
        acc_receive_reports.date_receive,
        acc_receive_reports.pic_receive,
        acc_receive_reports.pic_date_receive,
        acc_receives.no_pr,
        acc_purchase_requisition_items.penerima,
        right(acc_receive_reports.no_po, 2) as po
        FROM
        acc_receive_reports
        LEFT JOIN
        acc_receives
        ON acc_receive_reports.no_po = acc_receives.no_po
        and acc_receive_reports.nama_item = acc_receives.nama_item
        LEFT JOIN 
        acc_purchase_requisition_items
        on acc_receives.no_pr = acc_purchase_requisition_items.no_pr
        and acc_receives.nama_item = acc_purchase_requisition_items.item_desc
        WHERE
        id_print = '".$request->get('id')."'
        AND acc_receive_reports.deleted_at IS NULL
        ORDER BY pic_receive,po
        ");

    $response = array(
        'status' => true,
        'received' => $receive
    );
    return Response::json($response);
}

public function post_penerimaan_barang(Request $request)
{
    try {
        $arrCheck = $request->get('check');
        $pic = $request->get('employee_id').' - '.$request->get('name');

        foreach ($arrCheck as $cek) {
            AccReceiveReport::where('id', $cek)
            ->update([
                'pic_receive' => $pic,
                'pic_date_receive' => date('Y-m-d H:i:s')
            ]);
        }

        $response = array(
            'status' => true,
            'pic' => $pic
        );
        return Response::json($response);   
    } catch (QueryException $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function cek_kedatangan(){
    $title = 'Cek Kedatangan';
    $title_jp = '備品着荷確認';

    $po_detail = db::select("SELECT DISTINCT acc_receives.no_po from acc_receives order by id desc");

    $pr_detail = db::select("SELECT DISTINCT acc_purchase_requisitions.no_pr FROM acc_purchase_requisitions
        WHERE posisi = 'pch' ORDER BY acc_purchase_requisitions.id DESC");

    return view('accounting_purchasing.master.receive_cek_kedatangan', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'po_detail' => $po_detail,
        'pr_detail' => $pr_detail
    ))->with('page', 'Cek Kedatangan')->with('head', 'Receive Equipment Warehouse');
}

public function fetch_kedatangan(Request $request)
{

    $tanggal = "";
    $month = "";
    $keyword = "";
    $po = "";
    $pr = "";
    $surat_jalan = "";

    if (strlen($request->get('tanggal')) > 0)
    {
        $tanggal = "and acc_receives.date_receive = '".$request->get('tanggal')."'";
    }

    if (strlen($request->get('keyword')) > 0)
    {
        $keyword = "and acc_receives.nama_item LIKE '%".$request->get('keyword')."%'";
    }

    if (strlen($request->get('no_po')) > 0)
    {
        $po = "and acc_receives.no_po = '".$request->get('no_po')."'";
    }

    if (strlen($request->get('no_pr')) > 0)
    {
        $pr = "and acc_purchase_order_details.no_pr = '".$request->get('no_pr')."'";
    }

    if (strlen($request->get('surat_jalan')) > 0)
    {
        $surat_jalan = "and acc_receives.surat_jalan LIKE '%".$request->get('surat_jalan')."%'";
    }

    if(strlen($request->get('month_from')) > 0){
      if(strlen($request->get('month_to')) > 0){
        $month = "and (acc_receives.date_receive BETWEEN '".$request->get('month_from')."-01' AND '".$request->get('month_to')."-31') ";
    }
    else{
        $month = "and (acc_receives.date_receive BETWEEN '".$request->get('month_from')."-01' AND '".$request->get('month_from')."-31') ";
    }
}

$kedatangan = DB::select("
   SELECT DISTINCT
   acc_receives.*,
   acc_purchase_order_details.no_pr,
   IF
   ( goods_price != 0, goods_price, service_price ) AS price,
   acc_purchase_orders.no_po_sap,
   acc_purchase_orders.supplier_code,
   acc_purchase_orders.supplier_name,
   acc_receive_reports.pic_receive,
   acc_receive_reports.pic_date_receive,
   acc_purchase_orders.tgl_po,
   IFNULL(acc_purchase_requisitions.submission_date,acc_investments.submission_date) as submission_date 
   FROM
   `acc_receives`
   LEFT JOIN acc_receive_reports ON acc_receive_reports.no_po = acc_receives.no_po 
   AND acc_receives.no_item = acc_receive_reports.no_item 
   AND acc_receives.qty_receive = acc_receive_reports.qty_receive
   LEFT JOIN acc_purchase_order_details ON acc_receives.no_po = acc_purchase_order_details.no_po
   JOIN acc_purchase_orders ON acc_purchase_orders.no_po = acc_receives.no_po 
   AND acc_receives.no_item = acc_purchase_order_details.no_item 
   LEFT JOIN acc_purchase_requisitions on acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
   LEFT JOIN acc_investments on acc_purchase_order_details.no_pr = acc_investments.reff_number
   WHERE
   acc_receives.deleted_at IS NULL 
   and acc_purchase_orders.deleted_at IS NULL 
   AND ( acc_purchase_requisitions.submission_date is not null or acc_investments.submission_date is not null)
   ".$tanggal."
   ".$month."
   ".$keyword."
   ".$po."
   ".$pr."
   ".$surat_jalan."
   ORDER BY
   acc_receives.id desc");

return DataTables::of($kedatangan)
->addColumn('amount_po', function ($kedatangan)
{
    $price = $kedatangan->price;
    $qty_receive = $kedatangan->qty_receive;

    return number_format($price * $qty_receive,2,".",",");  
})

->editColumn('supplier_code', function ($kedatangan)
{
    return $kedatangan->supplier_code.' - '.$kedatangan->supplier_name;  
})

->editColumn('price', function ($kedatangan)
{
    return number_format($kedatangan->price,2,".",",");  
})

->editColumn('date_receive', function ($kedatangan)
{
    return date('d-m-Y', strtotime($kedatangan->date_receive));  
})

->editColumn('tgl_po', function ($kedatangan)
{
    return date('d-m-Y', strtotime($kedatangan->tgl_po));  
})

->editColumn('submission_date', function ($kedatangan)
{
    return date('d-m-Y', strtotime($kedatangan->submission_date));  
})

->editColumn('dokumen', function ($kedatangan)
{
    if ($kedatangan->dokumen == null) {
        return '-';
    }
    else{
        $dokumen = '';

        $data = explode(",",$kedatangan->dokumen);

        for ($i = 0;$i < count($data);$i++)
        {
            $dokumen .= '<a href="../files/dokumen_bc/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
        }


        return $dokumen;              

        // return '<a href="../files/dokumen_bc/' . $kedatangan->dokumen . '" target="_blank" class="fa fa-paperclip"></a>';
    } 
})

->editColumn('pic_receive', function ($kedatangan)
{
    if ($kedatangan->pic_receive == null) {
        return "-";
    }
    else{
        return $kedatangan->pic_receive.'<br>'.date('d-M-Y H:i:s', strtotime($kedatangan->pic_date_receive));
    }  
})

->rawColumns(['price' => 'price','amount_po' => 'amount_po','dokumen' => 'dokumen' ,'pic_receive' => 'pic_receive'])
->make(true);
}

public function cek_kedatangan_ga(){
    $title = 'Cek Kedatangan GA';
    $title_jp = '総務課備品着艦確認';

    $po_detail = db::select("SELECT DISTINCT acc_receives.no_po from acc_receives where no_po LIKE '%GA%' order by id desc");

    return view('accounting_purchasing.master.receive_cek_kedatangan_ga', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'po_detail' => $po_detail
    ))->with('page', 'Cek Kedatangan GA')->with('head', 'Receive Equipment Warehouse');
}

public function fetch_kedatangan_ga(Request $request)
{

    $tanggal = "";
    $month = "";
    $keyword = "";
    $po = "";

    if (strlen($request->get('tanggal')) > 0)
    {
        $tanggal = "and acc_receives.date_receive = '".$request->get('tanggal')."'";
    }
    if (strlen($request->get('keyword')) > 0)
    {
        $keyword = "and acc_receives.nama_item LIKE '%".$request->get('keyword')."%'";
    }

    if (strlen($request->get('no_po')) > 0)
    {
        $po = "and acc_receives.no_po = '".$request->get('no_po')."'";
    }

    if(strlen($request->get('month_from')) > 0){
        if(strlen($request->get('month_to')) > 0){
            $month = "and (acc_receives.date_receive BETWEEN '".$request->get('month_from')."-01' AND '".$request->get('month_to')."-31') ";
        }
        else{
            $month = "and (acc_receives.date_receive BETWEEN '".$request->get('month_from')."-01' AND '".$request->get('month_from')."-31') ";
        }
    }

    $kedatangan = DB::select("
        SELECT DISTINCT
        acc_receives.*, acc_purchase_order_details.no_pr, IF(goods_price != 0,goods_price,service_price) as price, acc_purchase_orders.no_po_sap, acc_purchase_orders.supplier_code, acc_purchase_orders.supplier_name,
        acc_purchase_orders.tgl_po, IFNULL(acc_purchase_requisitions.submission_date,acc_investments.submission_date) as submission_date 
        FROM
        `acc_receives`
        LEFT JOIN acc_purchase_order_details ON acc_receives.no_po = acc_purchase_order_details.no_po 
        JOIN acc_purchase_orders on acc_purchase_orders.no_po = acc_receives.no_po
        LEFT JOIN acc_purchase_requisitions on acc_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr
        LEFT JOIN acc_investments on acc_purchase_order_details.no_pr = acc_investments.reff_number
        AND acc_receives.no_item = acc_purchase_order_details.no_item
        WHERE acc_receives.deleted_at IS NULL and acc_receives.no_po LIKE '%GA%' 
        AND ( acc_purchase_requisitions.submission_date is not null or acc_investments.submission_date is not null)
        " . $tanggal . " " . $keyword . " " . $po . " 
        " . $month . " order by acc_receives.id DESC");

    return DataTables::of($kedatangan)
    ->addColumn('amount_po', function ($kedatangan)
    {
        $price = $kedatangan->price;
        $qty_receive = $kedatangan->qty_receive;

        return number_format($price * $qty_receive,2,".",",");  
    })

    ->editColumn('supplier_code', function ($kedatangan)
    {
        return $kedatangan->supplier_code.' - '.$kedatangan->supplier_name;  
    })


    ->editColumn('date_receive', function ($kedatangan)
    {
        return date('d-m-Y', strtotime($kedatangan->date_receive));  
    })

    ->editColumn('price', function ($kedatangan)
    {
        return number_format($kedatangan->price,2,".",",");  
    })

    ->editColumn('tgl_po', function ($kedatangan)
    {
        return date('d-m-Y', strtotime($kedatangan->tgl_po));  
    })

    ->editColumn('submission_date', function ($kedatangan)
    {
        return date('d-m-Y', strtotime($kedatangan->submission_date));  
    })

    

    ->rawColumns(['price' => 'price','amount_po' => 'amount_po'])
    ->make(true);
}

public function cek_kedatangan_kantin(){
    $title = 'Cek Kedatangan Kantin';
    $title_jp = '';

    $po_detail = db::select("SELECT DISTINCT canteen_receives.no_po from canteen_receives order by id desc");

    return view('accounting_purchasing.master.receive_cek_kedatangan_kantin', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'po_detail' => $po_detail
    ))->with('page', 'Cek Kedatangan GA')->with('head', 'Receive Equipment Warehouse');
}

public function fetch_kedatangan_kantin(Request $request)
{

    $tanggal = "";
    $keyword = "";
    $month = "";
    $po = "";

    if (strlen($request->get('tanggal')) > 0)
    {
        $tanggal = "and canteen_receives.date_receive = '".$request->get('tanggal')."'";
    }
    if (strlen($request->get('keyword')) > 0)
    {
        $keyword = "and canteen_receives.nama_item LIKE '%".$request->get('keyword')."%'";
    }

    if (strlen($request->get('no_po')) > 0)
    {
        $po = "and canteen_receives.no_po = '".$request->get('no_po')."'";
    }

    if(strlen($request->get('month_from')) > 0){
        if(strlen($request->get('month_to')) > 0){
            $month = "and (canteen_receives.date_receive BETWEEN '".$request->get('month_from')."-01' AND '".$request->get('month_to')."-31') ";
        }
        else{
            $month = "and (canteen_receives.date_receive BETWEEN '".$request->get('month_from')."-01' AND '".$request->get('month_from')."-31') ";
        }
    }

    $kedatangan = DB::select("
        SELECT DISTINCT
        canteen_receives.*, canteen_purchase_order_details.no_pr, IF(goods_price != 0,goods_price,service_price) as price, canteen_purchase_orders.supplier_code, canteen_purchase_orders.supplier_name,canteen_purchase_orders.tgl_po,canteen_purchase_requisitions.submission_date 
        FROM
        `canteen_receives`
        LEFT JOIN canteen_purchase_order_details ON canteen_receives.no_po = canteen_purchase_order_details.no_po 
        JOIN canteen_purchase_orders on canteen_purchase_orders.no_po = canteen_receives.no_po
        JOIN canteen_purchase_requisitions on canteen_purchase_order_details.no_pr = canteen_purchase_requisitions.no_pr
        AND canteen_receives.no_item = canteen_purchase_order_details.no_item
        WHERE canteen_receives.deleted_at IS NULL and canteen_receives.no_po LIKE '%GA%' " . $tanggal . " " . $keyword . " " . $po . " " . $month . " order by canteen_receives.id DESC");

    return DataTables::of($kedatangan)
    ->addColumn('amount_po', function ($kedatangan)
    {
        $price = $kedatangan->price;
        $qty_receive = $kedatangan->qty_receive;

        return number_format($price * $qty_receive,2,".",",");  
    })

    ->editColumn('supplier_code', function ($kedatangan)
    {
        return $kedatangan->supplier_code.' - '.$kedatangan->supplier_name;  
    })

    ->editColumn('price', function ($kedatangan)
    {
        return number_format($kedatangan->price,2,".",",");  
    })

    ->editColumn('date_receive', function ($kedatangan)
    {
        return date('d-m-Y', strtotime($kedatangan->date_receive));  
    })

    ->editColumn('tgl_po', function ($kedatangan)
    {
        return date('d-m-Y', strtotime($kedatangan->tgl_po));  
    })

    ->editColumn('submission_date', function ($kedatangan)
    {
        return date('d-m-Y', strtotime($kedatangan->submission_date));  
    })

    ->rawColumns(['price' => 'price','amount_po' => 'amount_po'])
    ->make(true);
}

public function fetch_outstanding_kantin(Request $request)
{
    $tanggal = "";

    if (strlen($request->get('tanggal')) > 0)
    {
        $tanggal = "and delivery_date = '".$request->get('tanggal')."'";

        if (strlen($request->get('tanggal_ke')) > 0) {
            $tanggal = "and delivery_date >= '".$request->get('tanggal')."'";
            $tanggal = $tanggal . "and delivery_date  <= '" .$request->get('tanggal_ke')."'";
        }
    }
    else{
        $tanggal = "and delivery_date = '".date('Y-m-d')."'";
    }

    $kedatangan = DB::select("
        SELECT
        canteen_purchase_order_details.*
        FROM
        canteen_purchase_orders
        JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po
        WHERE
        canteen_purchase_orders.deleted_at IS NULL ". $tanggal . "");

    return DataTables::of($kedatangan)
    ->editColumn('goods_price', function ($kedatangan)
    {
        if ($kedatangan->goods_price == 0) {
            $price = $kedatangan->service_price;
        }else{
            $price = $kedatangan->goods_price;
        }

        return number_format($price,2,".",",");  
    })

    ->editColumn('qty_receive', function ($kedatangan)
    {
        if ($kedatangan->qty_receive != 0) {
            $qty_receive = $kedatangan->qty_receive;
        }else{
            $qty_receive = '-';
        }

        return $qty_receive;  
    })

    ->editColumn('date_receive', function ($kedatangan)
    {
        if ($kedatangan->date_receive != null) {
            $date_receive = $kedatangan->date_receive;
        }else{
            $date_receive = '-';
        }

        return $date_receive;  
    })



    ->editColumn('delivery_date', function ($kedatangan)
    {
        return date('d-M-Y', strtotime($kedatangan->delivery_date));  
    })

    ->rawColumns(['price' => 'price', 'qty_receive' => 'qty_receive', 'date_receive' => 'date_receive'])
    ->make(true);
}

public function fetch_outstanding_ga(Request $request)
{
    $tanggal = "";

    if (strlen($request->get('tanggal')) > 0)
    {
        $tanggal = "and delivery_date = '".$request->get('tanggal')."'";

        if (strlen($request->get('tanggal_ke')) > 0) {
            $tanggal = "and delivery_date >= '".$request->get('tanggal')."'";
            $tanggal = $tanggal . "and delivery_date  <= '" .$request->get('tanggal_ke')."'";
        }
    }
    else{
        $tanggal = "and delivery_date = '".date('Y-m-d')."'";
    }

    $kedatangan = DB::select("
        SELECT
        acc_purchase_order_details.*
        FROM
        acc_purchase_orders
        JOIN acc_purchase_order_details ON acc_purchase_orders.no_po = acc_purchase_order_details.no_po
        WHERE
        acc_purchase_orders.deleted_at IS NULL 
        and acc_purchase_orders.no_po LIKE '%GA%' ". $tanggal . "");

    return DataTables::of($kedatangan)
    ->editColumn('goods_price', function ($kedatangan)
    {
        if ($kedatangan->goods_price == 0) {
            $price = $kedatangan->service_price;
        }else{
            $price = $kedatangan->goods_price;
        }

        return number_format($price,2,".",",");  
    })

    ->editColumn('qty_receive', function ($kedatangan)
    {
        if ($kedatangan->qty_receive != 0) {
            $qty_receive = $kedatangan->qty_receive;
        }else{
            $qty_receive = '-';
        }

        return $qty_receive;  
    })

    ->editColumn('date_receive', function ($kedatangan)
    {
        if ($kedatangan->date_receive != null) {
            $date_receive = $kedatangan->date_receive;
        }else{
            $date_receive = '-';
        }

        return $date_receive;  
    })

    ->editColumn('delivery_date', function ($kedatangan)
    {
        return date('d-M-Y', strtotime($kedatangan->delivery_date));  
    })

    ->rawColumns(['price' => 'price', 'qty_receive' => 'qty_receive', 'date_receive' => 'date_receive'])
    ->make(true);
}

public function exportInvestment(Request $request){

    $time = date('d-m-Y H;i;s');

    $tanggal = "";

    if (strlen($request->get('bulan')) > 0)
    {
        $datefrom = date('Y-m-01', strtotime($request->get('bulan')));
        $dateto = date('Y-m-31', strtotime($request->get('bulan')));
        $tanggal = "and submission_date between '" . $datefrom . "' and '" . $dateto . "'";
    }

    $investment_detail = db::select(
        "SELECT DISTINCT acc_investments.reff_number, acc_investments.category, acc_investments.type, acc_investments.objective, ycj_approval, submission_date, acc_investments.note, acc_investment_budgets.budget_no, acc_investments.applicant_department, acc_investment_details.detail, acc_investments.currency, acc_investment_details.amount, acc_investments.supplier_code, acc_investments.supplier_name, acc_investment_budgets.category_budget, acc_investments.delivery_order, acc_purchase_order_details.no_po, acc_investment_details.dollar, acc_investments.posisi from acc_investments left join acc_investment_details on acc_investments.reff_number = acc_investment_details.reff_number left join acc_investment_budgets on acc_investments.reff_number = acc_investment_budgets.reff_number left join acc_purchase_order_details on acc_investments.reff_number = acc_purchase_order_details.no_pr and acc_investment_details.detail = acc_purchase_order_details.nama_item WHERE acc_investments.deleted_at IS NULL " . $tanggal . " order by acc_investments.reff_number ASC");

    $data = array(
        'investment_detail' => $investment_detail
    );

    ob_clean();

    Excel::create('Investment List '.$time, function($excel) use ($data){
        $excel->sheet('Data', function($sheet) use ($data) {
          return $sheet->loadView('accounting_purchasing.investment_excel', $data);
      });
    })->export('xlsx');
}



    // Invoice Check

public function invoice_receive_report()
{
    $title = 'Receive Report Master';
    $title_jp = '受取報告マスター';

    $status = AccInvoiceReceiveReport::select('*')->whereNull('acc_invoice_receive_reports.deleted_at')
    ->distinct()
    ->get();

    return view('accounting_purchasing.invoice.receive_report', array(
        'title' => $title,
        'title_jp' => $title_jp,
    ))->with('page', 'Receive Report')
    ->with('head', 'Receive Report');
}

public function invoice_fetch_receive()
{
  try {
    $invoice = DB::SELECT("SELECT DISTINCT tanggal_upload from acc_invoice_receive_reports order by id desc");

    $jumlah = DB::SELECT("SELECT count(id) as jumlah from acc_invoice_receive_reports ");

    $response = array(
      'status' => true,
      'invoice' => $invoice,
      'jumlah' => $jumlah
  );

    return Response::json($response); 
} catch (\Exception $e) {
    $response = array(
      'status' => false,
      'message'=> $e->getMessage()
  );

    return Response::json($response); 
}
}

    // public function invoice_fetch_receive(Request $request)
    // {
    //     $actual = AccInvoiceReceiveReport::orderBy('acc_invoice_receive_reports.id', 'desc');

    //     if ($request->get('category') != null)
    //     {
    //         $actual = $actual->whereIn('acc_invoice_receive_reports.category', $request->get('category'));
    //     }

    //     $actual = $actual->select('*')->get();

    //     return DataTables::of($actual)

    //     ->editColumn('vendor_code', function ($actual)
    //     {
    //         return $actual->vendor_code. ' - ' .$actual->vendor_name;
    //     })

    //     ->editColumn('amount', function ($actual)
    //     {
    //         return '$'.$actual->amount;
    //     })

    //     ->addColumn('action', function ($actual)
    //     {
    //         $id = $actual->id;

    //         return ' 
    //         <button class="btn btn-xs btn-info" data-toggle="tooltip" title="Details" onclick="modalView('.$id.')"><i class="fa fa-eye"></i> Detail</button>
    //         ';
    //     })

    //     ->rawColumns(['action' => 'action'])
    //     ->make(true);
    // }

public function invoice_import_receive(Request $request){
    if($request->hasFile('upload_file')) {
        try{                
            $file = $request->file('upload_file');
            $file_name = 'receive_'. date("ymd_h.i") .'.'.$file->getClientOriginalExtension();
            $file->move(public_path('uploads/invoice/'), $file_name);
            $excel = public_path('uploads/invoice/') . $file_name;

            $rows = Excel::load($excel, function($reader) {
                $reader->noHeading();
                $reader->skipRows(1);
            })->get();

            $rows = $rows->toArray();

            for ($i=0; $i < count($rows); $i++) {
                $currency  = $rows[$i][1];
                $vendor_code = $rows[$i][4];
                $vendor_name = $rows[$i][5];                    
                $receive_date = $rows[$i][14];
                $document_no = $rows[$i][15];
                $invoice_no = $rows[$i][17];    
                $no_po_sap_urut = $rows[$i][18];
                $no_po = $rows[$i][19];
                $category = $rows[$i][20];
                $material = $rows[$i][21];
                $item_description = $rows[$i][22];
                $qty = $rows[$i][23];
                $uom = $rows[$i][24];
                $price = $rows[$i][27];
                $amount = $rows[$i][28];
                $amount_dollar = $rows[$i][31];
                $gl_number = $rows[$i][40];
                $gl_description = $rows[$i][41];
                $cost_center = $rows[$i][42];
                $cost_description = $rows[$i][43];
                $pch_code = $rows[$i][44];

                $no_po_sap = explode("-", trim($no_po_sap_urut));
                    $item_no = substr($item_description,0,7); //get 7 char kode item


                    $actual = AccInvoiceReceiveReport::where('document_no', $document_no)
                    ->select('document_no')
                    ->first();

                    if (count($actual) == 0) { //kalo insert

                     $data2 = AccInvoiceReceiveReport::create([
                        'tanggal_upload' => date('Y-m-d'),
                        'currency' => $currency,
                        'vendor_code' => $vendor_code,
                        'vendor_name' => $vendor_name,
                        'receive_date' => $receive_date,
                        'document_no' => $document_no,
                        'invoice_no' => $invoice_no,
                        'no_po_sap' => (int)$no_po_sap[0],
                        'no_urut' => $no_po_sap[1],
                        'no_po' => $no_po,
                        'category' => $category,
                        'material' => $material,
                        'item_no' => $item_no,
                        'item_description' => $item_description,
                        'qty' => $qty,
                        'uom' => $uom,
                        'price' => $price,
                        'amount' => $amount,
                        'amount_dollar' => $amount_dollar,
                        'gl_number' => $gl_number,
                        'gl_description' => $gl_description,
                        'cost_center' => $cost_center,
                        'cost_description' => $cost_description,
                        'pch_code' => $pch_code,
                        'created_by' => Auth::id()
                    ]);

                     $data2->save();

                 } else if (count($actual) > 0){ 

                    $data2 = AccInvoiceReceiveReport::where('document_no','=',$document_no)
                    ->update([
                        'tanggal_upload' => date('Y-m-d'),
                        'currency' => $currency,
                        'vendor_code' => $vendor_code,
                        'vendor_name' => $vendor_name,
                        'receive_date' => $receive_date,
                        'document_no' => $document_no,
                        'invoice_no' => $invoice_no,
                        'no_po_sap' => (int)$no_po_sap[0],
                        'no_urut' => $no_po_sap[1],
                        'no_po' => $no_po,
                        'category' => $category,
                        'material' => $material,
                        'item_no' => $item_no,
                        'item_description' => $item_description,
                        'qty' => $qty,
                        'uom' => $uom,
                        'price' => $price,
                        'amount' => $amount,
                        'amount_dollar' => $amount_dollar,
                        'gl_number' => $gl_number,
                        'gl_description' => $gl_description,
                        'cost_center' => $cost_center,
                        'cost_description' => $cost_description,
                        'pch_code' => $pch_code,
                        'created_by' => Auth::id()
                    ]);
                }
            }       

            $response = array(
                'status' => true,
                'message' => 'Upload Berhasil',
            );
            return Response::json($response);

        }catch(\Exception $e){
            $response = array(
                'status' => false,
                'message' => $e->getMessage(),
            );
            return Response::json($response);
        }
    }else{
        $response = array(
            'status' => false,
            'message' => 'Upload failed, File not found',
        );
        return Response::json($response);
    }
}

public function invoice_fetch_receive_data(Request $request){
    $tanggal = $request->get("tanggal");

    $qry = "select * from acc_invoice_receive_reports where tanggal_upload = '".$tanggal."' ";

    $bud = DB::select($qry);

    $response = array(
        'status' => true,
        'datas' => $bud
    );

    return Response::json($response); 
}

public function index_invoice(){

    $title = "Tanda Terima";
    $title_jp = "領収書";

    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $payment_term = AccInvoicePaymentTerm::select('*')->whereNull('deleted_at')
    ->distinct()
    ->get();

    // $no_po = AccInvoiceReceiveReport::select('no_po_sap')->whereNull('deleted_at')
    // ->distinct()
    // ->get();

    // $surat_jalan = AccInvoiceReceiveReport::select('invoice_no')->whereNull('deleted_at')
    // ->distinct()
    // ->get();

    return view('accounting_purchasing.invoice.tanda_terima', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'vendor' => $vendor,
        'payment_term' => $payment_term,
        // 'no_po' => $no_po,
        // 'surat_jalan' => $surat_jalan
    ));

}

public function fetch_invoice(){
    $invoice = db::select("SELECT
            *
        FROM
        acc_invoices
        Where category = 'General'
        order by id desc
        ");

    $response = array(
        'status' => true,
        'invoice' => $invoice
    );
    return Response::json($response);
}

public function create_invoice(Request $request){
    try{

        $tujuan_upload = 'files/invoice';

        $file = $request->file('file_attach');
        if ($file != null || $file != "") {
            $nama = $file->getClientOriginalName();
            $filename = pathinfo($nama, PATHINFO_FILENAME);
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename = md5($filename.date('YmdHisa')).'.'.$extension;
            $file->move($tujuan_upload,$filename);
        }else{
            $filename = null;
        }

        $detail = null;

        if ($request->input('category') != "General") {
            $detail = $request->input('detail_item');   
        }else{
            $detail = null;
        }
        
        $invoice = new AccInvoice([
            'category' => $request->input('category'),
            'invoice_date' => $request->input('invoice_date'),
            'supplier_code' => $request->input('supplier_code'),
            'supplier_name' => $request->input('supplier_name'),
            // 'kwitansi' => $request->input('kwitansi'),
            'invoice_no' => $request->input('invoice_no'),
            'surat_jalan' => $request->input('surat_jalan'),
            'bap' => $request->input('bap'),
            'npwp' => $request->input('npwp'),
            'faktur_pajak' => $request->input('faktur_pajak'),
            'po_number' => $request->input('po_number'),
            'detail_item' => $detail,
            'payment_term' => $request->input('payment_term'),
            'surat_jalan' => $request->input('surat_jalan'),
            'currency' => $request->input('currency'),
            'amount' => $request->input('amount'),
            'mirai_amount' => $request->input('amount'),
            'do_date' => $request->input('do_date'),
            'due_date' => $request->input('due_date'),
            'distribution_date' => $request->input('distribution_date'),
            'file' => $filename,
            'created_by' => Auth::user()->username,
            'created_name' => Auth::user()->name
        ]);

        $invoice->save();

        $response = array(
            'status' => true,
            'message' => 'New Invoice Successfully Added'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function fetch_invoice_detail(Request $request){
    $invoice = AccInvoice::find($request->get('id'));

    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $payment_term = AccInvoicePaymentTerm::select('*')->whereNull('deleted_at')
    ->distinct()
    ->get();

    $no_po = AccInvoiceReceiveReport::select('no_po_sap')->whereNull('deleted_at')
    ->distinct()
    ->get();

    $surat_jalan = AccInvoiceReceiveReport::select('invoice_no')->whereNull('deleted_at')
    ->distinct()
    ->get();

    $response = array(
        'status' => true,
        'invoice' => $invoice,
        'vendor' => $vendor,
        'payment_term' => $payment_term,
        'no_po' => $no_po,
        'surat_jalan' => $surat_jalan
    );
    return Response::json($response);
}

public function edit_invoice(Request $request){
    try{
        $invoice = AccInvoice::where('id', '=', $request->get('id_edit'))->first();

        $invoice->invoice_date = $request->input('invoice_date');
        $invoice->supplier_code = $request->input('supplier_code');
        $invoice->supplier_name = $request->input('supplier_name');
        $invoice->kwitansi = $request->input('kwitansi');
        $invoice->invoice_no = $request->input('invoice_no');
        // $invoice->surat_jalan = $request->input('surat_jalan');
        $invoice->bap = $request->input('bap');
        $invoice->npwp = $request->input('npwp');
        $invoice->faktur_pajak = $request->input('faktur_pajak');
        // $invoice->po_number = $request->input('po_number');
        $invoice->payment_term = $request->input('payment_term');
        // $invoice->surat_jalan = $request->input('surat_jalan');
        $invoice->currency = $request->input('currency');
        $invoice->amount = $request->input('amount');
        $invoice->do_date = $request->input('do_date');
        $invoice->due_date = $request->input('due_date');
        $invoice->distribution_date = $request->input('distribution_date');
        $invoice->created_by = Auth::user()->username;
        $invoice->save();

        $response = array(
            'status' => true,
            'message' => 'Invoice Updated'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function report_invoice($id){


    $inv = AccInvoice::find($id);

    if ($inv->invoice_date > "2022-05-11") {
        $invoice = AccInvoice::join('acc_suppliers','acc_invoices.supplier_code','=','acc_suppliers.vendor_code')
        ->where('acc_invoices.id','=',$id)->first();
    }
    else{
        $invoice = AccInvoice::join('acc_suppliers_olds','acc_invoices.supplier_code','=','acc_suppliers_olds.vendor_code')
        ->where('acc_invoices.id','=',$id)->first();
    }

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('accounting_purchasing.invoice.report_invoice', array(
        'invoice' => $invoice,
        'id' => $id
    ));
    return $pdf->stream("Tanda Terima ".$invoice->invoice_no. ".pdf");
}

public function export_tanda_terima(Request $request){

    $time = date('d-m-Y H;i;s');
    $tanggal = "";

    if (strlen($request->get('datefrom')) > 0)
    {
        $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
        $tanggal = "and invoice_date >= '" . $datefrom . " 00:00:00' ";
        if (strlen($request->get('dateto')) > 0)
        {
            $dateto = date('Y-m-d', strtotime($request->get('dateto')));
            $tanggal = $tanggal . "and invoice_date  <= '" . $dateto . " 23:59:59' ";
        }
    }

    $tanda_terima = db::select(
        "Select acc_invoices.* from acc_invoices join acc_suppliers on acc_invoices.supplier_code = acc_suppliers.vendor_code WHERE acc_invoices.deleted_at IS NULL " . $tanggal . " order by acc_invoices.id ASC");
        // and acc_purchase_orders.posisi = 'pch' and acc_purchase_orders.`status` = 'not_sap' and no_po_sap is null 

    $data = array(
        'tanda_terima' => $tanda_terima
    );

    ob_clean();

    Excel::create('Tanda Terima List '.$time, function($excel) use ($data){
        $excel->sheet('Location', function($sheet) use ($data) {
          return $sheet->loadView('accounting_purchasing.invoice.invoice_excel', $data);
      });
    })->export('xlsx');
}

    //=============================================================//
    //                     FIXED ASSET                             //
    //=============================================================//

public function indexFixedAssetMonitoring(){
    $title = 'Fixed Asset Audit Monitoring';
    $title_jp = '固定資産監査・監視';

    $period = DB::SELECT("SELECT DISTINCT
        ( period ),
        DATE_FORMAT( period, '%Y-%m' ) AS `month`,
        DATE_FORMAT( period, '%b %Y' ) AS `month_name` 
        FROM
        fixed_asset_audits");

    $loc = FixedAssetAudit::distinct()->select('location')->get();

    return view('fixed_asset.monitoring', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'period' => $period,
        'loc' => $loc
    ))->with('page', 'Fixed Asset'); 
}

public function indexFixedAssetMonitoring2(){
    $title = 'Fixed Asset Audit Monitoring';
    $title_jp = '固定資産監査・監視';

    $period = DB::SELECT("SELECT DISTINCT
        ( period ),
        DATE_FORMAT( period, '%Y-%m' ) AS `month`,
        DATE_FORMAT( period, '%b %Y' ) AS `month_name` 
        FROM
        fixed_asset_audits");

    $loc = FixedAssetAudit::distinct()->select('location')->get();

    return view('fixed_asset.monitoring_internal', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'period' => $period,
        'loc' => $loc
    ))->with('page', 'Fixed Asset'); 
}

public function indexFixedAssetMonitoringApproval()
{
    $title = 'Fixed Asset Approval Monitoring';
    $title_jp = '';

    return view('fixed_asset.monitoring_approval', array(
        'title' => $title,
        'title_jp' => $title_jp,        
    ))->with('page', 'Fixed Asset'); 
}

public function fetchFixedAssetMonitoringApproval(Request $request)
{


    $reg_out = FixedAssetInvoice::leftJoin('fixed_asset_registrations', 'fixed_asset_registrations.form_number', '=', 'fixed_asset_invoices.form_id')
    ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
    ->leftJoin(db::raw('employee_syncs es'), 'es.employee_id', '=', 'fixed_asset_invoices.created_for')
    ->where('fixed_asset_registrations.status', '<>', 'finished')
    ->select('fixed_asset_registrations.id','form_id', 'asset_name', 'pic', 'employee_syncs.name', db::raw('es.name as nm'), 'sap_id', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'update_fa_at', 'fixed_asset_registrations.created_by', 'fixed_asset_invoices.department', 'fixed_asset_registrations.created_at');

    $dispo_out = FixedAssetDisposal::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_disposals.created_by')
    ->where('status', '<>', 'finished');

    $dispo_scrap_out = FixedAssetDisposalScrap::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_disposal_scraps.created_by')
    ->where('status', '<>', 'finished');

    $transfer_out = FixedAssetTransfer::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_transfers.created_by')
    ->where('status', '<>', 'finished');

    $label_out = FixedAssetLabel::get();

    if (count($request->get('status')) > 0 ) {
        if ($request->get('status') == 'registration') {
            $reg_out = $reg_out->whereRaw('((asset_name IS NULL AND employee_syncs.name = "'.Auth::user()->name.'") OR (manager_app_date IS NULL AND manager_app LIKE "'.Auth::user()->username.'%" AND update_fa_at IS NOT NULL) OR (manager_acc_date IS NULL AND manager_acc LIKE "'.Auth::user()->username.'%" AND manager_app_date IS NOT NULL) OR (update_fa_at IS NULL AND "PI0905001" = "'.Auth::user()->username.'" AND asset_name IS NOT NULL))');
        } else if ($request->get('status') == 'disposal') {
            $dispo_out = $dispo_out->whereRaw('((pic_app_date IS NULL AND pic_app LIKE "'.Auth::user()->name.'%") OR (fa_app_date IS NULL AND fa_app LIKE "'.Auth::user()->name.'%" AND pic_app_date IS NOT NULL) OR (manager_app_date IS NULL AND manager_app LIKE "'.Auth::user()->name.'%" AND fa_app_date IS NOT NULL) OR (manager_disposal_app_date IS NULL AND manager_disposal_app LIKE "'.Auth::user()->name.'%" AND manager_app_date IS NOT NULL) OR (dgm_app_date IS NULL AND dgm_app LIKE "'.Auth::user()->name.'%" AND manager_disposal_app IS NOT NULL) OR (gm_app_date IS NULL AND gm_app LIKE "'.Auth::user()->name.'%" AND dgm_app_date IS NOT NULL) OR (manager_acc_app_date IS NULL AND manager_acc_app LIKE "'.Auth::user()->name.'%" AND gm_app_date IS NOT NULL) OR (director_fin_app_date IS NULL AND director_fin_app LIKE "'.Auth::user()->name.'%" AND manager_acc_app_date IS NOT NULL) OR (presdir_app_date IS NULL AND presdir_app LIKE "'.Auth::user()->name.'%" AND director_fin_app_date IS NOT NULL) OR (new_pic_app_date IS NULL AND new_pic_app LIKE "'.Auth::user()->name.'%" AND presdir_app_date IS NOT NULL))');
        } else if ($request->get('status') == 'transfer') {
            $transfer_out = $transfer_out->whereRaw('((approval_pic_date IS NULL AND approval_pic LIKE "'.Auth::user()->username.'%") OR (approval_manager_date IS NULL AND approval_manager LIKE "'.Auth::user()->username.'%" AND approval_pic_date IS NOT NULL) OR (approval_new_pic_date IS NULL AND approval_new_pic LIKE "'.Auth::user()->username.'%" AND approval_manager_date IS NOT NULL) OR (approval_new_manager_date IS NULL AND approval_new_manager LIKE "'.Auth::user()->username.'%" AND approval_new_pic_date IS NOT NULL) OR (receive_acc_date IS NULL AND "PI0905001" = "'.Auth::user()->username.'" AND approval_new_manager_date IS NOT NULL))');
        }
    }

    $reg_out = $reg_out->get();
    $dispo_out = $dispo_out->get();
    $dispo_scrap_out = $dispo_scrap_out->get();
    $transfer_out = $transfer_out->get();

    $grafik = db::select("SELECT DATE_FORMAT(fixed_asset_invoices.created_at,'%Y %b') as mon,
        fixed_asset_registrations.form_number,
        'registrasi' as form,
        IF(fixed_asset_registrations.status = 'fa_receive' OR fixed_asset_registrations.status = 'finished', 'close', 'open') as stat
        from fixed_asset_invoices
        left join fixed_asset_registrations on fixed_asset_invoices.form_id = fixed_asset_registrations.form_number
        where fixed_asset_registrations.deleted_at is null and fixed_asset_invoices.deleted_at is null
        union all
        SELECT DATE_FORMAT(created_at,'%Y %b') as mon, form_number, 'disposal' as form, IF(`status` = 'finished', 'close', 'open') as stat from fixed_asset_disposals where deleted_at is null
        union all
        select DATE_FORMAT(created_at,'%Y %b') as mon, form_number, 'transfer' as form, IF(`status` = 'finished', 'close', 'open') as stat from fixed_asset_transfers where deleted_at is null");

    $dpt_manager = db::select("SELECT department, approver_id, approver_name from approvers where remark = 'Manager'");

    $response = array(
        'status' => true,
        'registrations' => $reg_out,
        'disposals' => $dispo_out,
        'disposal_scraps' => $dispo_scrap_out,
        'transfer' => $transfer_out,
        'labels' => $label_out,
        'grafik' => $grafik,
        'managers' => $dpt_manager,
    );
    return Response::json($response);
}

public function fetchFixedAssetMonitoring(Request $request)
{
    try {

        if ($request->get('period') == '') {
            $period = DB::SELECT("SELECT
                DATE_FORMAT( period, '%Y-%m' ) AS `month` 
                FROM
                fixed_asset_audits 
                ORDER BY
                period DESC 
                LIMIT 1");
            $periods = $period[0]->month;
        }else{
            $periods = $request->get('period');
        }

        $cat = '';
        if ($request->get('category') == '') {
            $category = "a.category in ('Vendor')";
            $cat = 'Vendor';
        } else if ($request->get('category') == 'Vendor') {
            $category = "a.category in ('Vendor')";
            $cat = 'Vendor';
        } else if ($request->get('category') == 'YMPI') {
            $category = "a.category in ('YMPI')";
            $cat = 'YMPI';
        } else if ($request->get('category') == 'All') {
            $category = "a.category in ('YMPI', 'Vendor')";
            $cat = 'All';
        }

        if ($request->get('location') == '') {
            $location = '';
        }else {
            $location = "AND a.location = '".$request->get('location')."'";
        }

        $monthTitle = date("F Y", strtotime($periods.'-01'));

        if ($request->get('category') == 'Vendor' || $request->get('category') == '') {
            $datas = DB::SELECT("SELECT a.location, a.category, sum( a.plan ) AS plan, sum( a.done ) AS done FROM (
                SELECT location, category, count( id ) AS plan, 0 AS done FROM fixed_asset_audits WHERE DATE_FORMAT( period, '%Y-%m' ) = '".$periods."' GROUP BY location, category UNION ALL SELECT location, category, 0 AS plan, count( id ) AS done 
                FROM fixed_asset_audits WHERE `status` = 'Close' AND DATE_FORMAT( period, '%Y-%m' )= '".$periods."' GROUP BY location, category ) a 
                where ".$category." ".$location."
                GROUP BY a.location, a.category");
        } else if ($request->get('category') == 'YMPI' || $request->get('category') == 'All') {
            $datas = DB::SELECT("SELECT a.asset_section, a.category, sum( a.plan ) AS plan, sum( a.done ) AS done FROM (
                SELECT asset_section, category, count( id ) AS plan, 0 AS done FROM fixed_asset_audits WHERE DATE_FORMAT( period, '%Y-%m' ) = '".$periods."' GROUP BY asset_section, category UNION ALL SELECT asset_section, category, 0 AS plan, count( id ) AS done 
                FROM fixed_asset_audits WHERE `status` = 'Close' AND DATE_FORMAT( period, '%Y-%m' )= '".$periods."' GROUP BY asset_section, category ) a 
                where ".$category." ".$location."
                GROUP BY a.asset_section, a.category");
        }

        if ($request->get('category') == '') {
            $where = "fixed_asset_audits.category in ('Vendor')";
        } else if ($request->get('category') == 'Vendor') {
            $where = "fixed_asset_audits.category in ('Vendor')";
        } else if ($request->get('category') == 'YMPI') {
            $where = "fixed_asset_audits.category in ('YMPI')";
        } else if ($request->get('category') == 'All') {
            $where = "fixed_asset_audits.category in ('YMPI', 'Vendor')";
        }

        $resume = db::select( "SELECT count(fixed_asset_audits.id) as total_asset, 
            SUM(IF(fixed_asset_audits.status = 'Close', 1, 0)) as close_asset,
            SUM(IF(fixed_asset_audits.status = 'Open', 1, 0)) as open_asset, 
            SUM(IF(fixed_asset_audits.availability = 'Ada', 1, 0)) as ada_asset,
            SUM(IF(fixed_asset_audits.availability = 'Tidak Ada', 1, 0)) as tidak_ada_asset,
            SUM(IF(fixed_asset_audits.asset_condition = 'Rusak', 1, 0)) as rusak_asset,
            SUM(IF(fixed_asset_audits.label_condition = 'Rusak', 1, 0)) as label_asset,
            SUM(IF(fixed_asset_audits.usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan_asset,
            SUM(IF(fixed_asset_audits.map_condition = 'Tidak Sesuai', 1, 0)) as tidak_map_asset,
            SUM(IF(fixed_asset_audits.asset_image_condition = 'Tidak Sesuai', 1, 0)) as tidak_foto_asset,
            SUM(IF(fixed_asset_checks.status= 'Check 1', 1, 0)) as cek1,
            SUM(IF(fixed_asset_checks.status= 'Check 2' AND fixed_asset_checks.appr_manager_at is null, 1, 0)) as cek2
            from fixed_asset_audits
            left join fixed_asset_checks on fixed_asset_audits.sap_number = fixed_asset_checks.sap_number and fixed_asset_audits.period = fixed_asset_checks.period
            where fixed_asset_audits.period = '".$periods."-01'
            and ".$where);

        $period = date('Y F', strtotime($periods."-01"));
        $year = date('Y', strtotime($periods."-01"));

        // --  Summary --

        $summary = db::select("SELECT asset_section,
            count(fixed_asset_audits.id) as total_asset,
            SUM(IF(fixed_asset_audits.availability = 'Ada', 1, 0)) as ada_asset,
            SUM(IF(fixed_asset_audits.availability = 'Tidak Ada', 1, 0)) as tidak_ada_asset,
            SUM(IF(fixed_asset_audits.asset_condition = 'Rusak', 1, 0)) as rusak_asset,
            SUM(IF(fixed_asset_audits.usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan_asset,
            SUM(IF(fixed_asset_audits.label_condition = 'Rusak', 1, 0)) as label_asset,
            SUM(IF(fixed_asset_audits.map_condition = 'Tidak Sesuai', 1, 0)) as tidak_map_asset,
            SUM(IF(fixed_asset_audits.asset_image_condition = 'Tidak Sesuai', 1, 0)) as tidak_foto_asset
            FROM `fixed_asset_audits` where period = '".$periods."-01'
            GROUP BY asset_section");


        $summ = FixedAssetSummary::where('period', $periods.'-01')
        ->select('prepared_by', db::raw('DATE_FORMAT(prepare_date, "%d %b %Y") as prepare_date'), 'acc_manager', db::raw('DATE_FORMAT(acc_manager_at, "%d %b %Y") as acc_manager_at'), 'finance_director', db::raw('DATE_FORMAT(finance_director_at, "%d %b %Y") as finance_director_at'), 'president_director', db::raw('DATE_FORMAT(president_director_at, "%d %b %Y") as president_director_at'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_date'))
        ->first();

        $response = array(
            'status' => true,
            'datas' => $datas,
            'monthTitle' => $monthTitle,
            'category' => $cat,
            'resume' => $resume,
            'period' => $period,
            'year' => $year,
            'summary' => $summary,
            'summ_appr' => $summ
        );
        return Response::json($response);
    } catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function fetchFixedAssetMonitoringDetail(Request $request)
{
    try {
        DB::enableQueryLog();
        if ($request->get('period') == '') {
            $period = DB::SELECT("SELECT
                DATE_FORMAT( period, '%Y-%m' ) AS `month` 
                FROM
                fixed_asset_audits 
                ORDER BY
                period DESC 
                LIMIT 1");
            $periods = $period[0]->month;
        }else{
            $periods = $request->get('period');
        }


        $details = FixedAssetAudit::where('period', '=', $periods.'-01');

        if ($request->get('category') == '') {
            $details = $details->whereIn('category', ['Vendor']);
            $category = 'Vendor';
        } else if ($request->get('category') == 'Vendor') {
            $details = $details->whereIn('category', ['Vendor']);
            $category = 'Vendor';
        } else if ($request->get('category') == 'YMPI') {
            $details = $details->whereIn('category', ['YMPI']);
            $category = 'YMPI';
        } else if ($request->get('category') == 'All') {
            $details = $details->whereIn('category', ['YMPI', 'Vendor']);
            $category = 'All';
        }

        if ($request->get('condition') == 'Open' || $request->get('condition') == 'Close') {
            $details = $details->where('status', '=', $request->get('condition'));
        } else if ($request->get('condition') == 'Audited') {
            $details = $details->where('status', '=', 'Close');
        } else if ($request->get('condition') == 'Asset Condition') {
            $details = $details->where('asset_condition', '=', 'Rusak');
        } else if ($request->get('condition') == 'Label Condition') {
            $details = $details->where('label_condition', '=', 'Rusak');
        } else if ($request->get('condition') == 'Usable Condition') {
            $details = $details->where('usable_condition', '=', 'Tidak Digunakan');
        } else if ($request->get('condition') == 'Map Condition') {
            $details = $details->where('map_condition', '=', 'Tidak Sesuai');
        } else if ($request->get('condition') == 'Asset Image Condition') {
            $details = $details->where('asset_image_condition', '=', 'Tidak Sesuai');
        } 

        if ($request->get('location') != '' && ($request->get('category') == 'YMPI' || $request->get('category') == 'All')) {
            $details = $details->where('asset_section', '=', $request->get('location'));
        } else if ($request->get('location') != '' && ($request->get('category') == '' || $request->get('category') == 'Vendor')) {
            $details = $details->where('location', '=', $request->get('location'));
        }

        $details = $details->select('category', 'sap_number', 'asset_name', 'asset_images', 'result_images', 'result_video', 'note', 'availability', 'asset_condition', 'label_condition', 'usable_condition', 'map_condition', 'asset_image_condition', 'status', 'fixed_asset_audits.checked_by', 'location')
        ->orderBy('sap_number', 'desc')->get();

        $monthTitle = date("F Y", strtotime($periods.'-01'));

        $response = array(
            'status' => true,
            'details' => $details,
            'monthTitle' => $monthTitle,
            'category' => $category,
            'location' => $request->get('location'),
            'query' => DB::getQueryLog()
        );
        return Response::json($response);
    } catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function reportPDFSummary(Request $request)
{
    if ($request->get('period') == '') {
        $periods = DB::SELECT("SELECT
            DATE_FORMAT( period, '%Y-%m-%d' ) AS `month` 
            FROM
            fixed_asset_audits 
            ORDER BY
            period DESC 
            LIMIT 1");
        $period = $periods[0]->month;
    } else {
        $period = date('Y-m-d', strtotime($request->get('period').'-01'));
    }

    $asset_summary = FixedAssetSummary::firstOrNew(array('period' => $period));
    $asset_summary->location = $request->get('location');
    $asset_summary->status = 'Approval';
    $asset_summary->attachment = $request->get('location')."_".$period.".pdf";
    $asset_summary->prepared_by = 'PI0905001/Ismail Husen';

    $mngr_acc = EmployeeSync::where('department', 'Accounting Department')->whereNull('end_date')->where('position', 'like', 'Manager%')->first();
    $asset_summary->acc_manager = $mngr_acc->employee_id.'/'.$mngr_acc->name;

    $fin_dir = EmployeeSync::where('division', 'Finance Division')->whereNull('end_date')->where('position', 'like', 'Director%')->first();
    $asset_summary->finance_director = $fin_dir->employee_id.'/'.$fin_dir->name;
    
    $presdir = EmployeeSync::whereNull('end_date')->where('position', 'like', 'President Director%')->first();
    $asset_summary->president_director = $presdir->employee_id.'/'.$presdir->name;
    
    $asset_summary->created_by = strtoupper(Auth::user()->username);
    $asset_summary->save();


    $summary = db::select("SELECT asset_section,
        count(fixed_asset_audits.id) as total_asset,
        SUM(IF(fixed_asset_audits.availability = 'Ada', 1, 0)) as ada_asset,
        SUM(IF(fixed_asset_audits.availability = 'Tidak Ada', 1, 0)) as tidak_ada_asset,
        SUM(IF(fixed_asset_audits.asset_condition = 'Rusak', 1, 0)) as rusak_asset,
        SUM(IF(fixed_asset_audits.usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan_asset,
        SUM(IF(fixed_asset_audits.label_condition = 'Rusak', 1, 0)) as label_asset,
        SUM(IF(fixed_asset_audits.map_condition = 'Tidak Sesuai', 1, 0)) as tidak_map_asset,
        SUM(IF(fixed_asset_audits.asset_image_condition = 'Tidak Sesuai', 1, 0)) as tidak_foto_asset
        FROM `fixed_asset_audits` 
        where period = '".$period."'
        GROUP BY asset_section");
        // and category = '".$request->get('location')."' 

    $sign = FixedAssetSummary::where('period', $period)
    ->select('location', 'status', 'prepared_by', db::raw('DATE_FORMAT(prepare_date, "%d %b %Y") as prepare_date'), 'acc_manager', db::raw('DATE_FORMAT(acc_manager_at, "%d %b %Y") as acc_manager_at'), 'finance_director', db::raw('DATE_FORMAT(finance_director_at, "%d %b %Y") as finance_director_at'), 'president_director', db::raw('DATE_FORMAT(president_director_at, "%d %b %Y") as president_director_at'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_date'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'landscape');

    $pdf->loadView('fixed_asset.report_file.summary_report', array(
        'datas' => $summary,
        'sign' => $sign,
        'periode' => date('M Y', strtotime($period))
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_summary/".$request->get('location')."_".$period.".pdf");

    // --------------  CREATE APPROVAL -------------------

    $id = Auth::id();

    $tahun = date("y");
    $bulan = date("m");
    $prefix_now = $tahun.$bulan;

    $dept = "AC";     

    $code_generator = CodeGenerator::where('note','=','appr')->first();
    if ($prefix_now != $code_generator->prefix){
        $code_generator->prefix = $prefix_now;
        $code_generator->index = '0';
        $code_generator->save();
    }

    $numbers = sprintf("%'.0" . $code_generator->length . "d", $code_generator->index+1);
    $no_appr = $dept . $code_generator->prefix . $numbers;
    $code_generator->index = $code_generator->index+1;
    $code_generator->save();

    $no_approval = $no_appr;
    
    $nama_file = 'ADG'.$no_approval.'.pdf';
    copy('files/fixed_asset/report_summary/'.$request->get('location')."_".$period.".pdf", 'adagio/'.$nama_file);

    $tanggal = date('Y-m-d');

    $master = ApprMasters::where('judul', '=', 'Result Audit Fixed Asset')->where('department', '=', 'Accounting Department')->get();

    $approval = [];
    $category = [];

    for ($i=0; $i < count($master) ; $i++) {
        array_push($approval, $master[$i]->user);
        array_push($category, $master[$i]->category);
    }

    $data = new ApprSend([
        'no_transaction'  => $no_approval,
        'judul'           => 'Result Audit Fixed Asset',
        'category'        => 'Result Audit Fixed Asset',
        'nik'             => 'PI1505346/Ismail Husen',
        'department'      => 'Accounting Department',
        'description'     => 'Result Audit Fixed Asset',
        'no_dokumen'      => $no_approval,
        'summary'         => "Lokasi ".$request->get('location')." Periode ".date('M-Y', strtotime($period)),
        'date'            => $tanggal,
        'file'            => $nama_file, 
        'file_pdf'        => $nama_file,
        'created_by'      => $id,
        'remark'          => 'Belum Kirim Email',
        'jd_japan'        => $request->get('jd_japan')
    ]);
    $data->save();

    for($i = 0; $i < count($approval) ; $i++){
        $users = User::where('username',explode('/',$approval[$i])[0])->first();
        $appr = new ApprApprovals([
          'request_id'      => $no_approval, 
          'approver_id'     => explode('/',$approval[$i])[0],
          'approver_name'   => explode('/',$approval[$i])[1], 
          'approver_email'  => $users->email,
          'remark'          => explode('/',$approval[$i])[2],
          'header'          => explode('/',$approval[$i])[3].'/'.explode('/',$approval[$i])[4]
      ]);

        $appr->save();
    }

    $file = ApprSend::where('no_transaction', '=', $no_approval)
    ->select('no_transaction', 'judul', 'no_dokumen', 'nik', 'department', 'description', 'date', 'file', 'created_by', 'created_at', 'jd_japan')
    ->first();

    $isi = ApprApprovals::where('request_id', '=', $no_approval)
    ->select('request_id', 'approver_id', 'approver_name', 'status', 'approved_at', 'remark', 'header')
    ->get();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('auto_approve.report.tanda_tangan', array(
        'isi' => $isi,
        'file' => $file
    ));

    $pdf->save(public_path() . "/adagio/ttd/ADG".$data->no_transaction.".pdf");

    // ------- SEND MAIL APPROVAL ---------

    $file = ApprSend::where('no_transaction', '=', $data->no_transaction)->first();
    $file->remark = 'Open';
    $file->save();   

    $mail_to = ApprApprovals::where('request_id', '=', $data->no_transaction)
    ->wherenull('status')
    ->select('approver_email')
    ->first();

    $mail = [];
    array_push($mail, $mail_to->approver_email);

    $appr_sends = ApprSend::where('no_transaction', '=', $data->no_transaction)
    ->select('id', 'no_transaction', 'judul', 'category', 'no_dokumen', 'nik', 'department', 'description', 'date', 'file', 'file_pdf', 'created_by', 'created_at', 'deleted_at', 'updated_at', 'remark', 'summary', 'jd_japan')
    ->first();

    $appr_approvals = ApprApprovals::where('request_id', '=', $data->no_transaction)
    ->select('request_id', 'approver_id', 'approver_name', 'status', 'approved_at', 'remark', 'header')
    ->get();

    $data = [
        'appr_sends' => $appr_sends,
        'appr_approvals' => $appr_approvals,
        'mail_to' => $mail_to
    ];


    Mail::to($mail)
    ->bcc(['lukmannul.arif@music.yamaha.com'])
    ->send(new SendEmail($data, 'send_email'));

    // --- UPDATE ---
    FixedAssetSummary::where('period', '=', $period)
    ->update([
        'remark' => $no_approval,
    ]);
}

public function indexFixedAsset()
{
    $title = 'Fixed Asset';
    $title_jp = '固定資産';

    return view('fixed_asset.index', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', 'Fixed Asset');  
}

public function indexAssetRegistration()
{
    $title = 'Asset Registration Form';
    $title_jp = '資産登録処理の用紙';

    $clasification = FixedAssetClasification::select('id', 'category', 'category_code', 'clasification_name', 'life_time')->get();
    $exchange_rate = AccExchangeRate::select('currency', 'rate', 'periode')->orderBy('id', 'desc')->limit(3)->get();

    return view('fixed_asset.form.registration_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'clasification' => $clasification,
        'exchange_rate' => $exchange_rate
    ))->with('page', 'Fixed Asset Registration Form');  
}

public function indexAssetInvoice()
{
    $title = 'Asset Invoice Upload Form';
    $title_jp = '資産のインボイス用アップロード用紙';

    $inv = AccInvestment::where('category', '=', 'Investment')->select('reff_number', 'applicant_name')->get();

    return view('fixed_asset.form.invoice_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'investment' => $inv
    ))->with('page', 'Fixed Asset Invoice Upload Form');  
}

public function fetchAssetInvoice(Request $request)
{
    $data_invoice = FixedAssetInvoice::leftJoin('acc_investments', 'acc_investments.reff_number', '=', 'fixed_asset_invoices.investment_number')
    // ->where('acc_investments.applicant_id', '=', Auth::user()->username)
    ->select('fixed_asset_invoices.form_id', 'fixed_asset_invoices.investment_number', 'fixed_asset_invoices.invoice_number', 'fixed_asset_invoices.invoice_name', 'fixed_asset_invoices.fixed_asset_name', 'acc_investments.type', 'acc_investments.applicant_name', 'fixed_asset_invoices.created_at', 'fixed_asset_invoices.status', 'fixed_asset_invoices.att')
    ->get();

    $response = array(
        'status' => true,
        'invoices' => $data_invoice
    );
    return Response::json($response);
}

public function assetSendInvoice(Request $request)
{
    $mail_to = [];
    $investment_number = $request->get('investment_number');
    $len = json_decode($request->get('len'));
    
    // $invoice_num = json_decode($request->get('invoice_num'));
    // $invoice_name = json_decode($request->get('invoice_name'));
    // $invoice_file = json_decode($request->get('invoice_file'));

    // $vendor = json_decode($request->get('vendor'));
    // $currency = json_decode($request->get('currency'));
    // $amount = json_decode($request->get('amount'));
    // $amount_usd = json_decode($request->get('amount_usd'));


    $date = date('Y-m-d');
    $prefix_now = 'FAR'.date("y").date("m");
    $code_generator = CodeGenerator::where('note','=','fixed_asset_register')->first();

    if ($prefix_now != $code_generator->prefix){
        $code_generator->prefix = $prefix_now;
        $code_generator->index = '0';
        $code_generator->save();
    }

    $number = sprintf("%'.0" . $code_generator->length . "d", $code_generator->index+1);
    $form_id = $code_generator->prefix . $number;
    $code_generator->index = $code_generator->index+1;
    $code_generator->save();

    
    $inv_mail = AccInvestment::where('reff_number', '=', $investment_number)
    ->leftJoin('users', 'users.username', '=', 'acc_investments.applicant_id')
    ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'acc_investments.applicant_id')
    ->first();

    array_push($mail_to, $inv_mail->email);
    $file_name3 = [];
    $fl = null;

    try{
        for ($i=0; $i < $len; $i++) { 

            //FILE HANDLER
            if($request->hasFile('invoice_file_'.$i)) {
                $file = $request->file('invoice_file_'.$i);
                $file_name = $form_id.date('His').$i.'.'.$file->getClientOriginalExtension();
                $file->move(public_path('files/fixed_asset/'), $file_name);
            }


            //DETAIL ITEM
            // for ($z=0; $z < count($vendor); $z++) { 
            //     if ($vendor[$z]->invoice == $invoice_num[$i]) {
            //         $invoice_detail = new FixedAssetInvoiceDetail([
            //             'invoice_id' => $invoice_reg->id,
            //             'vendor' => $vendor[$z]->vendor,
            //             'currency' => $currency[$z]->currency,
            //             'amount' => $amount[$z]->amount,
            //             'amount_usd' => $amount_usd[$z]->amount_usd,
            //             'remark' => null,
            //             'created_by' => Auth::user()->username
            //         ]);
            //         $invoice_detail->save();
            //     }
            // }
            array_push($file_name3, $file_name);
        }

        if (count($file_name3) > 0) {
            $fl = implode(',', $file_name3);
        }


        $invoice_reg = new FixedAssetInvoice([
            'form_id' => $form_id,
            'investment_number' => $investment_number,
            'att' => $fl,
            'status' => 'created',
            'created_for' => $inv_mail->applicant_id,
            'department' => $inv_mail->applicant_department,
            'created_by' => Auth::user()->username
        ]);
        $invoice_reg->save();
        //SEND EMAIL

        $data_mail = FixedAssetInvoice::leftJoin('acc_investments', 'acc_investments.reff_number', '=', 'fixed_asset_invoices.investment_number')
        ->where('fixed_asset_invoices.form_id', '=', $form_id)
        ->select('fixed_asset_invoices.form_id', 'fixed_asset_invoices.investment_number', 'acc_investments.type', 'fixed_asset_invoices.att')
        ->first();

        Mail::to($mail_to)
        ->bcc(['nasiqul.ibat@music.yamaha.com'])
        ->send(new SendEmail($data_mail, 'fixed_asset_invoice'));

        $response = array(
            'status' => true,
        );
        return Response::json($response);

    } catch (Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function fetchAssetRegistration(Request $request)
{
    $asset = FixedAssetRegistration::leftJoin(db::raw('(SELECT DISTINCT category_code, clasification_name, life_time FROM fixed_asset_clasifications) cls'), 'cls.category_code', '=', 'fixed_asset_registrations.clasification_id')
    ->select('fixed_asset_registrations.id','fixed_asset_registrations.form_number','fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.location', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.request_date', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_estimation', 'fixed_asset_registrations.status', 'cls.clasification_name', 'cls.life_time','fixed_asset_registrations.reject_status', 'sap_file', db::raw('(SELECT GROUP_CONCAT(att) as atts from fixed_asset_invoices where form_id = form_number) as invoice_file' ));
    if (Auth::user()->username != 'PI0905001' && Auth::user()->username != 'PI2002021') {
        $asset = $asset->where('fixed_asset_registrations.created_by', '=', Auth::user()->username);
    }

    $asset = $asset->get();

    $req_asset = FixedAssetInvoice::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_invoices.created_for')
    ->leftjoin('fixed_asset_registrations', 'fixed_asset_invoices.form_id', '=', 'fixed_asset_registrations.form_number')
    ->leftJoin('acc_investments', 'acc_investments.reff_number', '=','fixed_asset_invoices.investment_number')
    ->leftJoin('acc_investment_budgets', 'acc_investment_budgets.reff_number', '=','fixed_asset_invoices.investment_number');
    if (Auth::user()->username != 'PI0905001') {
        $dept = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();

        if ($dept->department == 'Purchasing Control Department' || $dept->department == 'Procurement Department') {
            $req_asset = $req_asset->whereIn('fixed_asset_invoices.department', ['Purchasing Control Department', 'Procurement Department']);
        } else {
            $req_asset = $req_asset->where('fixed_asset_invoices.department', '=', $dept->department);
        }
    } else {
        $dept = FixedAssetPic::get();
    }

    $req_asset = $req_asset->whereNull('fixed_asset_registrations.form_number')
    ->select('form_id', 'fixed_asset_invoices.investment_number', 'created_for', 'name', db::raw('GROUP_CONCAT(att) as atts'), 'acc_investments.supplier_name', 'acc_investments.currency', 'acc_investment_budgets.total_ori', 'acc_investment_budgets.total', 'acc_investment_budgets.budget_no', 'employee_syncs.section', db::raw('DATE_FORMAT(fixed_asset_invoices.created_at,"%d %M %Y") as create_at'))
    ->groupBy('form_id', 'fixed_asset_invoices.investment_number', 'created_for', 'name', 'acc_investments.supplier_name', 'acc_investments.currency', 'acc_investment_budgets.total_ori', 'acc_investment_budgets.total', 'acc_investment_budgets.budget_no', 'employee_syncs.section', db::raw('DATE_FORMAT(fixed_asset_invoices.created_at,"%d %M %Y")'));

    if(strlen($request->get('form_id')) > 0 ){
        $req_asset = $req_asset->where('form_id', '=', $request->get('form_id'));
    }

    $req_asset = $req_asset->get();

    $asset_location = FixedAssetPic::whereNotNull('location')
    ->select('location', 'employee_id');

    if (Auth::user()->username != 'PI0905001') {
        if ($dept->department == 'Purchasing Control Department' || $dept->department == 'Procurement Department') {
            $asset_location = $asset_location->whereIn('department', ['Purchasing Control Department', 'Procurement Department']);
        } else {
            $asset_location = $asset_location->where('department', $dept->department);
        }
    }

    $asset_location = $asset_location->get();

    $response = array(
        'status' => true,
        'assets' => $asset,
        'asset_requests' => $req_asset,
        'location' => $asset_location
    );
    return Response::json($response);
}

public function fetchAssetRegistrationById(Request $request)
{
    $asset = FixedAssetRegistration::leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
    ->select('fixed_asset_registrations.id','fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.invoice_name', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.location', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.request_date', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.status', 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_clasifications.category', 'fixed_asset_registrations.location', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation', 'fixed_asset_registrations.asset_id', 'fixed_asset_registrations.form_number', 'fixed_asset_registrations.asset_picture')
    ->where('fixed_asset_registrations.id', '=', $request->get('id'))
    ->first();

    
    $dept = EmployeeSync::where('section', '=', $asset->pic)->whereNull('end_date')->select('department')->first();

    $asset_location = FixedAssetPic::select('location', 'employee_id')
    ->where('department', $dept->department)
    ->get();

    $response = array(
        'status' => true,
        'asset' => $asset,
        'location' => $asset_location
    );
    return Response::json($response);
}

public function assetRegistration(Request $request)
{
    $file = $request->file('asset_foto');
    $tujuan_upload = 'files/fixed_asset/registration';

    if ($file != null || $file != "") {
        $nama = $file->getClientOriginalName();
        $filename = pathinfo($nama, PATHINFO_FILENAME);
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename = $request->get('item_name').'_'.date('md').'.'.$extension;

        $file->move($tujuan_upload,$filename);

    }else{
        $filename = "";
    }

    $asset_item = new FixedAssetItem([
        'fixed_asset_name' => $request->get('item_name'),
        'invoice_number' => $request->get('invoice_number'),
        'invoice_name' => $request->get('invoice_name'),
        'clasification_code' => $request->get('clasification'),
        'vendor' => $request->get('vendor'),
        'currency' => $request->get('currency'),
        'original_amount' => $request->get('amount'),
        'amount_usd' => $request->get('amount_usd'),
        'section' => $request->get('pic'),
        'pic' => $request->get('pic_asset'),
        'location' => $request->get('location'),
        'investment' => $request->get('investment_number'),
        'budget_number' => $request->get('budget_number'),
        'usage_term' => $request->get('usage_term'),
        'usage_estimation' => $request->get('usage_est'),
        'registration_status' => 'Approval',
        'picture' => $filename,
        'status' => $request->get('form_number'),
        'created_by' => Auth::user()->username
    ]);
    $asset_item->save();

    // manager 
    $dept = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();
    $q_mngr = db::select("SELECT CONCAT(UPPER(username), '/', name) as name from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$dept->department."'");
    $manager_app = $q_mngr[0]->name;

    //manager acc
    $manager_acc = EmployeeSync::select(db::raw("CONCAT(UPPER(employee_id), '/', name) as name2"))
    ->where('department', '=', 'Accounting Department')
    ->where('position', 'like', 'Manager%')
    ->whereNull('end_date')
    ->first();


    $asset_reg = new FixedAssetRegistration([
        'form_number' => $request->get('form_number'),
        'asset_name' => $request->get('item_name'),
        'invoice_number' => $request->get('invoice_number'),
        'invoice_name' => $request->get('invoice_name'),
        'clasification_id' => $request->get('clasification'),
        'vendor' => $request->get('vendor'),
        'currency' => $request->get('currency'),
        'amount' => $request->get('amount'),
        'amount_usd' => $request->get('amount_usd'),
        'pic' => $request->get('pic'),
        'location' => $request->get('location'),
        'investment_number' => $request->get('investment_number'),
        'budget_number' => $request->get('budget'),
        'usage_term' => $request->get('usage_term'),
        'usage_estimation' => $request->get('usage_est'),
        'manager_app' => $manager_app,
        'manager_acc' => $manager_acc->name2,
        'status' => 'created',
        'asset_picture' => $filename,
        'asset_id' => $asset_item->id,
        'last_status' => 'created',
        'created_by' => Auth::user()->username
    ]);
    $asset_reg->save();


    $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $asset_reg->id)
    ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
    ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
    ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.form_number', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.created_at', 'employee_syncs.name','fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation', 'update_fa_at', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'request_date', 'sap_id', 'fixed_asset_registrations.category_code', 'fixed_asset_clasifications.category', 'fixed_asset_clasifications.life_time')
    ->first();

    // ---------------------- REPORT PDF --------------------

    $new_asset = FixedAssetRegistration::where('form_number', '=', $request->get('form_number'))
    ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
    ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
    ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.form_number', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.created_at', 'employee_syncs.name','fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation', 'update_fa_at', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'request_date', 'sap_id', 'location', 'fixed_asset_registrations.category_code', 'fixed_asset_clasifications.category', 'clasification_id', 'clasification_name', 'fixed_asset_clasifications.life_time', 'depreciation_key', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'update_fa_at')
    ->first();

    // ---------------------- REPORT PDF --------------------


    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.registration_report', array(
        'datas' => $new_asset
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_registration/Reg_".$request->get('form_number').".pdf");

    // ----------------------- APPROVAL ---------------------


    $datas = array(
        'status' => 'FA CONTROL',
        'assets' => $new_asset
    );

    Mail::to(['ismail.husen@music.yamaha.com'])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($datas, 'fixed_asset_registrations'));

    $response = array(
        'status' => true,
        'asset' => $asset_reg
    );
    return Response::json($response);
}

// public function testPdf($form_number)
// {
//     $new_asset = FixedAssetRegistration::where('form_number', '=', $form_number)
//     ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
//     ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
//     ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.form_number', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.created_at', 'employee_syncs.name','fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation', 'update_fa_at', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'request_date', 'sap_id', 'location', 'fixed_asset_registrations.category_code', 'fixed_asset_clasifications.category', 'clasification_id', 'clasification_name', 'fixed_asset_clasifications.life_time', 'depreciation_key')
//     ->first();

//     // ---------------------- REPORT PDF --------------------


//     $pdf = \App::make('dompdf.wrapper');
//     $pdf->getDomPDF()->set_option("enable_php", true);
//     $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
//     $pdf->setPaper('A4', 'potrait');

//     $pdf->loadView('fixed_asset.report_file.registration_report', array(
//         'datas' => $new_asset
//     ));

//     $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Reg_".$form_number.".pdf");
//     return $pdf->stream(public_path() . "/files/fixed_asset/report_disposal/Reg_".$form_number.".pdf");

// }

// public function reportPDFDisposal($form_number)
// {
//     // ---------------------- REPORT PDF --------------------

//     $disposal = FixedAssetDisposal::where('form_number', '=', $form_number)
//     ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'))
//     ->first();

//     $pdf = \App::make('dompdf.wrapper');
//     $pdf->getDomPDF()->set_option("enable_php", true);
//     $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
//     $pdf->setPaper('A4', 'potrait');

//     $pdf->loadView('fixed_asset.report_file.disposal_report', array(
//         'datas' => $disposal
//     ));

//     $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$form_number.".pdf");
// }

public function reportPDFDisposalScrap($form_number)
{
    $disposal_scrap = FixedAssetDisposalScrap::where('form_number', '=', $form_number)
    ->select('form_number', 'form_number_disposal', 'fixed_asset_id', 'fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'pic_app', db::raw('DATE_FORMAT(pic_app_date, "%d %b %Y") as pic_app_date'), 'manager_app', db::raw('DATE_FORMAT(manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(acc_manager_app_date, "%d %b %Y") as acc_manager_app'), 'director_app', db::raw('DATE_FORMAT(director_app_date, "%d %b %Y") as director_app_date'), 'acc_control_app', db::raw('DATE_FORMAT(acc_control_app_date, "%d %b %Y") as acc_control_app_date'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_at'))
    ->first();

    // ---------------------- REPORT PDF --------------------

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.disposal_report_scrap', array(
        'datas' => $disposal_scrap
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_disposal_scrap/Disposal_".$form_number.".pdf");
    return $pdf->stream(public_path() . "/files/fixed_asset/report_disposal_scrap/Disposal_".$form_number.".pdf");

}

public function updateAssetRegistration(Request $request)
{
    if (count($request->file('sap_file')) > 0) {
        $file = $request->file('sap_file');

        $nama = $file->getClientOriginalName();

        $filename = pathinfo($nama, PATHINFO_FILENAME);
        $extension = pathinfo($nama, PATHINFO_EXTENSION);

        $att = 'SAP_FILE_'.date('YmdHis').'.'.$extension;

        $file->move('files/fixed_asset/sap_file/', $att);

    } else {
        $att = null;
    }

    if ($request->get('sap_id')) {
        $asset_upd = FixedAssetRegistration::where('id', '=', $request->get("id"))
        ->update([
            'invoice_name' => $request->get('invoice_name'),
            'asset_name' => $request->get('item_name'),
            'invoice_number' => $request->get('invoice_number'),
            'investment_number' => $request->get('investment_number'),
            'budget_number' => $request->get('budget'),
            'vendor' => $request->get('vendor'),
            'clasification_id' => $request->get('clasification'),
            'currency' => $request->get('currency'),
            'amount' => $request->get('amount'),
            'amount_usd' => $request->get('amount_usd'),
            'pic' => $request->get('pic'),
            'location' => $request->get('location'),
            'usage_term' => $request->get('usage_term'),
            'usage_estimation' => $request->get('usage_est'),
            'category_code' => $request->get('category_code'),
            'category' => $request->get('category'),
            'sap_id' => $request->get('sap_id'),
            'request_date' => $request->get('reg_date'),
            'depreciation_key' => $request->get('depreciation'),
            'sap_file' => $att,
            'update_fa_at' => date('Y-m-d H:i:s'),
            'status' => 'filled',
            'last_status' => 'filled'
        ]);

        if (count($request->file('asset_foto')) > 0) {
            $file2 = $request->file('asset_foto');

            $nama2 = $file2->getClientOriginalName();            
            $extension2 = pathinfo($nama2, PATHINFO_EXTENSION);

            $att_asset2 = $request->get('sap_id').'.'.$extension2;

            $file2->move('files/fixed_asset/asset_picture/', $att_asset2);

            $tujuan_upload = 'files/fixed_asset/registration';
            copy('files/fixed_asset/asset_picture/'.$att_asset2, $tujuan_upload.'/'.$att_asset2);

            $asset_update = FixedAssetRegistration::where('id', '=', $request->get("id"))
            ->update([
                'asset_picture' => $att_asset2,
            ]);

            $asset_master_update = FixedAssetItem::where('sap_number', '=', $request->get("sap_id"))
            ->update([
                'picture' => $att_asset2,
            ]);
        }

        $reg_asset = FixedAssetRegistration::where('id', '=', $request->get("id"))->first(); 

        $des_upload1 = 'files/fixed_asset/registration';
        $des_upload2 = 'files/fixed_asset/asset_picture';

        copy('files/fixed_asset/registration/'.$reg_asset->asset_picture, $des_upload1.'/'.$request->get('sap_id').'.'.explode('.', $reg_asset->asset_picture)[1]);

        copy('files/fixed_asset/registration/'.$reg_asset->asset_picture, $des_upload2.'/'.$request->get('sap_id').'.'.explode('.', $reg_asset->asset_picture)[1]);

        $asset_reg_update = FixedAssetRegistration::where('id', '=', $request->get("id"))
        ->update([
            'asset_picture' => $request->get('sap_id').'.'.explode('.', $reg_asset->asset_picture)[1],
        ]);

        $asset_master_upd = FixedAssetItem::where('status', '=', $request->get("asset_id"))
        ->update([
            'invoice_name' => $request->get('invoice_name'),
            'fixed_asset_name' => $request->get('item_name'),
            'invoice_number' => $request->get('invoice_number'),
            'investment' => $request->get('investment_number'),
            'budget_number' => $request->get('budget'),
            'vendor' => $request->get('vendor'),
            'currency' => $request->get('currency'),
            'original_amount' => $request->get('amount'),
            'amount_usd' => $request->get('amount_usd'),
            'section' => $request->get('pic'),
            'location' => $request->get('location'),
            'category_code' => $request->get('category_code'),
            'category' => $request->get('category'),
            'sap_number' => $request->get('sap_id'),
            'request_date' => $request->get('reg_date'),
            'depreciation_key' => $request->get('depreciation'),
            'picture' => $request->get('sap_id').'.'.explode('.', $reg_asset->asset_picture)[1],
            'sap_file' => $att
        ]);
    } else {
        $asset_reg = FixedAssetRegistration::where('id', '=', $request->get("id"))->first();

        if ($asset_reg->status == 'hold') {
            $stat = $asset_reg->last_status;
        } else if ($asset_reg->status == 'reject') {
            $stat = 'created';
        } else {
            $stat = $asset_reg->status;
        }

        $asset_upd = FixedAssetRegistration::where('id', '=', $request->get("id"))
        ->update([
            'invoice_name' => $request->get('invoice_name'),
            'asset_name' => $request->get('item_name'),
            'invoice_number' => $request->get('invoice_number'),
            'investment_number' => $request->get('investment_number'),
            'budget_number' => $request->get('budget'),
            'vendor' => $request->get('vendor'),
            'currency' => $request->get('currency'),
            'amount' => $request->get('amount'),
            'amount_usd' => $request->get('amount_usd'),
            'pic' => $request->get('pic'),
            'location' => $request->get('location'),
            'status' => $stat,
        ]);

        $asset_master_upd = FixedAssetItem::where('status', '=', $request->get("asset_id"))
        ->update([
            'invoice_name' => $request->get('invoice_name'),
            'fixed_asset_name' => $request->get('item_name'),
            'invoice_number' => $request->get('invoice_number'),
            'investment' => $request->get('investment_number'),
            'budget_number' => $request->get('budget'),
            'vendor' => $request->get('vendor'),
            'pic' => $request->get('pic_asset'),
            'currency' => $request->get('currency'),
            'original_amount' => $request->get('amount'),
            'amount_usd' => $request->get('amount_usd'),
            'section' => $request->get('pic'),
            'location' => $request->get('location')
        ]);
    }
    

    $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $request->get("id"))
    ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
    ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
    ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.form_number', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.location', 'fixed_asset_registrations.created_at', 'employee_syncs.name', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation','fixed_asset_registrations.category', 'fixed_asset_registrations.category_code', 'fixed_asset_registrations.sap_id', 'fixed_asset_registrations.depreciation_key', db::raw('fixed_asset_clasifications.category as category_name'), 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_registrations.created_by', 'fixed_asset_registrations.sap_file', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'update_fa_at')
    ->first();

    $atts = FixedAssetInvoice::where('form_id', '=', $new_asset->form_number)->select('att')->first();

    // ---------------------- REPORT PDF --------------------


    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.registration_report', array(
        'datas' => $new_asset
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_registration/Reg_".$new_asset->form_number.".pdf");

    // --------------- Approval -----------------

    $data = [
        'assets' => $new_asset,
        'status' => 'APPROVAL MANAGER',
        'att' => $atts
    ];

    if ($request->get('sap_id')) {
        $mailto = db::select('SELECT email FROM users where username = "'.explode('/', $new_asset->manager_app)[0].'"');

        Mail::to($mailto)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
    }

    $response = array(
        'status' => true,
        'asset' => $asset_upd
    );
    return Response::json($response);
}

public function approvalAsset($id, $user, $app_stat)
{
    $title = 'Approval New Asset Registration';
    $title_jp = '??';

    if ($app_stat == 'approve') {
        $message2 = 'Successfully Approved';
        $stat = true;
        $stat2 = "approve";
        $nama = "";

        $asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $id)->first();
    } else if($app_stat == 'reject') {
        $message = 'Registration New Asset Form';
        $message2 = 'Reject & Comment';
        $stat = false;
        $stat2 = "reject";

        $asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $id)->first();

        if ($asset->status == 'created') {
            $nama = "PI0905001/Ismail Husen/".date('Y-m-d H:i:s');
        } else if ($asset->status == 'filled') {
            $nama = $asset->manager_app."/".date('Y-m-d H:i:s');
        } else if ($asset->status == 'approved_manager'){
            $nama = $asset->manager_acc."/".date('Y-m-d H:i:s');
        }
    } else if($app_stat == 'hold'){
        $message = 'Registration New Asset Form';
        $message2 = 'Hold & Comment';
        $stat = false;
        $stat2 = "hold";

        $asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $id)->first();

        if ($asset->status == 'created') {
            $nama = "PI0905001/Ismail Husen/".date('Y-m-d H:i:s');
        } else if ($asset->status == 'filled') {
            $nama = $asset->manager_app."/".date('Y-m-d H:i:s');
        } else if ($asset->status == 'approved_manager'){
            $nama = $asset->manager_acc."/".date('Y-m-d H:i:s');
        }
    }

    if ($user == 'manager_user') {
        // MANAGER APPLICANT
        $message = 'Registration New Asset Form';

        if ($asset->manager_app_date) {
            return view('fixed_asset.approval_message', array(
                'title' => $title,
                'title_jp' => $title_jp,
                'message' => $message,
                'message2' => 'Already Approved',
                'status' => true,
                'status2' => 'not allow',
                'nama' => $nama,
                'asset' => $asset
            ))->with('page', 'Fixed Asset Approval');  
        }

        if ($stat) {
            $asset_upd = FixedAssetRegistration::where('id', '=', $id)
            ->update([
                'manager_app_date' => date('Y-m-d H:i:s'),
                'status' => 'approved_manager',
                'last_status' => 'approved_manager'
            ]);

            $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $id)
            ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
            ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
            ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.location', 'fixed_asset_registrations.created_at', 'employee_syncs.name', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation','fixed_asset_registrations.category', 'fixed_asset_registrations.category_code', 'fixed_asset_registrations.sap_id', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.depreciation_key', db::raw('fixed_asset_clasifications.category as category_name'), 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_registrations.created_by', 'fixed_asset_registrations.form_number', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'update_fa_at')
            ->first();

            $atts = FixedAssetInvoice::where('form_id', '=', $new_asset->form_number)->select('att')->first();


            // ---------------------- REPORT PDF --------------------


            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.registration_report', array(
                'datas' => $new_asset
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_registration/Reg_".$new_asset->form_number.".pdf");

            $data = [
                'assets' => $new_asset,
                'status' => 'APPROVAL MANAGER FA',
                'att' => $atts
            ];

            $mailto = db::select('SELECT email FROM send_emails where remark = "Accounting Department"');

            Mail::to($mailto)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
        }
    } else if ($user == 'manager_fa') {
        // MANAGER FA
        if ($stat) {
            $message = 'Registration New Asset Form';

            if ($asset->manager_acc_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetRegistration::where('id', '=', $id)
            ->update([
                'manager_acc_date' => date('Y-m-d H:i:s'),
                'status' => 'approved_manager_fa',
                'last_status' => 'approved_manager_fa'
            ]);

            $asset_reg = FixedAssetRegistration::where('id', '=', $id)->first();

            $asset_master_upd = FixedAssetItem::where('sap_number', '=', $asset_reg->sap_id)
            ->update([
                'registration_status' => 'Done',
            ]);
        }
    }

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $nama,
        'asset' => $asset
    ))->with('page', 'Fixed Asset Approval');  
}

public function approvalComment(Request $request)
{
    if ($request->get('position') == 'Registration New Asset Form') {
        if ($request->get('stat2') == 'hold') {
            $asset_upd = FixedAssetRegistration::where('id', '=', $request->get('id_form'))
            ->update([
                'reject_status' => $request->get('nama'),
                'status' => 'hold',
                'comment' => $request->get('comment')
            ]);

            $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $request->get('id_form'))
            ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
            ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
            ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.location', 'fixed_asset_registrations.created_at', 'employee_syncs.name', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation','fixed_asset_registrations.category', 'fixed_asset_registrations.category_code', 'fixed_asset_registrations.sap_id', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.depreciation_key', db::raw('fixed_asset_clasifications.category as category_name'), 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_registrations.created_by', 'manager_app', 'manager_app_date', 'fixed_asset_registrations.form_number', 'manager_acc', 'manager_acc_date', 'update_fa_at', 'reject_status', 'comment')
            ->first();

            $atts = FixedAssetInvoice::where('form_id', '=', $new_asset->form_number)->select('att')->first();

            $data = [
                'assets' => $new_asset,
                'status' => 'HOLD',
                'att' => $atts
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', $new_asset->created_by)->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
            } else {
                $mail = db::select("SELECT email from users where username = '".$new_asset->created_by."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
            }
        } else if ($request->get('stat2') == 'reject') {
            $asset_upd = FixedAssetRegistration::where('id', '=', $request->get('id_form'))
            ->update([
                'reject_status' => $request->get('nama'),
                'manager_app_date' => null,
                'manager_acc_date' => null,
                'update_fa_at' => null,
                'status' => 'rejected',
                'comment' => $request->get('comment')
            ]);

            $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $request->get('id_form'))
            ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
            ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
            ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.location', 'fixed_asset_registrations.created_at', 'employee_syncs.name', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation','fixed_asset_registrations.category', 'fixed_asset_registrations.category_code', 'fixed_asset_registrations.sap_id', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.depreciation_key', db::raw('fixed_asset_clasifications.category as category_name'), 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_registrations.created_by', 'manager_app', 'manager_app_date', 'fixed_asset_registrations.form_number', 'manager_acc', 'manager_acc_date', 'update_fa_at','reject_status', 'comment')
            ->first();

            $atts = FixedAssetInvoice::where('form_id', '=', $new_asset->form_number)->select('att')->first();

            $data = [
                'assets' => $new_asset,
                'status' => 'REJECTED',
                'att' => $atts
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', $new_asset->created_by)->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
            } else {
                $mail = db::select("SELECT email from users where username = '".$new_asset->created_by."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
            }
        }
    } else if($request->get('position') == 'Approval Asset Transfer') {
        if ($request->get('stat2') == 'hold') {
            $asset_upd = FixedAssetTransfer::where('id', '=', $request->get('id_form'))
            ->update([
                'reject_status' => $request->get('nama'),
                'status' => 'hold',
                'comment' => $request->get('comment')
            ]);

            $data_fixed_asset = FixedAssetTransfer::leftJoin('fixed_asset_registrations', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_registrations.sap_id')
            ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
            ->where('fixed_asset_transfers.id', '=', $request->get('id_form'))
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

            $data = [
                "datas" => $data_fixed_asset,
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', $data_fixed_asset->created_by)->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            } else {
                $mail = db::select("SELECT email from users where username = '".$data_fixed_asset->created_by."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            }

        } else if ($request->get('stat2') == 'reject') {
            $asset_upd = FixedAssetTransfer::where('id', '=', $request->get('id_form'))
            ->update([
                'approval_pic_date' => null,
                'approval_manager_date' => null,
                'approval_new_pic_date' => null,
                'approval_new_manager_date' => null,
                'approval_acc_manager_date' => null,
                'reject_status' => $request->get('nama'),
                'status' => 'reject',
                'comment' => $request->get('comment')
            ]);


            $data_fixed_asset = FixedAssetTransfer::leftJoin('fixed_asset_registrations', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_registrations.sap_id')
            ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
            ->where('fixed_asset_transfers.id', '=', $request->get('id_form'))
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

            $data = [
                "datas" => $data_fixed_asset,
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', $data_fixed_asset->created_by)->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            } else {
                $mail = db::select("SELECT email from users where username = '".$data_fixed_asset->created_by."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            }
        }
    } else if ($request->get('position') == 'Request Label Asset Form') {
        if ($request->get('stat2') == 'hold') {
            $asset_upd = FixedAssetLabel::where('form_number', '=', $request->get('id_form'))
            ->update([
                'reject_status' => $request->get('nama'),
                'status' => 'hold',
                'comment' => $request->get('comment')
            ]);

            $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
            ->where('form_number', '=', $request->get('id_form'))
            ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section', 'fixed_asset_labels.pic')
            ->get();

            $data = [
                "datas" => $data_fixed_asset,
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', $data_fixed_asset[0]->pic)->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            } else {
                $mail = db::select("SELECT email from users where username = '".$data_fixed_asset[0]->pic."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            }
        } else if ($request->get('stat2') == 'reject') {
            $asset_upd = FixedAssetLabel::where('form_number', '=', $request->get('id_form'))
            ->update([
                'approval_pic_date' => null,
                'approval_acc_date' => null,
                'approval_label_acc_date' => null,
                'reject_status' => $request->get('nama'),
                'status' => 'reject',
                'comment' => $request->get('comment')
            ]);

            $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
            ->where('form_number', '=', $request->get('id_form'))
            ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section', 'fixed_asset_labels.pic')
            ->get();

            $data = [
                "datas" => $data_fixed_asset,
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', $data_fixed_asset[0]->pic)->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            } else {
                $mail = db::select("SELECT email from users where username = '".$data_fixed_asset[0]->pic."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            }
        } 
    } else if ($request->get('position') == 'Approval Disposal Asset 資産処分の承認') {
        if ($request->get('stat2') == 'hold') {
            $asset_upd = FixedAssetDisposal::where('id', '=', $request->get('id_form'))
            ->update([
                'reject_status' => $request->get('nama'),
                'status' => 'hold',
                'comment' => $request->get('comment')
            ]);


            $data_fixed_asset = FixedAssetDisposal::leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_disposals.clasification_id')
            ->where('fixed_asset_disposals.id', '=', $request->get('id_form'))
            ->select('form_number','fixed_asset_disposals.id','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_clasifications.category', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.created_by', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', $data_fixed_asset->created_by)->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
            } else {
                $mail = db::select("SELECT email from users where username = '".$data_fixed_asset->created_by."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
            }
        } else if($request->get('stat2') == 'reject') {
            $asset_upd = FixedAssetDisposal::where('id', '=', $request->get('id_form'))
            ->update([
                'pic_app_date' => null,
                'fa_app_date' => null,
                'manager_app_date' => null,
                'manager_disposal_app_date' => null,
                'gm_app_date' => null,
                'manager_acc_app_date' => null,
                'director_fin_app_date' => null,
                'presdir_app_date' => null,
                'new_pic_app_date' => null,
                'reject_status' => $request->get('nama'),
                'status' => 'reject',
                'comment' => $request->get('comment')
            ]);


            $data_fixed_asset = FixedAssetDisposal::leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_disposals.clasification_id')
            ->where('fixed_asset_disposals.id', '=', $request->get('id_form'))
            ->select('form_number','fixed_asset_disposals.id','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_clasifications.category', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.created_by', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', $data_fixed_asset->created_by)->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
            } else {
                $mail = db::select("SELECT email from users where username = '".$data_fixed_asset->created_by."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
            }
        }
    } else if ($request->get('position') == 'Report Scrap Asset') {
     if ($request->get('stat2') == 'hold') {
        $asset_upd = FixedAssetDisposalScrap::where('id', '=', $request->get('id_form'))
        ->update([
            'reject_status' => $request->get('nama'),
            'status' => 'hold',
            'comment' => $request->get('comment')
        ]);

        $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $request->get('id_form'))
        ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
        ->first();

        $data = [
            'datas' => $data_fixed_asset
        ];

        $get_pos = EmployeeSync::where('employee_id', '=', explode('/', $data_fixed_asset->officer)[0] )->select('position', 'section')->first();

    // JIKA Leader
        if (str_contains($get_pos->position,'Leader')) {
            $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } else {
            $mail = db::select("SELECT email from users where username = '".explode('/', $data_fixed_asset->officer)[0]."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        }
    } else if ($request->get('stat2') == 'reject') {
        $asset_upd = FixedAssetDisposalScrap::where('id', '=', $request->get('id_form'))
        ->update([
            'pic_app_date' => null,
            'manager_app_date' => null,
            'gm_app_date' => null,
            'acc_manager_app_date' => null,
            'director_app_date' => null,
            'acc_control_app_date' => null,
            'reject_status' => $request->get('nama'),
            'status' => 'reject',
            'comment' => $request->get('comment')
        ]);

        $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $asset_disposal_scrap->id)
        ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
        ->first();

        $data = [
            'datas' => $data_fixed_asset
        ];

        $get_pos = EmployeeSync::where('employee_id', '=', explode('/', $data_fixed_asset->officer)[0] )->select('position', 'section')->first();

    // JIKA Leader
        if (str_contains($get_pos->position,'Leader')) {
            $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } else {
            $mail = db::select("SELECT email from users where username = '".explode('/', $data_fixed_asset->officer)[0]."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        }
    }
} else if ($request->get('position') == 'Report Missing Asset') {
    if ($request->get('stat2') == 'hold') {
        $asset_upd = FixedAssetMissing::where('id', '=', $request->get('id_form'))
        ->update([
            'reject_status' => $request->get('nama'),
            'status' => 'hold',
            'comment' => $request->get('comment')
        ]);

        $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.id', '=', $request->get('id_form'))
        ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status', 'pic_app')
        ->first();

        $data = [
            'datas' => $data_fixed_asset
        ];

        $get_pos = EmployeeSync::where('employee_id', '=', explode('/', $data_fixed_asset->pic_app)[0] )->select('position', 'section')->first();

    // JIKA Leader
        if (str_contains($get_pos->position,'Leader')) {
            $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } else {
            $mail = db::select("SELECT email from users where username = '".explode('/', $data_fixed_asset->pic_app)[0]."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    } else if ($request->get('stat2') == 'reject') {
        $asset_upd = FixedAssetMissing::where('id', '=', $request->get('id_form'))
        ->update([
            'pic_app_date' => null,
            'fa_app_date' => null,
            'manager_app' => null,
            'gm_app_date' => null,
            'acc_manager_app_date' => null,
            'director_app_date' => null,
            'presdir_app_date' => null,
            'reject_status' => $request->get('nama'),
            'status' => 'reject',
            'comment' => $request->get('comment')
        ]);

        $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.id', '=', $request->get('id_form'))
        ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status', 'pic_app')
        ->first();

        $data = [
            'datas' => $data_fixed_asset
        ];

        $get_pos = EmployeeSync::where('employee_id', '=', explode('/', $data_fixed_asset->pic_app)[0] )->select('position', 'section')->first();

    // JIKA Leader
        if (str_contains($get_pos->position,'Leader')) {
            $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } else {
            $mail = db::select("SELECT email from users where username = '".explode('/', $data_fixed_asset->pic_app)[0]."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    }
} else if ($request->get('position') == 'Audit Fixed Asset') {
    if ($request->get('stat2') == 'hold') {

        $get_section = FixedAssetCheck::where('id', '=', $request->get('id_form'))->first();

        $asset_upd = FixedAssetCheck::where('asset_section', '=', $get_section->asset_section)
        ->where('period', '=', $get_section->period)
        ->update([
            'rejected_by' => $request->get('nama'),
            'rejected_at' => date('Y-m-d H:i:s'),
            'appr_status' => 'hold',
            'comment' => $request->get('comment')
        ]);

        // $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.id', '=', $request->get('id_form'))
        // ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status', 'pic_app')
        // ->first();

        // $data = [
        //     'datas' => $data_fixed_asset
        // ];

        // $get_pos = EmployeeSync::where('employee_id', '=', explode('/', $data_fixed_asset->pic_app)[0] )->select('position', 'section')->first();
    } else if ($request->get('stat2') == 'reject') {
        $get_section = FixedAssetCheck::where('id', '=', $request->get('id_form'))->first();

        $asset_upd = FixedAssetCheck::where('asset_section', '=', $get_section->asset_section)
        ->where('period', '=', $get_section->period)
        ->update([
            'rejected_by' => $request->get('nama'),
            'rejected_at' => date('Y-m-d H:i:s'),
            'appr_status' => 'reject',
            'comment' => $request->get('comment')
        ]);
    }
}
}

public function indexApprovalAsset($id, $user, $app_stat)
{
    $title = 'Approval New Asset Registration';
    $title_jp = '??';

    $message2 = 'Please Sign and Upload SAP File';
    $message = 'Registration New Asset Form';

    $req_data = FixedAssetRegistration::where('id', '=', $id)->first();

    $stat = true;

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'status' => $stat,
        'status2' => '',
        'asset' => '',
        'nama' => '',
        'reg_form' => $req_data
    ))->with('page', 'Fixed Asset Approval');  
}

public function indexApprovalAsset2($id, $app_stat)
{
    $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $id)
    ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
    ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
    ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.location', 'fixed_asset_registrations.created_at', 'employee_syncs.name', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation','fixed_asset_registrations.category', 'fixed_asset_registrations.category_code', 'fixed_asset_registrations.sap_id', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.depreciation_key', db::raw('fixed_asset_clasifications.category as category_name'), 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_registrations.created_by', 'fixed_asset_registrations.form_number', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'update_fa_at')
    ->first();

    $atts = FixedAssetInvoice::where('form_id', '=', $new_asset->form_number)->select('att')->first();
    $data = [
        'assets' => $new_asset,
        'status' => $app_stat,
        'att' => $atts,
        'versi' => 'web'
    ];

    return view('mails.fixed_asset', array(
        'data' => $data
    ))->with('page', 'Fixed Asset Approval');
}

public function indexApprovalAssetDisposal($id)
{
    $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
    ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'), 'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
    ->first();

    $data = [
        'datas' => $data_fixed_asset,
        'versi' => 'web',
    ];

    return view('mails.fixed_asset_disposal', array(
        'data' => $data
    ))->with('page', 'Fixed Asset Disposal Approval');
}

public function indexApprovalAssetTransfer($id)
{
    $data_fixed_asset = FixedAssetTransfer::where('fixed_asset_transfers.id', '=', $id)
    ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_no', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status')->first();

    $data = [
        "datas" => $data_fixed_asset,
        "versi" => 'web',
    ];

    return view('mails.fixed_asset_transfer', array(
        'data' => $data
    ))->with('page', 'Fixed Asset Transfer Approval');
}

public function uploadApprovalAsset(Request $request)
{
    $upload = false;
    if($request->hasFile('sap_file')) {
        $upload = true;
        try{                
            $file = $request->file('sap_file');
            $file_name = $request->get('file_name');
            $file->move(public_path('files/fixed_asset/sap_file/'), $file_name);

            $asset_upd = FixedAssetRegistration::where('id', '=', $request->get('id_form'))
            ->update([
                'manager_acc_date' => date('Y-m-d H:i:s'),
                'status' => 'approved_manager_fa',
                'last_status' => 'approved_manager_fa'
            ]);

            $asset_upd = FixedAssetRegistration::where('id', '=', $request->get('id_form'))
            ->update([
                'status' => 'fa_receive',
                'last_status' => 'fa_receive'
            ]);

            $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $request->get('id_form'))
            ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
            ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
            ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.location', 'fixed_asset_registrations.created_at', 'employee_syncs.name', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation','fixed_asset_registrations.category', 'fixed_asset_registrations.category_code', 'fixed_asset_registrations.sap_id', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.depreciation_key', db::raw('fixed_asset_clasifications.category as category_name'), 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_registrations.created_by', 'fixed_asset_registrations.form_number', 'manager_app', 'manager_app_date', 'manager_acc', 'manager_acc_date', 'update_fa_at')
            ->first();

            $atts = FixedAssetInvoice::where('form_id', '=', $new_asset->form_number)->select('att')->first();

            // -------------  ADD DATA LABEL  -------------

            $tahun = date('y');
            $bulan = date('m');

            $query = "SELECT form_number FROM `fixed_asset_labels` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by id DESC LIMIT 1";
            $nomorurut = DB::select($query);

            if ($nomorurut != null)
            {
                $nomor = substr($nomorurut[0]->form_number, -3);
                $nomor = $nomor + 1;
                $nomor = sprintf('%03d', $nomor);
            }
            else
            {
                $nomor = "0001";
            }

            $result['tahun'] = $tahun;
            $result['bulan'] = $bulan;
            $result['no_urut'] = $nomor;

            $form_number = 'FAL'.$result['tahun'].$result['bulan'].$result['no_urut'];

            $asset_pic = EmployeeSync::where('employee_id', '=', $new_asset->created_by)->select('employee_id','name')->first();

            $asset_label = new FixedAssetLabel([
                'fixed_asset_id' => $new_asset->sap_id,
                'form_number' => $form_number,
                'fixed_asset_name' => $new_asset->asset_name,
                'fixed_asset_no' => $new_asset->sap_id,
                'section' => $new_asset->pic,
                'location' => $new_asset->location,
                'pic' => $new_asset->created_by,
                'reason' => 'Asset Register',
                'remark' => $new_asset->form_number,
                'status' => 'printed',
                'last_status' => 'printed',
                'approval_pic' => $new_asset->created_by."/".$asset_pic->name,
                'approval_pic_date' => date('Y-m-d H:i:s'),
                'approval_acc' => "PI0905001/Ismail Husen/".date('Y-m-d H:i:s'),
                'approval_label_acc' => 'PI1505001/Afifatuz Yulaichah',
                'approval_acc_date' => date('Y-m-d H:i:s'),
                'created_by' => $new_asset->created_by
            ]);
            $asset_label->save();

            $data_label = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
            ->where('form_number', '=', $form_number)
            ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
            ->get();

            // ------ Fixed Asset Item  ------------

            $asset_item_upd = FixedAssetitem::where('status', '=', $form_number)
            ->update([
                'registration_status' => 'Done',
                'status' => null,
                'remark' => 'YMPI'
            ]);            

            // ---------------------- REPORT PDF --------------------

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.registration_report', array(
                'datas' => $new_asset
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_registration/Reg_".$new_asset->form_number.".pdf");

            $data = [
                'assets' => $new_asset,
                'status' => 'RECEIVE FA',
                'datas2' => $data_label,
                'att' => $atts
            ];

            Mail::to(['ismail.husen@music.yamaha.com', 'afifatuz.yulaichah@music.yamaha.com'])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
        } catch (Exception $e) {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );
            return Response::json($response);
        }
    }

    $response = array(
        'status' => true,
        'upload' => $upload
    );
    return Response::json($response);
}

public function fetchAssetTransferById(Request $request)
{
    $data = FixedAssetRegistration::where('sap_id', '=', $request->get('id_asset'))
    ->select('form_number','sap_id', 'asset_name', 'pic', 'location', 'fixed_asset_registrations.created_by', 'name', 'fixed_asset_clasifications.category')
    ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
    ->leftJoin('fixed_asset_clasifications','fixed_asset_registrations.clasification_id', '=', 'fixed_asset_clasifications.category_code')
    ->first();

    $response = array(
        'status' => true,
        'data' => $data
    );
    return Response::json($response);
}

public function fetchAssetTransferByForm(Request $request)
{
    $data_transfer = FixedAssetTransfer::where('id', '=', $request->get('id'))->first();

    $response = array(
        'status' => true,
        'data' => $data_transfer
    );
    return Response::json($response);
}

public function fetchAssetTransfer()
{
    $dept = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();

    $sec = EmployeeSync::where('department', '=', $dept->department)->select('section')->groupBy('section')->get()->toArray();

    if($dept->department == 'Management Information System Department') {
        $asset_trans = FixedAssetTransfer::select('id', 'form_number', db::raw('DATE_FORMAT(created_at, "%Y-%m-%d") create_at'), 'fixed_asset_name', 'fixed_asset_no', 'old_section', 'old_location', 'old_pic', 'new_section', 'new_pic', 'status', 'last_status', 'reject_status')->get();

        $asset_receive = FixedAssetTransfer::select('id', 'form_number', db::raw('DATE_FORMAT(created_at, "%Y-%m-%d") create_at'), 'fixed_asset_name', 'fixed_asset_no', 'old_section', 'old_location', 'old_pic', 'new_section', 'status')->get();
    } else {
        $asset_trans = FixedAssetTransfer::whereIn('old_section', $sec)->select('id', 'form_number', db::raw('DATE_FORMAT(created_at, "%Y-%m-%d") create_at'), 'fixed_asset_name', 'fixed_asset_no', 'old_section', 'old_location', 'old_pic', 'new_section', 'new_pic', 'status', 'last_status', 'reject_status')->get();

        $asset_receive = FixedAssetTransfer::whereIn('new_section', $sec)->select('id', 'form_number', db::raw('DATE_FORMAT(created_at, "%Y-%m-%d") create_at'), 'fixed_asset_name', 'fixed_asset_no', 'old_section', 'old_location', 'old_pic', 'new_section', 'status')->get();
    }

    $response = array(
        'status' => true,
        'datas' => $asset_trans,
        'data_receives' => $asset_receive
    );
    return Response::json($response);
}

public function postAssetTransfer(Request $request)
{
    try {
        $file = $request->file('asset_picture');
        $tujuan_upload = 'files/fixed_asset/transfer_location';

        if ($file != null || $file != "") {
            $nama = $file->getClientOriginalName();
            $filename = pathinfo($nama, PATHINFO_FILENAME);
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename = $request->get('asset_no').'.'.$extension;

            $file->move($tujuan_upload,$filename);

        }else{
            $filename = "";
        }

    //get pic
        $old_pics = explode(' - ', $request->get('old_pic'));
        $old_pic_app = $old_pics[0].'/'.$old_pics[1];

    //get manager
        $dept = EmployeeSync::where('employee_id', '=', $old_pics[0])->select('department')->first();
        $q_mngr = db::select("SELECT CONCAT(UPPER(username), '/', name) as name from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$dept->department."'");
        $manager_app = $q_mngr[0]->name;

    //get new pic
        $new_pics = explode(' - ', $request->get('new_pic'));
        $new_pic_app = $new_pics[0].'/'.$new_pics[1];

    //get new manager
        $dept_n = EmployeeSync::where('employee_id', '=', $new_pics[0])->select('department')->first();
        $q_mngr_n = db::select("SELECT CONCAT(UPPER(username), '/', name) as name from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$dept_n->department."'");
        $manager_app_n = $q_mngr_n[0]->name;


        $tahun = date('y');
        $bulan = date('m');

        $query = "SELECT form_number FROM `fixed_asset_transfers` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by id DESC LIMIT 1";
        $nomorurut = DB::select($query);

        if ($nomorurut != null)
        {
            $nomor = substr($nomorurut[0]->form_number, -3);
            $nomor = $nomor + 1;
            $nomor = sprintf('%03d', $nomor);
        }
        else
        {
            $nomor = "001";
        }

        $result['tahun'] = $tahun;
        $result['bulan'] = $bulan;
        $result['no_urut'] = $nomor;

        $form_number = 'FAT'.$result['tahun'].$result['bulan'].$result['no_urut'];


        $asset_trans = new FixedAssetTransfer([
            'form_number' => $form_number,
            'fixed_asset_id' => $request->get('asset_id'),
            'fixed_asset_name' => $request->get('asset_name'),
            'fixed_asset_no' => $request->get('asset_no'),
            'old_section' => $request->get('old_section'),
            'old_location' => $request->get('old_location'),
            'old_pic' => $request->get('old_pic'),
            'new_section' => $request->get('new_section'),
            'new_location' => $request->get('new_location'),
            'new_pic' => $request->get('new_pic'),
            'transfer_reason' => $request->get('transfer_reason'),
            'new_picture' => $filename,
            'status' => 'created',
            'last_status' => 'created',
            'approval_pic' => $old_pic_app,
            'approval_manager' => $manager_app,
            'approval_new_pic' => $new_pic_app,
            'approval_new_manager' => $manager_app_n,
            'approval_acc_manager' => 'PI9902017/Romy Agung Kurniawan',
            'receive_acc' => 'PI0905001/Ismail Husen',
            'created_by' => Auth::user()->username
        ]);
        $asset_trans->save();

    //  ------------------- Create PDF File ----------------------------

        $data_transfer_asset = FixedAssetTransfer::leftJoin('fixed_asset_items', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_items.sap_number')
        ->where('fixed_asset_transfers.id', '=', $asset_trans->id)
        ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_items.classification_category', db::raw('DATE_FORMAT(fixed_asset_transfers.created_at, "%d %b %Y") as submission_date'))->first();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('fixed_asset.report_file.transfer_report', array(
            'datas' => $data_transfer_asset
        ));

        $pdf->save(public_path() . "/files/fixed_asset/report_transfer/Transfer_".$data_transfer_asset->form_number.".pdf");

    //EMAIL

        $data_fixed_asset = FixedAssetTransfer::where('fixed_asset_transfers.id', '=', $asset_trans->id)
        ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_no', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status')->first();

        $data = [
            "datas" => $data_fixed_asset,
            "position" => 'Created'
        ];

    //  --------------------  EMAIL APPROVAL -------------------
        $old_pic = explode(' - ', $request->get('old_pic'))[0];

        $get_pos = EmployeeSync::where('employee_id', '=', $old_pic)->select('position', 'section')->first();

    // JIKA Leader
        if (str_contains($get_pos->position,'Leader')) {
            $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
        } else {
            $mail = db::select("SELECT email from users where username = '".$old_pic."'");

            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
        }

        $response = array(
            'status' => true
        );
        return Response::json($response);
    } catch (Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
    
}

public function editAssetTransfer(Request $request)
{
    $file = $request->file('asset_picture_edit');
    $tujuan_upload = 'files/fixed_asset/transfer_location';

    if ($file != null || $file != "") {
        $nama = $file->getClientOriginalName();
        $filename = pathinfo($nama, PATHINFO_FILENAME);
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename = $request->get('asset_no_edit').'.'.$extension;

        $file->move($tujuan_upload,$filename);

    }else{
        $filename = "";
    }

    //get pic
    $old_pics = explode(' - ', $request->get('old_pic_edit'));
    $old_pic_app = $old_pics[0].'/'.$old_pics[1];

    //get manager
    $dept = EmployeeSync::where('employee_id', '=', $old_pics[0])->select('department')->first();
    $q_mngr = db::select("SELECT CONCAT(UPPER(username), '/', name) as name from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$dept->department."'");
    $manager_app = $q_mngr[0]->name;

    //get new pic
    $new_pics = explode(' - ', $request->get('new_pic_edit'));
    $new_pic_app = $new_pics[0].'/'.$new_pics[1];

    //get new manager
    $dept_n = EmployeeSync::where('employee_id', '=', $new_pics[0])->select('department')->first();
    $q_mngr_n = db::select("SELECT CONCAT(UPPER(username), '/', name) as name from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$dept_n->department."'");
    $manager_app_n = $q_mngr_n[0]->name;

    $asset_trf = FixedAssetTransfer::where('id', '=', $request->get("id_edit"))->first();

    if ($asset_trf->status == 'hold') {
        $stat = $asset_trf->last_status;
    } else if ($asset_trf->status == 'reject') {
        $stat = 'created';
    } else {
        $stat = $asset_trf->status;
    }

    $asset_upd = FixedAssetTransfer::where('id', '=', $request->get('id_edit'))
    ->update([
        'old_section' => $request->get('old_section_edit'),
        'old_location' => $request->get('old_location_edit'),
        'old_pic' => $request->get('old_pic_edit'),
        'new_section' => $request->get('new_section_edit'),
        'new_location' => $request->get('new_location_edit'),
        'new_pic' => $request->get('new_pic_edit'),
        'transfer_reason' => $request->get('transfer_reason_edit'),
        'new_picture' => $filename,
        'status' => $stat,
        'last_status' => $stat,
        'approval_pic' => $old_pic_app,
        'approval_manager' => $manager_app,
        'approval_new_pic' => $new_pic_app,
        'approval_new_manager' => $manager_app_n,
        'approval_acc_manager' => 'PI9902017/Romy Agung Kurniawan',
        'receive_acc' => 'PI0905001/Ismail Husen',
    ]);

    //  ------------------- Create PDF File ----------------------------

    $data_transfer_asset = FixedAssetTransfer::leftJoin('fixed_asset_items', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_items.sap_number')
    ->where('fixed_asset_transfers.id', '=', $request->get('id_edit'))
    ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number','fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_items.classification_category', db::raw('DATE_FORMAT(fixed_asset_transfers.created_at, "%d %b %Y") as submission_date'))->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.transfer_report', array(
        'datas' => $data_transfer_asset
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_transfer/Transfer_".$data_transfer_asset->form_number.".pdf");

    $response = array(
        'status' => true
    );
    return Response::json($response);
}

public function approvalAssetTransfer($id, $status, $user)
{
    $title = 'Approval Asset Transfer';
    $title_jp = '??';


    if ($status == 'Approved') {
        $asset = "";

        $message2 = 'Successfully Approved';
        $stat = true;
        $stat2 = 'approve';
        $nama = '';

    } else if ($status == 'Reject'){
        $message2 = 'Rejected & Comment';
        $stat = false;
        $stat2 = 'reject';

        $asset = FixedAssetTransfer::where('id', '=', $id)->first();

        if ($asset->status == 'created') {
            $nama = $asset->approval_pic."/".date('Y-m-d H:i:s');
        } else if ($asset->status == 'pic_old') {
            $nama = $asset->approval_manager."/".date('Y-m-d H:i:s');
        } else if($asset->status == 'manager_old'){
            $nama = $asset->approval_new_pic."/".date('Y-m-d H:i:s');
        } else if($asset->status == 'pic_new'){
            $nama = $asset->approval_new_manager."/".date('Y-m-d H:i:s');
        } else if($asset->status == 'manager_new') {
            $nama = $asset->approval_acc_manager."/".date('Y-m-d H:i:s');
        } else if($asset->status == 'acc_control') {
            $nama = "PI0905001/Ismail Husen/".date('Y-m-d H:i:s');
        } else {
            $nama = "";
        }

    } else if ($status == 'Hold'){
        $message2 = 'Hold & Comment';
        $stat = false;
        $stat2 = 'hold';

        $asset = FixedAssetTransfer::where('id', '=', $id)->first();

        if ($asset->status == 'created') {
            $nama = $asset->approval_pic."/".date('Y-m-d H:i:s');
        } else if ($asset->status == 'pic_old') {
            $nama = $asset->approval_manager."/".date('Y-m-d H:i:s');
        } else if($asset->status == 'manager_old'){
            $nama = $asset->approval_new_pic."/".date('Y-m-d H:i:s');
        } else if($asset->status == 'pic_new'){
            $nama = $asset->approval_new_manager."/".date('Y-m-d H:i:s');
        } else if($asset->status == 'manager_new') {
            $nama = $asset->approval_acc_manager."/".date('Y-m-d H:i:s');
        } else if($asset->status == 'acc_control') {
            $nama = "PI0905001/Ismail Husen/".date('Y-m-d H:i:s');
        } else {
            $nama = "";
        }
    }

    // Data Email


    if ($user == 'old_pic') {
        $message = 'Approval Asset Transfer';

        if ($stat) {
            $asset_upd = FixedAssetTransfer::where('id', '=', $id)
            ->update([
                'approval_pic_date' => date('Y-m-d H:i:s'),
                'status' => 'pic_old',
                'last_status' => 'pic_old'
            ]);

             //  ------------------- Create PDF File ----------------------------

            $data_transfer_asset = FixedAssetTransfer::leftJoin('fixed_asset_items', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_items.sap_number')
            ->where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number','fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_items.classification_category', db::raw('DATE_FORMAT(fixed_asset_transfers.created_at, "%d %b %Y") as submission_date'), db::raw('DATE_FORMAT(fixed_asset_transfers.approval_pic_date, "%d %b %Y") as approval_pic_date'),'approval_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_manager_date, "%d %b %Y") as approval_manager_date'),'approval_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_pic_date, "%d %b %Y") as approval_new_pic_date'),'approval_new_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_manager_date, "%d %b %Y") as approval_new_manager_date'),'approval_new_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.receive_acc_date, "%d %b %Y") as receive_acc_date'),db::raw('DATE_FORMAT(fixed_asset_transfers.approval_acc_manager_date, "%d %b %Y") as approval_acc_manager_date'),'approval_acc_manager'
        )->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.transfer_report', array(
                'datas' => $data_transfer_asset
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_transfer/Transfer_".$data_transfer_asset->form_number.".pdf");

            // ---------------------  Send MAIL --------------------

            $data_fixed_asset = FixedAssetTransfer::where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_no', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

            $data = [
                "datas" => $data_fixed_asset,
            ];

            $old_pics = explode(' - ', $data_fixed_asset->old_pic);

            $dept = EmployeeSync::where('employee_id', '=', $old_pics[0])->select('department')->first();

            //email manager old
            $mail = db::select("SELECT email from send_emails where remark = '".$dept->department."'");

            Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
        }

    } else if ($user == 'old_manager') {
        $message = 'Approval Asset Transfer';

        if ($stat) {
            $asset_upd = FixedAssetTransfer::where('id', '=', $id)
            ->update([
                'approval_manager_date' => date('Y-m-d H:i:s'),
                'status' => 'manager_old',
                'last_status' => 'manager_old'
            ]);

            //  ------------------- Create PDF File ----------------------------

            $data_transfer_asset = FixedAssetTransfer::leftJoin('fixed_asset_items', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_items.sap_number')
            ->where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number','fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_items.classification_category', db::raw('DATE_FORMAT(fixed_asset_transfers.created_at, "%d %b %Y") as submission_date'), db::raw('DATE_FORMAT(fixed_asset_transfers.approval_pic_date, "%d %b %Y") as approval_pic_date'),'approval_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_manager_date, "%d %b %Y") as approval_manager_date'),'approval_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_pic_date, "%d %b %Y") as approval_new_pic_date'),'approval_new_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_manager_date, "%d %b %Y") as approval_new_manager_date'),'approval_new_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.receive_acc_date, "%d %b %Y") as receive_acc_date'),db::raw('DATE_FORMAT(fixed_asset_transfers.approval_acc_manager_date, "%d %b %Y") as approval_acc_manager_date'),'approval_acc_manager'
        )->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.transfer_report', array(
                'datas' => $data_transfer_asset
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_transfer/Transfer_".$data_transfer_asset->form_number.".pdf");

            // ---------------------  Send MAIL --------------------

            $data_fixed_asset = FixedAssetTransfer::where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id','fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_no', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

            $data = [
                "datas" => $data_fixed_asset,
            ];

            $pic_new = explode(' - ', $data_fixed_asset->new_pic)[0];
            // email new pic
            $new_pic = EmployeeSync::leftJoin('users', 'users.username', '=', 'employee_syncs.employee_id')
            ->where('employee_id', '=', $pic_new)
            ->select('email', 'position', 'department')
            ->first();

            if (str_contains($new_pic->position, 'Operator') || str_contains($new_pic->position, 'Leader')) {
                $mail = Approver::where('department', '=', $new_pic->department)
                ->whereIn('remark', ['Chief', 'Foreman'])
                ->select('approver_email')
                ->orderBy('remark', 'asc')
                ->first();

                Mail::to($mail->approver_email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            } else {
                Mail::to($new_pic->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            }
        }
    } else if ($user == 'new_pic') {
        $message = 'Approval Asset Transfer';

        if ($stat) {
            $asset_upd = FixedAssetTransfer::where('id', '=', $id)
            ->update([
                'approval_new_pic_date' => date('Y-m-d H:i:s'),
                'status' => 'pic_new',
                'last_status' => 'pic_new',
                'approval_new_pic' => strtoupper(Auth::user()->username).'/'.Auth::user()->name
            ]);

            //  ------------------- Create PDF File ----------------------------

            $data_transfer_asset = FixedAssetTransfer::leftJoin('fixed_asset_items', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_items.sap_number')
            ->where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number','fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_items.classification_category', db::raw('DATE_FORMAT(fixed_asset_transfers.created_at, "%d %b %Y") as submission_date'), db::raw('DATE_FORMAT(fixed_asset_transfers.approval_pic_date, "%d %b %Y") as approval_pic_date'),'approval_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_manager_date, "%d %b %Y") as approval_manager_date'),'approval_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_pic_date, "%d %b %Y") as approval_new_pic_date'),'approval_new_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_manager_date, "%d %b %Y") as approval_new_manager_date'),'approval_new_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.receive_acc_date, "%d %b %Y") as receive_acc_date'),db::raw('DATE_FORMAT(fixed_asset_transfers.approval_acc_manager_date, "%d %b %Y") as approval_acc_manager_date'),'approval_acc_manager'
        )->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.transfer_report', array(
                'datas' => $data_transfer_asset
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_transfer/Transfer_".$data_transfer_asset->form_number.".pdf");

            // ---------------------  Send MAIL --------------------

            $data_fixed_asset = FixedAssetTransfer::where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id','fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_no', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

            $data = [
                "datas" => $data_fixed_asset,
            ];

            $pic_new = explode(' - ', $data_fixed_asset->new_pic)[0];
        //email manager new
            $dept = EmployeeSync::where('employee_id', '=', $pic_new)->select('department')->first();

            $mail = db::select("SELECT email from send_emails where remark = '".$dept->department."'");

            Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
        }
    } else if ($user == 'new_manager') {
        $message = 'Approval Asset Transfer';

        if ($stat) {
            $asset_upd = FixedAssetTransfer::where('id', '=', $id)
            ->update([
                'approval_new_manager_date' => date('Y-m-d H:i:s'),
                'status' => 'manager_new',
                'last_status' => 'manager_new'
            ]);

            //  ------------------- Create PDF File ----------------------------

            $data_transfer_asset = FixedAssetTransfer::leftJoin('fixed_asset_items', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_items.sap_number')
            ->where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number','fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_items.classification_category', db::raw('DATE_FORMAT(fixed_asset_transfers.created_at, "%d %b %Y") as submission_date'), db::raw('DATE_FORMAT(fixed_asset_transfers.approval_pic_date, "%d %b %Y") as approval_pic_date'),'approval_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_manager_date, "%d %b %Y") as approval_manager_date'),'approval_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_pic_date, "%d %b %Y") as approval_new_pic_date'),'approval_new_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_manager_date, "%d %b %Y") as approval_new_manager_date'),'approval_new_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.receive_acc_date, "%d %b %Y") as receive_acc_date'),db::raw('DATE_FORMAT(fixed_asset_transfers.approval_acc_manager_date, "%d %b %Y") as approval_acc_manager_date'),'approval_acc_manager'
        )->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.transfer_report', array(
                'datas' => $data_transfer_asset
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_transfer/Transfer_".$data_transfer_asset->form_number.".pdf");

            // ---------------------  Send MAIL --------------------

            $data_fixed_asset = FixedAssetTransfer::where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_no', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

            $data = [
                "datas" => $data_fixed_asset,
            ];

        //email ke FA Control

            Mail::to('ismail.husen@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
        }
    } else if ($user == 'acc_control') {
        $message = 'Approval Asset Transfer';

        if ($stat) {
            $asset_upd = FixedAssetTransfer::where('id', '=', $id)
            ->update([
                'receive_acc_date' => date('Y-m-d H:i:s'),
                'status' => 'acc_control',
                'last_status' => 'acc_control'
            ]);

            //  ------------------- Create PDF File ----------------------------

            $data_transfer_asset = FixedAssetTransfer::leftJoin('fixed_asset_items', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_items.sap_number')
            ->where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number','fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_items.classification_category', db::raw('DATE_FORMAT(fixed_asset_transfers.created_at, "%d %b %Y") as submission_date'), db::raw('DATE_FORMAT(fixed_asset_transfers.approval_pic_date, "%d %b %Y") as approval_pic_date'),'approval_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_manager_date, "%d %b %Y") as approval_manager_date'),'approval_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_pic_date, "%d %b %Y") as approval_new_pic_date'),'approval_new_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_manager_date, "%d %b %Y") as approval_new_manager_date'),'approval_new_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.receive_acc_date, "%d %b %Y") as receive_acc_date'),db::raw('DATE_FORMAT(fixed_asset_transfers.approval_acc_manager_date, "%d %b %Y") as approval_acc_manager_date'),'approval_acc_manager'
        )->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.transfer_report', array(
                'datas' => $data_transfer_asset
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_transfer/Transfer_".$data_transfer_asset->form_number.".pdf");

            // ---------------------  Send MAIL --------------------

            $data_fixed_asset = FixedAssetTransfer::where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_no', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

            $data = [
                "datas" => $data_fixed_asset,
            ];

            // email ke acc manager
            $mail = db::select("SELECT email from send_emails where remark = 'Accounting Department'");

            Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
        }
    } else if ($user == 'acc_manager') {
        $message = 'Approval Asset Transfer';

        if ($stat) {
            $asset_upd = FixedAssetTransfer::where('id', '=', $id)
            ->update([
                'approval_acc_manager_date' => date('Y-m-d H:i:s'),
                'status' => 'acc_manager',
                'last_status' => 'acc_manager'
            ]);

            //  ------------------- Create PDF File ----------------------------

            $data_transfer_asset = FixedAssetTransfer::leftJoin('fixed_asset_items', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_items.sap_number')
            ->where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number','fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_items.classification_category', db::raw('DATE_FORMAT(fixed_asset_transfers.created_at, "%d %b %Y") as submission_date'), db::raw('DATE_FORMAT(fixed_asset_transfers.approval_pic_date, "%d %b %Y") as approval_pic_date'),'approval_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_manager_date, "%d %b %Y") as approval_manager_date'),'approval_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_pic_date, "%d %b %Y") as approval_new_pic_date'),'approval_new_pic',db::raw('DATE_FORMAT(fixed_asset_transfers.approval_new_manager_date, "%d %b %Y") as approval_new_manager_date'),'approval_new_manager',db::raw('DATE_FORMAT(fixed_asset_transfers.receive_acc_date, "%d %b %Y") as receive_acc_date'),db::raw('DATE_FORMAT(fixed_asset_transfers.approval_acc_manager_date, "%d %b %Y") as approval_acc_manager_date'),'approval_acc_manager'
        )->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.transfer_report', array(
                'datas' => $data_transfer_asset
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_transfer/Transfer_".$data_transfer_asset->form_number.".pdf");

            // ---------------------  Send MAIL --------------------

            $data_fixed_asset = FixedAssetTransfer::where('fixed_asset_transfers.id', '=', $id)
            ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_no','fixed_asset_transfers.fixed_asset_id', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

            // --  Update Asset Item
            $asset_item = FixedAssetitem::where('sap_number', '=', $data_fixed_asset->fixed_asset_no)
            ->update([
                'section' => $data_fixed_asset->new_section,
                'location' => $data_fixed_asset->new_location,
                'pic' => explode(' - ', $data_fixed_asset->new_pic)[0]
            ]);


            // -------------  ADD DATA LABEL  -------------

            $tahun = date('y');
            $bulan = date('m');

            $query = "SELECT form_number FROM `fixed_asset_labels` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by id DESC LIMIT 1";
            $nomorurut = DB::select($query);

            if ($nomorurut != null)
            {
                $nomor = substr($nomorurut[0]->form_number, -3);
                $nomor = $nomor + 1;
                $nomor = sprintf('%03d', $nomor);
            }
            else
            {
                $nomor = "0001";
            }

            $result['tahun'] = $tahun;
            $result['bulan'] = $bulan;
            $result['no_urut'] = $nomor;

            $form_number = 'FAL'.$result['tahun'].$result['bulan'].$result['no_urut'];

            $asset_label = new FixedAssetLabel([
                'fixed_asset_id' => $data_fixed_asset->fixed_asset_id,
                'form_number' => $form_number,
                'fixed_asset_name' => $data_fixed_asset->fixed_asset_name,
                'fixed_asset_no' => $data_fixed_asset->fixed_asset_id,
                'section' => $data_fixed_asset->new_section,
                'location' => $data_fixed_asset->new_location,
                'pic' => explode(' - ', $data_fixed_asset->new_pic)[0],
                'reason' => 'Asset Transfer',
                'status' => 'printed',
                'remark' => $data_fixed_asset->form_number,
                'last_status' => 'printed',
                'approval_pic' => explode(' - ', $data_fixed_asset->new_pic)[0]."/".explode(' - ', $data_fixed_asset->new_pic)[1],
                'approval_pic_date' => date('Y-m-d H:i:s'),
                'approval_acc' => "PI0905001/Ismail Husen",
                'approval_acc_date' => date('Y-m-d H:i:s'),
                'approval_label_acc' => 'PI1505001/Afifatuz Yulaichah',
                'created_by' => explode(' - ', $data_fixed_asset->new_pic)[0]
            ]);
            $asset_label->save();

            $data_label = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
            ->where('form_number', '=', $form_number)
            ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
            ->get();

            $data = [
                "datas" => $data_fixed_asset,
                "datas2" => $data_label,
            ];

            Mail::to(['afifatuz.yulaichah@music.yamaha.com','ismail.husen@music.yamaha.com'])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
        }
    }

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $nama
    ))->with('page', 'Fixed Asset Approval');  
}

public function indexLabelAsset()
{
    $title = 'Fixed Asset - Label Request';
    $title_jp = '??';

    $sec = db::select('SELECT section from employee_syncs where department = (SELECT department from employee_syncs where employee_id = "'.Auth::user()->username.'")');
        $sec_arr = [];

        foreach ($sec as $section) {
            array_push($sec_arr, $section->section);
        }

        $asset_list = FixedAssetitem::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereIn('fixed_asset_items.section', $sec_arr)
        ->select('sap_number', 'fixed_asset_name', 'fixed_asset_items.section', 'pic', 'location', 'name')
        ->get();

        return view('fixed_asset.form.label_form', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'asset_list' => $asset_list
        ))->with('page', 'Fixed Asset Label');
    }

    public function fetchLabelAsset(Request $request)
    {
        $asset_label = FixedAssetLabel::leftjoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic');
        if(count($request->get('status')) > 0){
            $asset_label = $asset_label->whereIn('status', $request->get('status'));
        }

        if($request->get('form_id')){
            $asset_label = $asset_label->where('form_number', '=', $request->get('form_id'));
        }

        $asset_label = $asset_label->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_id', 'fixed_asset_name', 'fixed_asset_no', 'reason', 'location', 'fixed_asset_labels.section', 'status', 
            db::raw("DATE_FORMAT(fixed_asset_labels.created_at, '%Y-%m-%d') as create_at"), 'name', 'pic', 'reject_status', 'remark')
        ->orderBy('status', 'asc')
        ->orderBy('form_number', 'asc')
        ->get();

        $response = array(
            'status' => true,
            'datas' => $asset_label,
        );
        return Response::json($response);
    }

    public function postLabelAsset(Request $request)
    {
        $tahun = date('y');
        $bulan = date('m');

        $query = "SELECT form_number FROM `fixed_asset_labels` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by form_number DESC LIMIT 1";
        $nomorurut = DB::select($query);

        if ($nomorurut != null)
        {
            $nomor = substr($nomorurut[0]->form_number, -3);
            $nomor = $nomor + 1;
            $nomor = sprintf('%03d', $nomor);
        }
        else
        {
            $nomor = "001";
        }

        $result['tahun'] = $tahun;
        $result['bulan'] = $bulan;
        $result['no_urut'] = $nomor;

        $form_number = 'FAL'.$result['tahun'].$result['bulan'].$result['no_urut'];

        for ($i=0; $i < count($request->get('asset_id')); $i++) { 
            $asset_label = new FixedAssetLabel([
                'fixed_asset_id' => $request->get('asset_id')[$i],
                'form_number' => $form_number,
                'fixed_asset_name' => $request->get('asset_name')[$i],
                'fixed_asset_no' => $request->get('asset_id')[$i],
                'section' => $request->get('asset_section')[$i],
                'location' => $request->get('asset_location')[$i],
                'pic' => $request->get('asset_pic')[$i],
                'reason' => $request->get('reason'),
                'status' => 'created',
                'last_status' => 'created',
                'created_by' => Auth::user()->username
            ]);
            $asset_label->save();
        }


    //APPROVAL

        $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
        ->where('form_number', '=', $form_number)
        ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
        ->get();

        $data = [
            "datas" => $data_fixed_asset
        ];

        $dept = EmployeeSync::where('employee_id', '=', $request->get('asset_pic')[0])->select('employee_id','section', 'position')->first();

        if (strpos($dept->position, 'Staff') !== false ) {
            $upd = db::select("SELECT username, name, email from users where username = '".$dept->employee_id."'");
        } else {
            $upd = db::select("SELECT username, name, send_emails.email from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$dept->section."'");
        }

        $asset_upd = FixedAssetLabel::where('form_number', '=', $form_number)
        ->update([
            'approval_pic' => $upd[0]->username.'/'.$upd[0]->name,
            'approval_acc' => 'PI0905001/Ismail Husen',
            'approval_label_acc' => 'PI1505001/Afifatuz Yulaichah'
        ]);

        Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));

        $response = array(
            'status' => true,
            'number' => 'FAL'.$result['tahun'].$result['bulan'].$result['no_urut']
        );
        return Response::json($response);
    }

    public function editLabelAsset(Request $request)
    {
        try {
            $asset_label = FixedAssetLabel::where('form_number', '=', $request->get('form_number'))->first();

            if ($asset_label->status == 'hold') {
                $stat = $asset_label->last_status;
            } else if ($asset_label->status == 'reject') {
                $stat = $asset_label->last_status;
                $stat = 'created';
            } else {
                $stat = $asset_label->status;
            }

            $reject_stat = $asset_label->reject_status;
            $comment = $asset_label->comment;

            $asset_label_del = FixedAssetLabel::where('form_number', '=', $request->get('form_number'))->forceDelete();

            for ($i=0; $i < count($request->get('asset_id')); $i++) { 
                $label_edit = new FixedAssetLabel([
                    'fixed_asset_id' => $request->get('asset_id')[$i],
                    'form_number' => $request->get('form_number'),
                    'fixed_asset_name' => $request->get('asset_name')[$i],
                    'fixed_asset_no' => $request->get('asset_id')[$i],
                    'section' => $request->get('asset_section')[$i],
                    'location' => $request->get('asset_location')[$i],
                    'pic' => $request->get('asset_pic')[$i],
                    'reason' => $request->get('reason'),
                    'status' => $stat,
                    'last_status' => $stat,
                    'reject_status' => $reject_stat,
                    'comment' => $comment,
                    'created_by' => Auth::user()->username
                ]);
                $label_edit->save();
            }

            $response = array(
                'status' => true,
            );
            return Response::json($response);
        } catch (Exception $e) {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );
            return Response::json($response);
        }

    }

    public function testPdf2($form_number)
    {
        $missing = FixedAssetMissing::where('form_number', '=', $form_number)
        ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', 'acquisition_cost', 'acquisition_date', 'book_value', 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
        ->first();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('fixed_asset.report_file.missing_report', array(
            'datas' => $missing
        ));

        $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$form_number.".pdf");
        return $pdf->stream(public_path() . "/files/fixed_asset/report_missing/Missing_".$form_number.".pdf");

    }

    public function approvalLabelAsset($form_number, $status, $posisi)
    {
        $title = 'Approval Request Asset Label';
        $title_jp = '資産ラベルリクエストの承認';


        if ($status == 'Approved') {
            $message2 = 'Successfully Approved';
            $stat = true;
            $stat2 = 'approve';
            $nama = '';
            $asset = '';
        } else if ($status == 'Reject'){
            $message2 = 'Rejected & Comment';
            $stat = false;
            $stat2 = 'reject';

            $asset = FixedAssetLabel::where('form_number', '=', $form_number)
            ->select(db::raw('form_number as ids'), 'form_number', 'approval_pic')
            ->first();

            if ($posisi == 'acc_control') {
                $nama = 'PI0905001/Ismail Husen/'.date('Y-m-d H:i:s');
            } else if ($posisi == 'acc_label') {
                $nama = 'PI1505001/Afifatuz Yulaichah/'.date('Y-m-d H:i:s');
            } else if ($posisi == 'pic') {
                $nama = $asset->approval_pic.'/'.date('Y-m-d H:i:s');
            }
        } else if ($status == 'Hold') {
            $message2 = 'Hold & Comment';
            $stat = false;
            $stat2 = 'hold';

            $asset = FixedAssetLabel::where('form_number', '=', $form_number)
            ->select(db::raw('form_number as ids'), 'form_number')
            ->first();

            if ($posisi == 'acc_control') {
                $nama = 'PI0905001/Ismail Husen'.date('Y-m-d H:i:s');
            } else if ($posisi == 'acc_label') {
                $nama = 'PI1505001/Afifatuz Yulaichah'.date('Y-m-d H:i:s');
            }
        }

    // Data Email

        if ($posisi == 'pic') {
            $message = 'Request Label Asset Form';
            if ($stat) {
                $asset_upd = FixedAssetLabel::where('form_number', '=', $form_number)
                ->update([
                    'approval_pic_date' => date('Y-m-d H:i:s'),
                    'status' => 'acc_control',
                    'last_status' => 'acc_control'
                ]);

                $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
                ->where('form_number', '=', $form_number)
                ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
                ->get();

                $data = [
                    "datas" => $data_fixed_asset
                ];


                Mail::to('ismail.husen@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            }

        }  else if ($posisi == 'acc_control') {
            $message = 'Request Label Asset Form';
            if ($stat) {
                $asset_upd = FixedAssetLabel::where('form_number', '=', $form_number)
                ->update([
                    'approval_acc_date' => date('Y-m-d H:i:s'),
                    'status' => 'acc_label',
                    'last_status' => 'acc_label'
                ]);

                $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
                ->where('form_number', '=', $form_number)
                ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
                ->get();

                $data = [
                    "datas" => $data_fixed_asset
                ];

                Mail::to('afifatuz.yulaichah@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            } 
        } else if ($posisi == 'acc_label') {
            $message = 'Label Asset Printed';
            if ($stat) {

                $asset_upd = FixedAssetLabel::where('form_number', '=', $form_number)
                ->update([
                    'approval_label_acc_date' => date('Y-m-d H:i:s'),
                    'status' => 'printed',
                    'last_status' => 'printed'
                ]);

                $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
                ->where('form_number', '=', $form_number)
                ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section', 'fixed_asset_labels.pic')
                ->get();

                $data = [
                    "datas" => $data_fixed_asset
                ];

                $dept = EmployeeSync::where('employee_id', '=', $data_fixed_asset[0]->pic)->select('employee_id','section', 'position')->first();

                if (strpos($dept->position, 'Staff') !== false ) {
                    $mail = db::select("SELECT email from users where username = '".$dept->employee_id."'");
                } else {
                    $mail = db::select("SELECT email from send_emails where remark = '".$dept->section."'");
                }

                Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label')); 
            }
        } else if ($posisi == 'resend_foreman') {
            $message = 'Label Asset Printed';
        }

        if ($posisi == 'acc_label') {
            return redirect('/index/fixed_asset/print_asset');
        } else {
            return view('fixed_asset.approval_message', array(
                'title' => $title,
                'title_jp' => $title_jp,
                'message' => $message,
                'message2' => $message2,
                'asset' => $asset,
                'status' => $stat,
                'status2' => $stat2,
                'nama' => $nama,
                'status' => $stat
            ))->with('page', 'Fixed Asset Approval');
        }
    }

    public function indexApprovalLabelAsset($form_number)
    {
        $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
        ->where('remark', '=', $form_number)
        ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
        ->get();

        $data = [
            "datas" => $data_fixed_asset
        ];

        return view('mails.fixed_asset_label', array(
            'data' => $data,
        ))->with('page', 'Fixed Asset Approval');
    }

    public function sendMailAsset(Request $request)
    {
        if ($request->get('form') == 'Registration Form') {
            $form = FixedAssetRegistration::where('id', '=', $request->get('id'))->select('status', 'manager_app', 'manager_acc')->first();
            if ($form->status == 'created') {
            // email ke FA Control
                $new_asset = FixedAssetRegistration::where('id', '=', $request->get('id'))
                ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
                ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.form_number', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.created_at', 'employee_syncs.name','fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation')
                ->first();


                $datas = array(
                    'status' => 'FA CONTROL',
                    'assets' => $new_asset
                );

                Mail::to(['ismail.husen@music.yamaha.com'])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($datas, 'fixed_asset_registrations'));
            } else if ($form->status == 'filled') {
            // email ke manager
                $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $request->get("id"))
                ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
                ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
                ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.form_number', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.location', 'fixed_asset_registrations.created_at', 'employee_syncs.name', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation','fixed_asset_registrations.category', 'fixed_asset_registrations.category_code', 'fixed_asset_registrations.sap_id', 'fixed_asset_registrations.depreciation_key', db::raw('fixed_asset_clasifications.category as category_name'), 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_registrations.created_by', 'fixed_asset_registrations.sap_file', 'manager_app')
                ->first();

                $atts = FixedAssetInvoice::where('form_id', '=', $new_asset->form_number)->select('att')->first();

                $data = [
                    'assets' => $new_asset,
                    'status' => 'APPROVAL MANAGER',
                    'att' => $atts
                ];
                $mailto = db::select('SELECT email FROM users where username = "'.explode('/', $new_asset->manager_app)[0].'"');

                Mail::to($mailto)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
            } else if ($form->status == 'approved_manager') {
            //email ke acc manager
                $new_asset = FixedAssetRegistration::where('fixed_asset_registrations.id', '=', $request->get("id"))
                ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
                ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_registrations.created_by')
                ->select('fixed_asset_registrations.id', 'fixed_asset_registrations.asset_name', 'fixed_asset_registrations.invoice_number', 'fixed_asset_registrations.vendor', 'fixed_asset_registrations.currency', 'fixed_asset_registrations.amount', 'fixed_asset_registrations.amount_usd', 'fixed_asset_registrations.pic', 'fixed_asset_registrations.investment_number', 'fixed_asset_registrations.location', 'fixed_asset_registrations.created_at', 'employee_syncs.name', 'fixed_asset_registrations.budget_number', 'fixed_asset_registrations.usage_term', 'fixed_asset_registrations.usage_estimation','fixed_asset_registrations.category', 'fixed_asset_registrations.category_code', 'fixed_asset_registrations.sap_id', 'fixed_asset_registrations.sap_file', 'fixed_asset_registrations.depreciation_key', db::raw('fixed_asset_clasifications.category as category_name'), 'fixed_asset_clasifications.clasification_name', 'fixed_asset_clasifications.life_time', 'fixed_asset_registrations.created_by', 'fixed_asset_registrations.form_number')
                ->first();

                $atts = FixedAssetInvoice::where('form_id', '=', $new_asset->form_number)->select('att')->first();

                $data = [
                    'assets' => $new_asset,
                    'status' => 'APPROVAL MANAGER FA',
                    'att' => $atts
                ];

                $mailto = db::select('SELECT email FROM send_emails where remark = "Accounting Department"');

                Mail::to($mailto)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_registrations'));
            }
        } else if ($request->get('form') == "Transfer Form") {
            $form = FixedAssetTransfer::where('id', '=', $request->get('id'))->select('status', 'old_pic')->first();

            if ($form->status == 'created') {
                $data_fixed_asset = FixedAssetTransfer::leftJoin('fixed_asset_registrations', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_registrations.sap_id')
                ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
                ->where('fixed_asset_transfers.id', '=', $request->get('id'))
                ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status')->first();

                $data = [
                    "datas" => $data_fixed_asset,
                    "position" => 'Created'
                ];

            //  --------------------  EMAIL APPROVAL -------------------
                $old_pic = explode(' - ', $form->old_pic)[0];

                $get_pos = EmployeeSync::where('employee_id', '=', $old_pic)->select('position', 'section')->first();

            // JIKA Leader
                if (str_contains($get_pos->position,'Leader')) {
                    $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                    Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
                } else {
                    $mail = db::select("SELECT email from users where username = '".$old_pic."'");

                    Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
                }
            } else if($form->status == 'pic_old'){
                $data_fixed_asset = FixedAssetTransfer::leftJoin('fixed_asset_registrations', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_registrations.sap_id')
                ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
                ->where('fixed_asset_transfers.id', '=', $request->get('id'))
                ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

                $data = [
                    "datas" => $data_fixed_asset,
                ];

                $old_pics = explode(' - ', $data_fixed_asset->old_pic);

                $dept = EmployeeSync::where('employee_id', '=', $old_pics[0])->select('department')->first();

            //email manager old
                $mail = db::select("SELECT email from send_emails where remark = '".$dept->department."'");

                Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            } else if($form->status == 'manager_old'){
                $data_fixed_asset = FixedAssetTransfer::leftJoin('fixed_asset_registrations', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_registrations.sap_id')
                ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
                ->where('fixed_asset_transfers.id', '=', $request->get('id'))
                ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

                $data = [
                    "datas" => $data_fixed_asset,
                ];

                $pic_new = explode(' - ', $data_fixed_asset->new_pic)[0];
        // email new pic
                $mail = db::select("SELECT email from users where username = '".$pic_new."'");

                Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            } else if($form->status == 'pic_new'){
                $data_fixed_asset = FixedAssetTransfer::leftJoin('fixed_asset_registrations', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_registrations.sap_id')
                ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
                ->where('fixed_asset_transfers.id', '=', $request->get('id'))
                ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

                $data = [
                    "datas" => $data_fixed_asset,
                ];

                $pic_new = explode(' - ', $data_fixed_asset->new_pic)[0];
        //email manager new
                $dept = EmployeeSync::where('employee_id', '=', $pic_new)->select('department')->first();

                $mail = db::select("SELECT email from send_emails where remark = '".$dept->department."'");

                Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            } else if($form->status == 'manager_new'){
                $data_fixed_asset = FixedAssetTransfer::leftJoin('fixed_asset_registrations', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_registrations.sap_id')
                ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
                ->where('fixed_asset_transfers.id', '=', $request->get('id'))
                ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

                $data = [
                    "datas" => $data_fixed_asset,
                ];

                // email ke acc manager_name
                $mail = db::select("SELECT email from send_emails where remark = 'Accounting Department'");

                Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            } else if($form->status == 'acc_manager') {
                $data_fixed_asset = FixedAssetTransfer::leftJoin('fixed_asset_registrations', 'fixed_asset_transfers.fixed_asset_id', '=', 'fixed_asset_registrations.sap_id')
                ->leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_registrations.clasification_id')
                ->where('fixed_asset_transfers.id', '=', $request->get('id'))
                ->select('fixed_asset_transfers.id', 'fixed_asset_transfers.form_number', 'fixed_asset_transfers.fixed_asset_name', 'fixed_asset_transfers.old_section', 'fixed_asset_transfers.old_location', 'fixed_asset_transfers.old_pic', 'fixed_asset_transfers.new_section', 'new_location', 'new_pic', 'fixed_asset_transfers.new_picture', 'fixed_asset_transfers.transfer_reason', 'fixed_asset_transfers.status', 'fixed_asset_transfers.created_by')->first();

                $data = [
                    "datas" => $data_fixed_asset,
                ];

                //email ke FA Control

                Mail::to('ismail.husen@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_transfer'));
            }
        } else if ($request->get('form') == "Label Form") {
            $form = FixedAssetLabel::where('form_number', '=', $request->get('id'))->select('status', 'approval_pic')->first();
            if ($form->status == 'created') {
                $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
                ->where('form_number', '=', $request->get('id'))
                ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
                ->get();

                $data = [
                    "datas" => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->approval_pic)[0]."'");


                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            } else if ($form->status == 'pic') {
                $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
                ->where('form_number', '=', $request->get('id'))
                ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
                ->get();

                $data = [
                    "datas" => $data_fixed_asset
                ];

                Mail::to('ismail.husen@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            } else if ($form->status == 'acc_control') {
                $data_fixed_asset = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
                ->where('form_number', '=', $request->get('id'))
                ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
                ->get();

                $data = [
                    "datas" => $data_fixed_asset
                ];

                Mail::to('afifatuz.yulaichah@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_label'));
            }
        } else if ($request->get('form') == "Disposal Form") {
            $form = FixedAssetDisposal::where('form_number', '=', $request->get('id'))->select('status', 'pic_app', 'fa_app', 'manager_app', 'manager_disposal_app', 'gm_app', 'dgm_app', 'manager_acc_app', 'director_fin_app', 'presdir_app', 'new_pic_app')->first();

            if ($form->status == 'created') {
                $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
                ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $get_pos = EmployeeSync::where('employee_id', '=', explode('/', $form->pic_app)[0])->select('position', 'section')->first();

            // JIKA Leader
                if (str_contains($get_pos->position,'Leader')) {
                    $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                    Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
                } else {
                    $mail = db::select("SELECT email from users where username = '".explode('/', $form->pic_app)[0]."'");

                    Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
                }
            } else if ($form->status == 'pic') {
             $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
             ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date')
             ->first();

             $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->fa_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } else if ($form->status == 'fa_control') {
            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->manager_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } else if ($form->status == 'manager') {
            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->manager_disposal_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } else if ($form->status == 'manager_disposal') {
            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date', 'dgm_app')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->dgm_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } else if ($form->status == 'dgm') {
            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date', 'dgm_app')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->gm_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } else if ($form->status == 'gm') {
            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date','dgm_app')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->manager_acc_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } else if ($form->status == 'acc_manager') {
            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->director_fin_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } else if ($form->status == 'director_fin') {
            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->presdir_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } else if ($form->status == 'presdir') {
            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.form_number', '=', $request->get('id'))
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'fixed_asset_disposals.reason_jp', 'reject_status', 'comment', 'disposal_request_date')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->new_pic_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } 
    } else if ($request->get('form') == "Disposal Scrap Form") {
        $form = FixedAssetDisposalScrap::where('id', '=', $request->get('id'))->select('status', 'pic_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'acc_control_app', 'pic_app')->first();

        if ($form->status == 'created') {
            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $request->get('id'))
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $get_pos = EmployeeSync::where('employee_id', '=', explode('/', $form->pic_app)[0])->select('position', 'section')->first();

            // JIKA Leader
            if (str_contains($get_pos->position,'Leader')) {
                $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
            } else {
                $mail = db::select("SELECT email from users where username = '".explode('/', $form->pic_app)[0]."'");

                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
            }
        } else if ($form->status == 'pic') {
            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $request->get('id'))
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->manager_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } else if ($form->status == 'manager') {
            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $request->get('id'))
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->gm_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } else if ($form->status == 'gm') {
            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $request->get('id'))
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->acc_manager_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } else if ($form->status == 'acc_manager') {
            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $request->get('id'))
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->director_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } else if ($form->status == 'director') {
            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $request->get('id'))
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->acc_control_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } else if ($request->get('form') == "Disposal Form") {
            $form = FixedAssetDisposal::where('id', '=', $request->get('id'))->select('status', 'pic_app', 'fa_app', 'manager_app', 'manager_disposal_app', 'gm_app', 'manager_acc_app', 'director_fin_app', 'presdir_app', 'new_pic_app')->first();

            if ($form->status == 'created') {
                $data_fixed_asset = FixedAssetDisposal::leftJoin('fixed_asset_clasifications', 'fixed_asset_clasifications.category_code', '=', 'fixed_asset_disposals.clasification_id')
                ->where('fixed_asset_disposals.id', '=', $request->get('id'))
                ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_clasifications.category', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'reject_status', 'comment')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->pic_app)[0]."'");

                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
            }
        } else if ($request->get('form') == "Missing Form") {
            $form = FixedAssetMissing::where('form_number', '=', $request->get('id'))->select('status', 'pic_app', 'fa_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'presdir_app')->first();

            // dd($form);
            if ($form->status == 'created') {
                $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
                ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->pic_app)[0]."'");

                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
            } else if ($form->status == 'pic') {
                $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
                ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->fa_app)[0]."'");

                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
            } else if ($form->status == 'fa_control') {
                $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
                ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->manager_app)[0]."'");

                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
            } else if ($form->status == 'manager') {
                $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
                ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->gm_app)[0]."'");

                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
            } else if ($form->status == 'gm') {
                $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
                ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->acc_manager_app)[0]."'");

                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
            } else if ($form->status == 'acc_manager') {
                $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
                ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->director_app)[0]."'");

                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
            } else if ($form->status == 'director_fin') {
                $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
                ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                $upd = db::select("SELECT email from users where username = '".explode('/', $form->presdir_app)[0]."'");

                Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
            }
        }
    } else if ($request->get('form') == "Missing Form") {
        $form = FixedAssetMissing::where('form_number', '=', $request->get('id'))->select('status', 'pic_app', 'fa_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'presdir_app')->first();

        if ($form->status == 'created') {
            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->pic_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } else if ($form->status == 'pic') {
            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->fa_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } else if ($form->status == 'fa_control') {
            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->manager_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } else if ($form->status == 'manager') {
            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->gm_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } else if ($form->status == 'gm') {
            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->acc_manager_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } else if ($form->status == 'acc_manager') {
            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->director_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } else if ($form->status == 'director_fin') {
            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', 'fixed_asset_missings.acquisition_date', 'fixed_asset_missings.acquisition_cost', 'fixed_asset_missings.book_value', 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $upd = db::select("SELECT email from users where username = '".explode('/', $form->presdir_app)[0]."'");

            Mail::to($upd[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    }
}

public function indexPrintAssetList()
{
    $title = 'Fixed Asset - Print Label';
    $title_jp = '';

    return view('fixed_asset.form.print_form', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', 'Fixed Asset Print');
}

public function printAsset($id)
{
    $asset = FixedAssetLabel::leftJoin('fixed_asset_items', 'fixed_asset_items.sap_number', '=', 'fixed_asset_labels.fixed_asset_id')
    ->where("fixed_asset_labels.id", '=', $id)->select('fixed_asset_labels.fixed_asset_id', 'fixed_asset_labels.fixed_asset_name', 'fixed_asset_labels.section', db::raw('DATE_FORMAT(fixed_asset_items.request_date,"%b %Y") as req_date'))->first();

    $dept = EmployeeSync::leftJoin('departments', 'departments.department_name', '=', 'employee_syncs.department')
    ->where('section', '=', $asset->section)->select('department', 'department_shortname')->first();

    return view('fixed_asset.report_file.print_sato', array(
        'data_asset' => $asset,
        'dept' => $dept
    ));
}

public function printAssetAll($id)
{
    $ids = explode(',', $id);

    $asset = FixedAssetLabel::leftJoin('fixed_asset_items', 'fixed_asset_items.sap_number', '=', 'fixed_asset_labels.fixed_asset_id')
    ->whereIn("fixed_asset_labels.id", $ids)->select('fixed_asset_labels.fixed_asset_id', 'fixed_asset_labels.fixed_asset_name', 'fixed_asset_labels.section', db::raw('DATE_FORMAT(fixed_asset_items.request_date,"%b %Y") as req_date'))->get();

    return view('fixed_asset.report_file.print_sato_all', array(
        'data_asset' => $asset
    ));
}

public function receiveLabelAsset(Request $request)
{
    $emp = Employee::where('tag', '=', $request->get("employee_id"))->orwhere('employee_id', '=', $request->get("employee_id"))->select('employee_id', 'name')->first();

    FixedAssetLabel::where('form_number', '=', $request->get("form_number"))
    ->update([
        'receive_pic' => $emp->employee_id.'/'.$emp->name.'/'.date('Y-m-d H:i:s'),
        'status' => 'received',
        'last_status' => 'received',
    ]);

    $label = FixedAssetLabel::where('form_number', '=', $request->get("form_number"))->first();

    FixedAssetRegistration::where('form_number', '=', $label->remark)
    ->update([
        'status' => 'finished',
    ]);

    FixedAssetTransfer::where('form_number', '=', $label->remark)
    ->update([
        'status' => 'finished',
    ]);

    FixedAssetDisposal::where('form_number', '=', $label->remark)
    ->update([
        'status' => 'finished',
    ]);


    $response = array(
        'status' => true,
    );
    return Response::json($response);
}

public function indexDisposalAsset()
{
    $title = 'Fixed Asset - Disposal Application';
    $title_jp = '固定資産の処分申請';

    $dept = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();

    $sec = EmployeeSync::where('department', '=', $dept->department)->select('section')->get();
    $sec_arr = [];

    foreach ($sec as $section) {
        array_push($sec_arr, $section->section);
    }

    $asset_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
    ->whereIn('fixed_asset_items.section', $sec_arr)
    ->whereNull('retired_date')
    ->select('sap_number', 'fixed_asset_name', 'location', 'fixed_asset_items.section', 'pic', 'name', 'classification_category')
    ->get();

    return view('fixed_asset.form.disposal_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'asset_list' => $asset_list
    ))->with('page', 'Fixed Asset Disposal');
}

public function fetchDisposalAsset(Request $request)
{

    $asset_dispo = FixedAssetDisposal::select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.new_pic_app', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.status', 'fixed_asset_disposals.last_status', db::raw('DATE_FORMAT(fixed_asset_disposals.created_at,"%Y-%m-%d") as create_at'), 'created_by');

    if (!str_contains(Auth::user()->role_code, 'MIS') && Auth::user()->username != 'PI0905001') {
        $get_dpt = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();
        $sec = EmployeeSync::whereNull('end_date')->where('department', '=', $get_dpt->department)
        ->select('section')
        ->groupby('section')
        ->get()
        ->toArray();

        $asset_dispo = $asset_dispo->whereIn('section_control', $sec);
    }

    if($request->get('mode')){
        $asset_dispo = $asset_dispo->where('mode', '=', $request->get('mode'));
    }

    if($request->get('form_id')){
        $asset_dispo = $asset_dispo->where('form_number', '=', $request->get('form_id'));
    }

    $asset_dispo = $asset_dispo->get();

    $response = array(
        'status' => true,
        'datas' => $asset_dispo,
    );
    return Response::json($response);
}

public function postDisposalAsset(Request $request)
{
    $asset_reg = FixedAssetitem::where('sap_number', '=', $request->get('asset_id'))
    ->select('pic', 'classification_category')
    ->first();

    $asset_disposal = FixedAssetDisposal::where('fixed_asset_id', '=', $request->get('asset_id'))
    ->where('status', '<>', 'reject')
    ->first();

    if (count($asset_disposal) > 0) {
        $response = array(
            'status' => false,
            'message' => 'Asset Sudah Pernah Didisposalkan'
        );
        return Response::json($response);
    }

    $file = $request->file('asset_picture');
    $tujuan_upload = 'files/fixed_asset/disposal';

    if ($file != null || $file != "") {
        $nama = $file->getClientOriginalName();
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename = $request->get('asset_id').'.'.$extension;

        $file->move($tujuan_upload,$filename);

    }else{
        $filename = "";
    }

    // quotation file

    $q_file = $request->file('quotation_file');
    $tujuan_upload_q = 'files/fixed_asset/disposal_quotation';

    if ($q_file != null || $q_file != "") {
        $nama = $q_file->getClientOriginalName();
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename_q = 'Quotation_'.$request->get('asset_id').'.'.$extension;

        $q_file->move($tujuan_upload_q,$filename_q);

    }else{
        $filename_q = "";
    }

    // pic incharge
    if ($asset_reg->classification_category == 'Building' || $asset_reg->classification_category == 'Construction in Prog' || $asset_reg->classification_category == 'Land' || $asset_reg->classification_category == 'Land right') {
        $pic_incharge = 'Maintenance Department';

        $pic_disposal = EmployeeSync::whereNull('end_date')->where('department', '=', $pic_incharge)
        ->where('position', 'like', 'Chief%')
        ->select('employee_id', 'name')
        ->first();
    } else if ($asset_reg->classification_category == 'Machinery & Equipment' || $asset_reg->classification_category == 'Molding' || $asset_reg->classification_category == 'Tools, Furniture') {
        $pic_incharge = 'Logistic Department';

        $pic_disposal = EmployeeSync::whereNull('end_date')->where('department', '=', $pic_incharge)
        ->where('position', 'like','Foreman%')
        ->select('employee_id', 'name')
        ->first();
    } else if($asset_reg->classification_category == 'Vehicle') {
        $pic_incharge = 'General Affairs Department';

        $pic_disposal = EmployeeSync::whereNull('end_date')->where('department', '=', $pic_incharge)
        ->where('position', 'like', 'Chief%')
        ->select('employee_id', 'name')
        ->first();
    }

    //Approval
    $emp_pic = EmployeeSync::where('employee_id', '=', $asset_reg->pic)->select('employee_id', 'name', 'position', 'section', 'department', 'division')->first();

    // JIKA Leader
    if (str_contains($emp_pic->position,'Leader')) {
        $pic = db::select("SELECT users.username as employee_id, users.name from send_emails LEFT JOIN users on send_emails.email = users.email where remark = '".$emp_pic->section."' AND users.deleted_at is null");

        $pic_app = $pic[0]->employee_id.'/'.$pic[0]->name;
    } else {
        $pic_app = $emp_pic->employee_id.'/'.$emp_pic->name;
    }

    $fa_app = 'PI0905001/Ismail Husen';

    $manager_pic = DB::select('SELECT username, name from send_emails left join users on send_emails.email = users.email where send_emails.remark = "'.$emp_pic->department.'"');
    $manager_app = $manager_pic[0]->username.'/'.$manager_pic[0]->name;

    $manager_disp = DB::select('SELECT username, name from send_emails left join users on send_emails.email = users.email where send_emails.remark = "'.$pic_incharge.'"');
    $manager_disposal_app = $manager_disp[0]->username.'/'.$manager_disp[0]->name;

    if ($emp_pic->division == 'Production Division') {
        $dgm = 'PI0109004/Budhi Apriyanto';
    } else if ($emp_pic->division == 'Production Support Division') {
        $dgm = 'PI9905001/Mei Rahayu';
    } else {
        $dgm = null;
    }

    $dgm_app = $dgm;

    $gm_pic = EmployeeSync::where('division', '=', $emp_pic->division)->where('position', 'like', 'General Manager%')
    ->whereNull('end_date')
    ->select('employee_id', 'name')
    ->first();
    $gm_app = $gm_pic->employee_id.'/'.$gm_pic->name;

    $acc_manager = EmployeeSync::whereNull('end_date')->where('department', '=', 'Accounting Department')
    ->where('position', 'like', 'Manager%')
    ->select('employee_id', 'name')
    ->first();
    $acc_manager_app = $acc_manager->employee_id.'/'.$acc_manager->name;

    $fin_dir = EmployeeSync::whereNull('end_date')->where('division', 'like', 'Finance Division%')
    ->where('position', 'like', 'Director')
    ->select('employee_id', 'name')
    ->first();
    $fin_dir_app = $fin_dir->employee_id.'/'.$fin_dir->name;

    $dir = EmployeeSync::whereNull('end_date')->where('position', 'like', 'President Director%')
    ->select('employee_id', 'name')
    ->first();
    $presdir_app = $dir->employee_id.'/'.$dir->name;

    $pic_disposal_app = $pic_disposal->employee_id.'/'.$pic_disposal->name;

    $tahun = date('y');
    $bulan = date('m');

    $query = "SELECT form_number FROM `fixed_asset_disposals` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by form_number DESC LIMIT 1";
    $nomorurut = DB::select($query);

    if ($nomorurut != null)
    {
        $nomor = substr($nomorurut[0]->form_number, -3);
        $nomor = $nomor + 1;
        $nomor = sprintf('%03d', $nomor);
    }
    else
    {
        $nomor = "001";
    }

    $result['tahun'] = $tahun;
    $result['bulan'] = $bulan;
    $result['no_urut'] = $nomor;

    $form_number = 'FAD'.$result['tahun'].$result['bulan'].$result['no_urut'];

    $asset_disposal = new FixedAssetDisposal([
        'disposal_request_date' => date('Y-m-d'),
        'form_number' => $form_number,
        'fixed_asset_id' => $request->get('asset_id'),
        'fixed_asset_name' => $request->get('asset_name'),
        'clasification_id' => $asset_reg->classification_category,
        'section_control' => $request->get('section'),
        'reason' => $request->get('disposal_reason'),
        'reason_jp' => $request->get('disposal_reason_jp'),
        'new_picture' => $filename,
        'pic_incharge' => $pic_incharge,
        'mode' => $request->get('mode'),
        'quotation_file' => $filename_q,
        'status' => 'created',
        'pic_app' => $pic_app,
        'fa_app' => $fa_app,
        'manager_app' => $manager_app,
        'manager_disposal_app' => $manager_disposal_app,
        'gm_app' => $gm_app,
        'dgm_app' => $dgm_app,
        'manager_acc_app' => $acc_manager_app,
        'director_fin_app' => $fin_dir_app,
        'presdir_app' => $presdir_app,
        'new_pic_app' => $pic_disposal_app,
        'created_by' => Auth::user()->username
    ]);
    $asset_disposal->save();

    // ---------------------- REPORT PDF --------------------

    $disposal = FixedAssetDisposal::where('form_number', '=', $form_number)
    ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.disposal_report', array(
        'datas' => $disposal
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$form_number.".pdf");

    // --------------   Email ------------------

    $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $asset_disposal->id)
    ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.reason_jp','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'), 'dgm_app', 'reject_status', 'comment')
    ->first();

    $data = [
        'datas' => $data_fixed_asset
    ];

    $get_pos = EmployeeSync::where('employee_id', '=', $emp_pic->employee_id)->select('position', 'section')->first();

    // JIKA Leader
    if (str_contains($get_pos->position,'Leader')) {
        $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
    } else {
        $mail = db::select("SELECT email from users where username = '".$emp_pic->employee_id."'");

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
    }

    $response = array(
        'status' => true,
    );
    return Response::json($response);
}

public function approvalAssetDisposal($id, $status, $posisi)
{
    $title = 'Approval Disposal Asset';
    $title_jp = '資産処分の承認';

    if ($status == 'Approved') {
        $message2 = 'Successfully Approved';
        $stat = true;
        $stat2 = 'approve';
        $nama = '';
        $asset = FixedAssetDisposal::where('id', '=', $id)
        ->select('id', 'form_number', 'pic_incharge', 'pic_app', 'fa_app', 'manager_app', 'manager_disposal_app', 'dgm_app', 'gm_app', 'manager_acc_app', 'director_fin_app', 'presdir_app', 'new_pic_app', 'mode', 'pic_app_date', 'fa_app_date', 'manager_app_date', 'manager_disposal_app_date', 'dgm_app_date', 'gm_app_date', 'manager_acc_app_date', 'director_fin_app_date', 'presdir_app_date', 'new_pic_app_date')
        ->first();

        $sec = EmployeeSync::where('department', '=', $asset->pic_incharge)->select('section')->get();
        $sec_arr = [];

        foreach ($sec as $section) {
            array_push($sec_arr, $section->section);
        }

        $loc_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereIn('fixed_asset_items.section', $sec_arr)
        ->whereNull('retired_date')
        ->select('location')
        ->groupBy('location')
        ->get();

    } else if ($status == 'Reject'){
        $message2 = 'Rejected & Comment';
        $stat = false;
        $stat2 = 'reject';

        $asset = FixedAssetDisposal::where('id', '=', $id)
        ->select('id', 'form_number', 'pic_incharge', 'pic_app', 'fa_app', 'manager_app', 'manager_disposal_app', 'dgm_app', 'gm_app', 'manager_acc_app', 'director_fin_app', 'presdir_app', 'new_pic_app', 'mode')
        ->first();

        $sec = EmployeeSync::where('department', '=', $asset->pic_incharge)->select('section')->get();
        $sec_arr = [];

        foreach ($sec as $section) {
            array_push($sec_arr, $section->section);
        }

        $loc_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereIn('fixed_asset_items.section', $sec_arr)
        ->whereNull('retired_date')
        ->select('location')
        ->groupBy('location')
        ->get();

        if ($posisi == 'created') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'pic') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'fa_control') {
            $nama = 'PI0905001/Ismail Husen/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'manager') {
            $nama = $asset->manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'manager_disposal') {
            $nama = $asset->manager_disposal_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'dgm') {
            $nama = $asset->dgm_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'gm') {
            $nama = $asset->gm_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'acc_manager') {
            $nama = $asset->manager_acc_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'director_fin') {
            $nama = $asset->director_fin_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'presdir') {
            $nama = $asset->presdir_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'new_pic') {
            $nama = $asset->new_pic_app.'/'.date('Y-m-d H:i:s');
        }
    } else if ($status == 'Hold') {
        $message2 = 'Hold & Comment';
        $stat = false;
        $stat2 = 'hold';

        $asset = FixedAssetDisposal::where('id', '=', $id)
        ->select('id', 'form_number', 'pic_incharge', 'pic_app', 'fa_app', 'manager_app', 'manager_disposal_app', 'dgm_app', 'gm_app', 'manager_acc_app', 'director_fin_app', 'presdir_app', 'new_pic_app', 'mode')
        ->first();

        $sec = EmployeeSync::where('department', '=', $asset->pic_incharge)->select('section')->get();
        $sec_arr = [];

        foreach ($sec as $section) {
            array_push($sec_arr, $section->section);
        }

        $loc_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereIn('fixed_asset_items.section', $sec_arr)
        ->whereNull('retired_date')
        ->select('location')
        ->groupBy('location')
        ->get();

        if ($posisi == 'pic') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'fa_control') {
            $nama = 'PI0905001/Ismail Husen/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'manager') {
            $nama = $asset->manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'manager_disposal') {
            $nama = $asset->manager_disposal_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'dgm') {
            $nama = $asset->dgm_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'gm') {
            $nama = $asset->gm_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'acc_manager') {
            $nama = $asset->manager_acc_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'director_fin') {
            $nama = $asset->director_fin_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'presdir') {
            $nama = $asset->presdir_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'new_pic2') {
            $nama = $asset->new_pic_app.'/'.date('Y-m-d H:i:s');
        }
    }

    if ($posisi == 'pic') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {

            if ($asset->pic_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetDisposal::where('id', '=', $id)
            ->update([
                'pic_app_date' => date('Y-m-d H:i:s'),
                'status' => 'pic',
                'last_status' => 'pic'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
            ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                'datas' => $disposal
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.reason_jp','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'), 'dgm_app', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            Mail::to('ismail.husen@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        }
    } else if ($posisi == 'fa_control') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {
            if ($asset->fa_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetDisposal::where('id', '=', $id)
            ->update([
                'fa_app_date' => date('Y-m-d H:i:s'),
                'status' => 'fa_control',
                'last_status' => 'fa_control'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
            ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                'datas' => $disposal
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'), 'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $manager = explode('/', $asset->manager_app)[0];
            $email = db::select("SELECT email from users where username = '".$manager."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        } 
    }else if ($posisi == 'manager') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {
            if ($asset->manager_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetDisposal::where('id', '=', $id)
            ->update([
                'manager_app_date' => date('Y-m-d H:i:s'),
                'status' => 'manager',
                'last_status' => 'manager'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
            ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                'datas' => $disposal
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'), 'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $manager_dispo = explode('/', $asset->manager_disposal_app)[0];
            $email = db::select("SELECT email from users where username = '".$manager_dispo."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        }
    } else if ($posisi == 'manager_disposal') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {
            if ($asset->manager_disposal_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            if ($asset->mode == 'SCRAP') {
                $stat2 = "manager_disposal";
            } else {
                $asset_upd = FixedAssetDisposal::where('id', '=', $id)
                ->update([
                    'manager_disposal_app_date' => date('Y-m-d H:i:s'),
                    'status' => 'manager_disposal',
                    'last_status' => 'manager_disposal'
                ]);

                // ---------------------- REPORT PDF --------------------

                $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
                ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
                ->first();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
                $pdf->setPaper('A4', 'potrait');

                $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                    'datas' => $disposal
                ));

                $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

                $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
                ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
                ->first();

                $data = [
                    'datas' => $data_fixed_asset
                ];

                if ($asset->dgm) {
                    $dgm = explode('/', $asset->dgm_app)[0];
                    $email = db::select("SELECT email from users where username = '".$dgm."'");
                } else {
                    $gm = explode('/', $asset->gm_app)[0];
                    $email = db::select("SELECT email from users where username = '".$gm."'");
                }

                Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
            }
        }
    } else if ($posisi == 'dgm') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {
            if ($asset->dgm_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetDisposal::where('id', '=', $id)
            ->update([
                'dgm_app_date' => date('Y-m-d H:i:s'),
                'status' => 'dgm',
                'last_status' => 'dgm'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
            ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                'datas' => $disposal
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $gm = explode('/', $asset->gm_app)[0];
            $email = db::select("SELECT email from users where username = '".$gm."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        }
    } else if ($posisi == 'gm') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {
            if ($asset->gm_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetDisposal::where('id', '=', $id)
            ->update([
                'gm_app_date' => date('Y-m-d H:i:s'),
                'status' => 'gm',
                'last_status' => 'gm'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
            ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                'datas' => $disposal
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $manager_acc = explode('/', $asset->manager_acc_app)[0];
            $email = db::select("SELECT email from users where username = '".$manager_acc."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        }
    } else if ($posisi == 'acc_manager') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {
            if ($asset->manager_acc_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetDisposal::where('id', '=', $id)
            ->update([
                'manager_acc_app_date' => date('Y-m-d H:i:s'),
                'status' => 'acc_manager',
                'last_status' => 'acc_manager'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
            ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                'datas' => $disposal
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $dir_fin_acc = explode('/', $asset->director_fin_app)[0];
            $email = db::select("SELECT email from users where username = '".$dir_fin_acc."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        }
    } else if ($posisi == 'director_fin') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {
            if ($asset->director_fin_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetDisposal::where('id', '=', $id)
            ->update([
                'director_fin_app_date' => date('Y-m-d H:i:s'),
                'status' => 'director_fin',
                'last_status' => 'director_fin'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
            ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                'datas' => $disposal
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $presdir_app = explode('/', $asset->presdir_app)[0];
            $email = db::select("SELECT email from users where username = '".$presdir_app."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        }
    } else if ($posisi == 'presdir') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        if ($stat) {
            if ($asset->presdir_app_date) {
                return view('fixed_asset.approval_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => 'Already Approved',
                    'status' => true,
                    'status2' => 'not allow',
                    'nama' => $nama,
                    'asset' => $asset
                ))->with('page', 'Fixed Asset Approval');  
            }

            $asset_upd = FixedAssetDisposal::where('id', '=', $id)
            ->update([
                'presdir_app_date' => date('Y-m-d H:i:s'),
                'status' => 'presdir',
                'last_status' => 'presdir'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
            ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'), 'reject_status', 'comment')
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                'datas' => $disposal
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

            $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
            ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $new_pic_app = explode('/', $asset->new_pic_app)[0];
            $email = db::select("SELECT email from users where username = '".$new_pic_app."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
        }
    } else if ($posisi == 'new_pic2') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        $stat2 = 'new_pic';
    } else if ($posisi == 'new_pic') {
        $message = 'Approval Disposal Asset 資産処分の承認';
    } else if ($posisi == 'payment') {
        $message = 'Approval Disposal Asset 資産処分の承認';
        $stat2 = 'payment';
    } else if ($posisi == 'payment2') {
        $message = 'Approval Disposal Asset 資産処分の承認';
    } else if ($posisi == 'payment_app') {
        $message = 'Approval Disposal Asset 資産処分の承認';

        if ($stat) {
         if ($asset->presdir_app_date) {
            return view('fixed_asset.approval_message', array(
                'title' => $title,
                'title_jp' => $title_jp,
                'message' => $message,
                'message2' => 'Already Approved',
                'status' => true,
                'status2' => 'not allow',
                'nama' => $nama,
                'asset' => $asset
            ))->with('page', 'Fixed Asset Approval');  
        }

        $asset_upd = FixedAssetDisposal::where('id', '=', $id)
        ->update([
            'presdir_app_date' => date('Y-m-d H:i:s'),
            'status' => 'payment_app',
            'last_status' => 'payment_app'
        ]);

            // ---------- email -------

        $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $id)
        ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'manager_acc_app', 'new_pic_app', 'disposal_location', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'))
        ->first();

        $data = [
            'datas' => $data_fixed_asset
        ];

            // -------------  ADD DATA LABEL  -------------

        $data_fixed_asset = FixedAssetDisposal::leftjoin('employee_syncs', 'fixed_asset_disposals.created_by', '=', 'employee_syncs.employee_id')
        ->where('fixed_asset_disposals.id', '=', $id)
        ->select('fixed_asset_disposals.id', db::raw('fixed_asset_disposals.fixed_asset_id as fixed_asset_no'), 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.form_number', db::raw('fixed_asset_disposals.section_control as section'), 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', db::raw('fixed_asset_disposals.disposal_location as location'), 'fixed_asset_disposals.mode', 'quotation_file', 'new_pic_app', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status','fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'employee_syncs.name')
        ->get();

        $tahun = date('y');
        $bulan = date('m');

        $query = "SELECT form_number FROM `fixed_asset_labels` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by id DESC LIMIT 1";
        $nomorurut = DB::select($query);

        if ($nomorurut != null)
        {
            $nomor = substr($nomorurut[0]->form_number, -3);
            $nomor = $nomor + 1;
            $nomor = sprintf('%03d', $nomor);
        }
        else
        {
            $nomor = "0001";
        }

        $result['tahun'] = $tahun;
        $result['bulan'] = $bulan;
        $result['no_urut'] = $nomor;

        $form_number = 'FAL'.$result['tahun'].$result['bulan'].$result['no_urut'];

        $asset_label = new FixedAssetLabel([
            'fixed_asset_id' => $data_fixed_asset[0]->fixed_asset_no,
            'form_number' => $form_number,
            'fixed_asset_name' => $data_fixed_asset[0]->fixed_asset_name,
            'fixed_asset_no' => $data_fixed_asset[0]->fixed_asset_no,
            'section' => $data_fixed_asset[0]->section,
            'location' => $data_fixed_asset[0]->location,
            'pic' => explode('/', $data_fixed_asset[0]->new_pic_app)[0],
            'reason' => 'Asset Disposal '.$data_fixed_asset[0]->form_number,
            'status' => 'acc_label',
            'last_status' => 'acc_label',
            'remark' => $data_fixed_asset[0]->form_number,
            'approval_pic' => explode('/', $data_fixed_asset[0]->new_pic_app)[0]."/".explode('/', $data_fixed_asset[0]->new_pic_app)[1],
            'approval_pic_app' => date('Y-m-d H:i:s'),
            'approval_acc' => "PI0905001/Ismail Husen",
            'approval_acc_app' => date('Y-m-d H:i:s'),
            'approval_label_acc' => 'PI1505001/Afifatuz Yulaichah',
            'created_by' => explode('/', $data_fixed_asset[0]->new_pic_app)[0]
        ]);
        $asset_label->save();

        $data_label = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
        ->where('form_number', '=', $form_number)
        ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
        ->get();

        $data_label = [
            "datas" => $data_label,
        ];

        Mail::to(['afifatuz.yulaichah@music.yamaha.com','ismail.husen@music.yamaha.com'])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data_label, 'fixed_asset_label'));
    }
}

return view('fixed_asset.approval_message', array(
    'title' => $title,
    'title_jp' => $title_jp,
    'message' => $message,
    'message2' => $message2,
    'asset' => $asset,
    'status' => $stat,
    'status2' => $stat2,
    'loc_list' => $loc_list,
    'nama' => $nama
))->with('page', 'Fixed Asset Approval');  
}

public function approveDisposalPIC(Request $request)
{
    $title = 'Approval Disposal Asset';
    $title_jp = '資産処分の承認';

    $message2 = 'Successfully Approved';
    $stat = true;
    $stat2 = 'approve';

    $asset = FixedAssetDisposal::where('id', '=', $request->get('id'))
    ->select('id', 'form_number', 'fixed_asset_id', 'pic_incharge', 'pic_app', 'fa_app', 'manager_app', 'manager_disposal_app', 'gm_app', 'manager_acc_app', 'director_fin_app', 'presdir_app', 'new_pic_app')
    ->first();

    $message = 'Approval Disposal Asset 資産処分の承認';

    $asset_upd = FixedAssetDisposal::where('id', '=', $request->get('id'))
    ->update([
        'new_pic_app_date' => date('Y-m-d H:i:s'),
        'status' => 'new_pic',
        'last_status' => 'new_pic',
        'disposal_location' => $request->get('location')
    ]);

    // ---------------------- REPORT PDF --------------------

    $disposal = FixedAssetDisposal::where('form_number', '=', $request->get('form_number_loc'))
    ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.disposal_location', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.disposal_report', array(
        'datas' => $disposal
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

    if ($disposal->mode == 'SCRAP') {

         // ---------------------  UPDATE ASSET ITEM  ------------------

        if ($disposal->pic_incharge == 'Logistic Department') {
            $sec = 'Warehouse Section';
        } else if ($disposal->pic_incharge == 'Maintenance Department') {
            $sec = 'Maintenance Control Section';
        } else if ($disposal->pic_incharge == 'General Affairs Department') {
            $sec = 'GA Control Section';
        }


        $asset_upd = FixedAssetitem::where('sap_number', '=', $disposal->fixed_asset_id)
        ->update([
            'section' => $sec,
            'pic' => explode('/', $disposal->new_pic_app)[0],
            'location' => $disposal->disposal_location
        ]);

        // -------------  ADD DATA LABEL  -------------

        $data_fixed_asset = FixedAssetDisposal::leftjoin('employee_syncs', 'fixed_asset_disposals.created_by', '=', 'employee_syncs.employee_id')
        ->where('fixed_asset_disposals.id', '=', $request->get('id'))
        ->select('fixed_asset_disposals.id', db::raw('fixed_asset_disposals.fixed_asset_id as fixed_asset_no'), 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.form_number', db::raw('fixed_asset_disposals.section_control as section'), 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', db::raw('fixed_asset_disposals.disposal_location as location'), 'fixed_asset_disposals.mode', 'quotation_file', 'new_pic_app', db::raw('DATE_FORMAT("fixed.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status','fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'employee_syncs.name', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'))
        ->get();

        $tahun = date('y');
        $bulan = date('m');

        $query = "SELECT form_number FROM `fixed_asset_labels` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by id DESC LIMIT 1";
        $nomorurut = DB::select($query);

        if ($nomorurut != null)
        {
            $nomor = substr($nomorurut[0]->form_number, -3);
            $nomor = $nomor + 1;
            $nomor = sprintf('%03d', $nomor);
        }
        else
        {
            $nomor = "0001";
        }

        $result['tahun'] = $tahun;
        $result['bulan'] = $bulan;
        $result['no_urut'] = $nomor;

        $form_number = 'FAL'.$result['tahun'].$result['bulan'].$result['no_urut'];

        $asset_label = new FixedAssetLabel([
            'fixed_asset_id' => $data_fixed_asset[0]->fixed_asset_no,
            'form_number' => $form_number,
            'fixed_asset_name' => $data_fixed_asset[0]->fixed_asset_name,
            'fixed_asset_no' => $data_fixed_asset[0]->fixed_asset_no,
            'section' => $data_fixed_asset[0]->section,
            'location' => $data_fixed_asset[0]->location,
            'pic' => explode('/', $data_fixed_asset[0]->new_pic_app)[0],
            'reason' => 'Asset Disposal '.$data_fixed_asset[0]->form_number,
            'remark' => $data_fixed_asset[0]->form_number,
            'status' => 'acc_label',
            'last_status' => 'acc_label',
            'approval_pic' => explode('/', $data_fixed_asset[0]->new_pic_app)[0]."/".explode('/', $data_fixed_asset[0]->new_pic_app)[1],
            'approval_pic_app' => date('Y-m-d H:i:s'),
            'approval_acc' => "PI0905001/Ismail Husen",
            'approval_acc_app' => date('Y-m-d H:i:s'),
            'approval_label_acc' => 'PI1505001/Afifatuz Yulaichah',
            'created_by' => explode('/', $data_fixed_asset[0]->new_pic_app)[0]
        ]);
        $asset_label->save();

        $data_label = FixedAssetLabel::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_labels.pic')
        ->where('form_number', '=', $form_number)
        ->select('fixed_asset_labels.id', 'form_number', 'fixed_asset_no', 'fixed_asset_name', 'location', 'employee_syncs.name', 'reason', 'fixed_asset_labels.status', 'fixed_asset_labels.section')
        ->get();

        $data_label = [
            "datas" => $data_label,
        ];

        Mail::to(['afifatuz.yulaichah@music.yamaha.com','ismail.husen@music.yamaha.com'])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data_label, 'fixed_asset_label'));
    } else {
        $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $request->get('id'))
        ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
        ->first();

        $data = [
            'datas' => $data_fixed_asset
        ];

        Mail::to(['ismail.husen@music.yamaha.com'])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
    }

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $request->get('nama')
    ))->with('page', 'Fixed Asset Approval');  
}

public function approveDisposalPayment(Request $request)
{
    $title = 'Approval Disposal Asset';
    $title_jp = '資産処分の承認';

    $message2 = 'Successfully Approved';
    $stat = true;
    $stat2 = 'approve';

    $file = $request->file('payment_file');
    $tujuan_upload = 'files/fixed_asset/disposal_payment';


    $asset = FixedAssetDisposal::where('id', '=', $request->get('id'))
    ->select('id', 'form_number', 'fixed_asset_id', 'pic_incharge', 'pic_app', 'fa_app', 'manager_app', 'manager_disposal_app', 'gm_app', 'manager_acc_app', 'director_fin_app', 'presdir_app', 'new_pic_app','disposal_location')
    ->first();

    if ($file != null || $file != "") {
        $nama = $file->getClientOriginalName();
        $filename = pathinfo($nama, PATHINFO_FILENAME);
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename = $asset->form_number.'.'.$extension;

        $file->move($tujuan_upload,$filename);

    }else{
        $filename = "";
    }

    $message = 'Approval Disposal Asset 資産処分の承認';

    $asset_upd = FixedAssetDisposal::where('id', '=', $request->get('id'))
    ->update([
        'presdir_app_date' => date('Y-m-d H:i:s'),
        'status' => 'upload_payment',
        'last_status' => 'upload_payment',
        'retired_at' => $request->get('retired_date2')
    ]);

    if ($asset->pic_incharge == 'Logistic Department') {
        $sec = 'Warehouse Section';
    } else if ($asset->pic_incharge == 'Maintenance Department') {
        $sec = 'Maintenance Control Section';
    } else if ($asset->pic_incharge == 'General Affairs Department') {
        $sec = 'GA Control Section';
    }


    $asset_upd = FixedAssetitem::where('sap_number', '=', $asset->fixed_asset_id)
    ->update([
        'retired_date' => $request->get('retired_date2')
    ]);

    // ----------- email ---------

    $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $request->get('id'))
    ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'manager_acc_app', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
    ->first();

    $data = [
        'datas' => $data_fixed_asset,
        'status' => 'acc'
    ];

    $email = db::select("SELECT email from users where username = '".explode('/', $data_fixed_asset->manager_acc_app)[0]."'");

    Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $request->get('nama')
    ))->with('page', 'Fixed Asset Approval');  
}

public function approveDisposalUser(Request $request)
{

    $title = 'Approval Disposal Asset';
    $title_jp = '資産処分の承認';

    $message2 = 'Successfully Approved';
    $stat = true;
    $stat2 = 'approve';

    $message = 'Approval Disposal Asset 資産処分の承認';

    $asset = FixedAssetDisposal::where('id', '=', $request->get('id'))
    ->select('id', 'form_number', 'pic_incharge', 'pic_app', 'fa_app', 'manager_app', 'manager_disposal_app', 'dgm_app','gm_app', 'manager_acc_app', 'director_fin_app', 'presdir_app', 'new_pic_app')
    ->first();

    $asset_upd = FixedAssetDisposal::where('id', '=', $request->get('id'))
    ->update([
        'disposal_request_date' => $request->get('disposal_date'),
        'manager_disposal_app_date' => date('Y-m-d H:i:s'),
        'status' => 'manager_disposal',
        'last_status' => 'manager_disposal'
    ]);

            // ---------------------- REPORT PDF --------------------

    $disposal = FixedAssetDisposal::where('form_number', '=', $asset->form_number)
    ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.disposal_report', array(
        'datas' => $disposal
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$asset->form_number.".pdf");

            // ---------- email -------

    $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $request->get('id'))
    ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
    ->first();

    $data = [
        'datas' => $data_fixed_asset
    ];

    if ($asset->dgm_app) {
        $dgm = explode('/', $asset->dgm_app)[0];
        $email = db::select("SELECT email from users where username = '".$dgm."'");
    } else {
        $gm = explode('/', $asset->gm_app)[0];
        $email = db::select("SELECT email from users where username = '".$gm."'");
    }


    Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $request->get('nama')
    ))->with('page', 'Fixed Asset Approval');  
}

public function fetchDisposalAssetById(Request $request)
{
    $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $request->get('id'))
    ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'fixed_asset_disposals.reason_jp')
    ->first();

    $data_register = FixedAssetItem::where('sap_number', '=', $data_fixed_asset->fixed_asset_id)
    ->select('vendor', 'request_date', db::raw('amount_usd as amount'), 'invoice_number')
    ->first();

    $response = array(
        'status' => true,
        'disposal' => $data_fixed_asset,
        'data_reg' => $data_register
    );
    return Response::json($response);
}

public function fillDisposalAsset(Request $request)
{
    try {
        $dispo_upd = FixedAssetDisposal::where('id', '=', $request->get('id_fill'))
        ->update([
            'registration_amount' => $request->get('amount_fill'),
            'registration_date' => $request->get('date_fill'),
            'vendor' => $request->get('vendor_fill'),
            'invoice_number' => $request->get('invoice_fill'),
            'book_value' => $request->get('net_fill'),
            'fa_app_date' => date('Y-m-d H:i:s'),
            'status' => 'fa_control',
            'last_status' => 'fa_control'
        ]);

        // APPROVAL
        $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $request->get('id_fill'))
        ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', 'registration_amount','registration_date','vendor','book_value','invoice_number', 'manager_app', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'),'fixed_asset_disposals.reason_jp', 'dgm_app', 'reject_status', 'comment')
        ->first();

        $data = [
            'datas' => $data_fixed_asset
        ];

        $manager = explode('/', $data_fixed_asset->manager_app)[0];
        $email = db::select("SELECT email from users where username = '".$manager."'");

                // ---------------------- REPORT PDF --------------------

        $disposal = FixedAssetDisposal::where('id', '=', $request->get('id_fill'))
        ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
        ->first();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('fixed_asset.report_file.disposal_report', array(
            'datas' => $disposal
        ));

        $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$disposal->form_number.".pdf");

        Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));

        $response = array(
            'status' => true
        );
        return Response::json($response);
    } catch (Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function EditDisposalAsset(Request $request)
{
    try {
        $file = $request->file('asset_picture_edit');
        $tujuan_upload = 'files/fixed_asset/disposal';

        if ($file != null || $file != "") {
            $nama = $file->getClientOriginalName();
            $filename = pathinfo($nama, PATHINFO_FILENAME);
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename = $request->get('asset_id_edit').'.'.$extension;

            $file->move($tujuan_upload,$filename);

        }else{
            $filename = "";
        }


        $q_file = $request->file('quotation_file_edit');
        $tujuan_upload_q = 'files/fixed_asset/disposal_quotation';

        if ($q_file != null || $q_file != "") {
            $nama = $q_file->getClientOriginalName();
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename_q = 'Quotation_'.$request->get('asset_id_edit').'.'.$extension;

            $q_file->move($tujuan_upload_q,$filename_q);

        }else{
            $filename_q = "";
        }

        $asset_dispo = FixedAssetDisposal::where('id', '=', $request->get("id_edit"))->first();

        if ($asset_dispo->status == 'hold') {
            $stat = $asset_dispo->last_status;
        } else if ($asset_dispo->status == 'reject') {
            $stat = 'created';
        } else {
            $stat = $asset_dispo->status;
        }

        $asset_upd = FixedAssetDisposal::where('id', '=', $request->get('id_edit'))
        ->update([
            'reason' => $request->get('disposal_reason_edit'),
            'reason_jp' => $request->get('disposal_reason_jp_edit'),
            'new_picture' => $filename,
            'mode' => $request->get('mode_edit'),
            'quotation_file' => $filename_q,
            'status' => $stat,
        ]);

        $response = array(
            'status' => true
        );
        return Response::json($response);
    } catch (Exception $e) {
     $response = array(
        'status' => false,
        'message' => $e->getMessage()
    );
     return Response::json($response);
 }
}


public function indexPrintAsset()
{
    $title = 'Fixed Asset - Label Request';
    $title_jp = '??';

    $asset_list = FixedAssetitem::select('sap_number', 'fixed_asset_name')
    ->get();

    return view('fixed_asset.form.label_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'asset_list' => $asset_list
    ))->with('page', 'Fixed Asset Label');
}

public function indexDisposalScrapAsset()
{
    $title = 'Fixed Asset - Disposal Application';
    $title_jp = '??';

    $dispo_list = FixedAssetDisposal::select('form_number', 'fixed_asset_name')->where('status', '=', 'new_pic')->get();

    return view('fixed_asset.form.disposal_scrap_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'dispo_list' => $dispo_list
    ))->with('page', 'Fixed Asset Disposal Scrap');
}


public function fetchDisposalScrapAsset(Request $request)
{
    $scrap_list = FixedAssetDisposalScrap::select('id', 'form_number', 'form_number_disposal', db::raw('DATE_FORMAT(fixed_asset_disposal_scraps.created_at, "%Y-%m-%d") as request_date'), 'fixed_asset_id', 'fixed_asset_name', 'disposal_date', 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'status', 'last_status')
    ->get();

    $outstanding_list = FixedAssetDisposal::select('id', 'form_number', 'fixed_asset_id', 'fixed_asset_name', 'section_control', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%Y-%m-%d") as disposal_request_date'), 'new_picture', 'pic_incharge', 'mode', db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%Y-%m-%d") as create_at'), 'status')
    // ->where('status', 'new_pic')
    ->whereNull('remark')
    ->whereNotNull('form_number')
    ->get();

    $response = array(
        'status' => true,
        'datas' => $scrap_list,
        'outstanding' => $outstanding_list
    );
    return Response::json($response);
}

public function postDisposalScrapAsset(Request $request)
{
    $picture_before = $request->file('picture_before');
    $picture_process = $request->file('picture_process');
    $picture_after = $request->file('picture_after');

    $tujuan_upload = 'files/fixed_asset/scrap_picture';

    $tahun = date('y');
    $bulan = date('m');

    $query = "SELECT form_number FROM `fixed_asset_disposal_scraps` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by form_number DESC LIMIT 1";
    $nomorurut = DB::select($query);

    if ($nomorurut != null)
    {
        $nomor = substr($nomorurut[0]->form_number, -3);
        $nomor = $nomor + 1;
        $nomor = sprintf('%03d', $nomor);
    }
    else
    {
        $nomor = "001";
    }

    $result['tahun'] = $tahun;
    $result['bulan'] = $bulan;
    $result['no_urut'] = $nomor;

    $form_number = 'FAS'.$result['tahun'].$result['bulan'].$result['no_urut'];

    if ($picture_before != null || $picture_before != "") {
        $nama = $picture_before->getClientOriginalName();
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename_before = 'Before_'.$form_number.'.'.$extension;

        $picture_before->move($tujuan_upload,$filename_before);

    }else{
        $filename_before = "";
    }

    if ($picture_process != null || $picture_process != "") {
        $nama = $picture_process->getClientOriginalName();
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename_process = 'Process_'.$form_number.'.'.$extension;

        $picture_process->move($tujuan_upload,$filename_process);

    }else{
        $filename_process = "";
    }

    if ($picture_after != null || $picture_after != "") {
        $nama = $picture_after->getClientOriginalName();
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename_after = 'After_'.$form_number.'.'.$extension;

        $picture_after->move($tujuan_upload,$filename_after);

    }else{
        $filename_after = "";
    }


    //Approval
    // sementara pakai created_by
    $pic_app = $request->get('officer_id').'/'.$request->get('officer');

    $manager_pic = DB::select('SELECT username, name from send_emails left join users on send_emails.email = users.email where send_emails.remark = "'.$request->get('officer_dept').'"');
    $manager_app = $manager_pic[0]->username.'/'.$manager_pic[0]->name;

    $div_pic = EmployeeSync::where('employee_id', '=', $request->get('officer_id'))->select('division')->first();
    $gm_pic = EmployeeSync::where('division', '=', $div_pic->division)->where('position', 'like', 'General Manager%')
    ->whereNull('end_date')
    ->select('employee_id', 'name')
    ->first();
    $gm_app = $gm_pic->employee_id.'/'.$gm_pic->name;

    $acc_manager = EmployeeSync::whereNull('end_date')->where('department', '=', 'Accounting Department')
    ->where('position', 'like', 'Manager%')
    ->select('employee_id', 'name')
    ->first();
    $acc_manager_app = $acc_manager->employee_id.'/'.$acc_manager->name;

    $dir = EmployeeSync::whereNull('end_date')->where('position', 'like', 'Director%')
    ->where('division', '=', 'Finance Division')
    ->select('employee_id', 'name')
    ->first();
    $director_fin = $dir->employee_id.'/'.$dir->name;

    $fa_control_app = 'PI0905001/Ismail Husen';

    $asset_disposal_scrap = new FixedAssetDisposalScrap([
        'form_number' => $form_number,
        'form_number_disposal' => $request->get('form_number'),
        'fixed_asset_id' => $request->get('asset_no'),
        'fixed_asset_name' => $request->get('asset_name'),
        'disposal_date' => $request->get('disposal_date'),
        'officer_department' => $request->get('officer_dept'),
        'officer' => $request->get('officer_id').'/'.$request->get('officer'),
        'picture_before' => $filename_before,
        'picture_process' => $filename_process,
        'picture_after' => $filename_after,
        'status' => 'created',
        'last_status' => 'created',
        'pic_app' => $pic_app,
        'manager_app' => $manager_app,
        'gm_app' => $gm_app,
        'acc_manager_app' => $acc_manager_app,
        'director_app' => $director_fin,
        'acc_control_app' => $fa_control_app,
        'created_by' => Auth::user()->username
    ]);
    $asset_disposal_scrap->save();

    $asset_upd = FixedAssetDisposal::where('form_number', '=', $request->get('form_number'))
    ->update([
        'remark' => 'reported',
    ]);


    // ---------------------- REPORT PDF --------------------

    $disposal_scrap = FixedAssetDisposalScrap::where('form_number', '=', $form_number)
    ->select('form_number', 'form_number_disposal', 'fixed_asset_id', 'fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'pic_app', db::raw('DATE_FORMAT(pic_app_date, "%d %b %Y") as pic_app_date'), 'manager_app', db::raw('DATE_FORMAT(manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(director_app_date, "%d %b %Y") as director_app_date'), 'acc_control_app', db::raw('DATE_FORMAT(acc_control_app_date, "%d %b %Y") as acc_control_app_date'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_at'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.disposal_report_scrap', array(
        'datas' => $disposal_scrap
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_disposal_scrap/DisposalScrap_".$form_number.".pdf");

     // --------  APROVAL ------------

    $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $asset_disposal_scrap->id)
    ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
    ->first();

    $data = [
        'datas' => $data_fixed_asset
    ];

    $get_pos = EmployeeSync::where('employee_id', '=', $request->get('officer_id'))->select('position', 'section')->first();

    // JIKA Leader
    if (str_contains($get_pos->position,'Leader')) {
        $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

        Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
    } else {
        $mail = db::select("SELECT email from users where username = '".$request->get('officer_id')."'");

        Mail::to($mail[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
    }

    $response = array(
        'status' => true,
        'email' => $mail
    );
    return Response::json($response);
}


public function MonitoringDisposalScrapAsset()
{
    $title = 'Monitoring Fixed Asset Disposal Scrap';
    $title_jp = '';

    return view('warehouse_new.barang_modal.monitoring_asset_scrap', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', 'Monitoring Fixed Asset Disposal Scrap')
    ->with('head', 'Monitoring Fixed Asset Disposal Scrap');
}

public function fetchMonitoringDisposalScrapAsset(Request $request)
{

    $period = '';
    if (strlen($request->get('period')) > 0) {
        $period = $request->get('period');
    } else {
        $period = date('Y-m');
    }

    $month = date('F Y', strtotime($period));
    $data = db::select("SELECT * from fixed_asset_disposals where deleted_at is null");
    
    $data_chart = db::select("
        SELECT
        DATE_FORMAT( disposal_request_date, '%Y-%m' ) AS bulan,
        COUNT(id) as jumlah
        FROM
        fixed_asset_disposals 
        WHERE
        deleted_at IS NULL 
        and DATE_FORMAT( disposal_request_date, '%Y-%m' ) IS NOT NULL
        GROUP BY
        bulan
        ");

    $response = array(
        'status' => true,
        'data' => $data,
        'data_chart' => $data_chart,
        'month' => $month
    );
    return Response::json($response);
}


public function postEvidenceDisposalScrapAsset(Request $request)
{
  try{
    $id_user = Auth::id();
    $tujuan_upload = 'files/fixed_asset/scrap_evidence';
    $file = $request->file('file_upload');
    $nama = $file->getClientOriginalName();
    $filename = pathinfo($nama, PATHINFO_FILENAME);
    $extension = pathinfo($nama, PATHINFO_EXTENSION);
    $filename = md5($filename.date('YmdHisa')).'.'.$extension;
    $file->move($tujuan_upload,$filename);

    $asset = FixedAssetDisposal::find($request->input("id"));
    $asset->step1 = $filename;
    $asset->save();

    $response = array(
      'status' => true,
  );
    return Response::json($response);
}
catch (QueryException $e){
    $error_code = $e->errorInfo[1];
    if($error_code == 1062){
     $response = array(
      'status' => false,
      'datas' => "Asset Already Exist",
  );
     return Response::json($response);
 }
 else{
     $response = array(
      'status' => false,
      'datas' => $e->getMessage(),
  );
     return Response::json($response);
 }
}
}


public function approvalAssetScrap($id, $status, $posisi)
{
    $title = 'Approval Report Scrap Asset';
    $title_jp = '??';


    if ($status == 'Approved') {
        $message2 = 'Successfully Approved';
        $stat = true;
        $stat2 = 'approve';
        $nama = '';
        $asset = FixedAssetDisposalScrap::where('id', '=', $id)
        ->select('id', 'form_number', 'pic_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'acc_control_app')
        ->first();

        $sec = EmployeeSync::where('department', '=', explode('/', $asset->pic_app)[1])->select('section')->get();
        $sec_arr = [];

        foreach ($sec as $section) {
            array_push($sec_arr, $section->section);
        }

        $loc_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereIn('fixed_asset_items.section', $sec_arr)
        ->whereNull('retired_date')
        ->select('location')
        ->groupBy('location')
        ->get();

    } else if ($status == 'Reject'){
        $message2 = 'Rejected & Comment';
        $stat = false;
        $stat2 = 'reject';

        $asset = FixedAssetDisposalScrap::where('id', '=', $id)
        ->select('id', 'form_number', 'pic_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'acc_control_app')
        ->first();

        $sec = EmployeeSync::where('department', '=', explode('/', $asset->pic_app)[1])->select('section')->get();
        $sec_arr = [];

        foreach ($sec as $section) {
            array_push($sec_arr, $section->section);
        }

        $loc_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereIn('fixed_asset_items.section', $sec_arr)
        ->whereNull('retired_date')
        ->select('location')
        ->groupBy('location')
        ->get();

        if ($posisi == 'created') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'pic') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'manager') {
            $nama = $asset->manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'gm') {
            $nama = $asset->gm_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'acc_manager') {
            $nama = $asset->acc_manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'director') {
            $nama = $asset->director_app.'/'.date('Y-m-d H:i:s');
        } 

    } else if ($status == 'Hold') {
        $message2 = 'Hold & Comment';
        $stat = false;
        $stat2 = 'hold';

        $asset = FixedAssetDisposalScrap::where('id', '=', $id)
        ->select('id', 'form_number', 'pic_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'acc_control_app')
        ->first();

        $sec = EmployeeSync::where('department', '=', explode('/', $asset->pic_app)[1])->select('section')->get();
        $sec_arr = [];

        foreach ($sec as $section) {
            array_push($sec_arr, $section->section);
        }

        $loc_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereIn('fixed_asset_items.section', $sec_arr)
        ->whereNull('retired_date')
        ->select('location')
        ->groupBy('location')
        ->get();

        if ($posisi == 'created') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'pic') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'manager') {
            $nama = $asset->manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'gm') {
            $nama = $asset->gm_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'acc_manager') {
            $nama = $asset->acc_manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'director') {
            $nama = $asset->director_app.'/'.date('Y-m-d H:i:s');
        } 
    }

    // -----------------------------------------------------------------------

    if ($posisi == 'pic') {
        $message = 'Report Scrap Asset';
        if ($stat) {
            $asset_upd = FixedAssetDisposalScrap::where('id', '=', $id)
            ->update([
                'pic_app_date' => date('Y-m-d H:i:s'),
                'status' => 'pic',
                'last_status' => 'pic'
            ]);

            // ---------------------- REPORT PDF --------------------

            $disposal_scrap = FixedAssetDisposalScrap::where('form_number', '=', $asset->form_number)
            ->select('form_number', 'form_number_disposal', 'fixed_asset_id', 'fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'pic_app', db::raw('DATE_FORMAT(pic_app_date, "%d %b %Y") as pic_app_date'), 'manager_app', db::raw('DATE_FORMAT(manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(director_app_date, "%d %b %Y") as director_app_date'), 'acc_control_app', db::raw('DATE_FORMAT(acc_control_app_date, "%d %b %Y") as acc_control_app_date'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report_scrap', array(
                'datas' => $disposal_scrap
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal_scrap/DisposalScrap_".$asset->form_number.".pdf");            

            // --------  APROVAL ------------

            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $id)
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $manager = explode('/', $asset->manager_app)[0];
            $email = db::select("SELECT email from users where username = '".$manager."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        }
    } else if ($posisi == 'manager') {
        $message = 'Report Scrap Asset';
        if ($stat) {
            $asset_upd = FixedAssetDisposalScrap::where('id', '=', $id)
            ->update([
                'manager_app_date' => date('Y-m-d H:i:s'),
                'status' => 'manager',
                'last_status' => 'manager'
            ]);

             // ---------------------- REPORT PDF --------------------

            $disposal_scrap = FixedAssetDisposalScrap::where('form_number', '=', $asset->form_number)
            ->select('form_number', 'form_number_disposal', 'fixed_asset_id', 'fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'pic_app', db::raw('DATE_FORMAT(pic_app_date, "%d %b %Y") as pic_app_date'), 'manager_app', db::raw('DATE_FORMAT(manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(director_app_date, "%d %b %Y") as director_app_date'), 'acc_control_app', db::raw('DATE_FORMAT(acc_control_app_date, "%d %b %Y") as acc_control_app_date'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report_scrap', array(
                'datas' => $disposal_scrap
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal_scrap/DisposalScrap_".$asset->form_number.".pdf");            

            // --------  APROVAL ------------

            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $id)
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $gm = explode('/', $asset->gm_app)[0];
            $email = db::select("SELECT email from users where username = '".$gm."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } 
    } else if ($posisi == 'gm') {
        $message = 'Report Scrap Asset';
        if ($stat) {
            $asset_upd = FixedAssetDisposalScrap::where('id', '=', $id)
            ->update([
                'gm_app_date' => date('Y-m-d H:i:s'),
                'status' => 'gm',
                'last_status' => 'gm'
            ]);

             // ---------------------- REPORT PDF --------------------

            $disposal_scrap = FixedAssetDisposalScrap::where('form_number', '=', $asset->form_number)
            ->select('form_number', 'form_number_disposal', 'fixed_asset_id', 'fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'pic_app', db::raw('DATE_FORMAT(pic_app_date, "%d %b %Y") as pic_app_date'), 'manager_app', db::raw('DATE_FORMAT(manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(director_app_date, "%d %b %Y") as director_app_date'), 'acc_control_app', db::raw('DATE_FORMAT(acc_control_app_date, "%d %b %Y") as acc_control_app_date'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report_scrap', array(
                'datas' => $disposal_scrap
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal_scrap/DisposalScrap_".$asset->form_number.".pdf");

            // --------  APROVAL ------------

            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $id)
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $acc_manager = explode('/', $asset->acc_manager_app)[0];
            $email = db::select("SELECT email from users where username = '".$acc_manager."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } 
    } else if ($posisi == 'acc_manager') {
        $message = 'Report Scrap Asset';
        if ($stat) {
            $asset_upd = FixedAssetDisposalScrap::where('id', '=', $id)
            ->update([
                'acc_manager_app_date' => date('Y-m-d H:i:s'),
                'status' => 'acc_manager',
                'last_status' => 'acc_manager'
            ]);

             // ---------------------- REPORT PDF --------------------

            $disposal_scrap = FixedAssetDisposalScrap::where('form_number', '=', $asset->form_number)
            ->select('form_number', 'form_number_disposal', 'fixed_asset_id', 'fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'pic_app', db::raw('DATE_FORMAT(pic_app_date, "%d %b %Y") as pic_app_date'), 'manager_app', db::raw('DATE_FORMAT(manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(director_app_date, "%d %b %Y") as director_app_date'), 'acc_control_app', db::raw('DATE_FORMAT(acc_control_app_date, "%d %b %Y") as acc_control_app_date'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report_scrap', array(
                'datas' => $disposal_scrap
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal_scrap/DisposalScrap_".$asset->form_number.".pdf");

            // --------  APROVAL ------------

            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $id)
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $director_app = explode('/', $asset->director_app)[0];
            $email = db::select("SELECT email from users where username = '".$director_app."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } 
    } else if ($posisi == 'director') {
        $message = 'Report Scrap Asset';
        if ($stat) {
            $asset_upd = FixedAssetDisposalScrap::where('id', '=', $id)
            ->update([
                'director_app_date' => date('Y-m-d H:i:s'),
                'status' => 'director',
                'last_status' => 'director'
            ]);

             // ---------------------- REPORT PDF --------------------

            $disposal_scrap = FixedAssetDisposalScrap::where('form_number', '=', $asset->form_number)
            ->select('form_number', 'form_number_disposal', 'fixed_asset_id', 'fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'pic_app', db::raw('DATE_FORMAT(pic_app_date, "%d %b %Y") as pic_app_date'), 'manager_app', db::raw('DATE_FORMAT(manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(director_app_date, "%d %b %Y") as director_app_date'), 'acc_control_app', db::raw('DATE_FORMAT(acc_control_app_date, "%d %b %Y") as acc_control_app_date'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.disposal_report_scrap', array(
                'datas' => $disposal_scrap
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_disposal_scrap/DisposalScrap_".$asset->form_number.".pdf");

            // --------  APROVAL ------------

            $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $id)
            ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $acc_control_app = explode('/', $asset->acc_control_app)[0];
            $email = db::select("SELECT email from users where username = '".$acc_control_app."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_scrap'));
        } 
    } else if ($posisi == 'fa_control') {
        $message = 'Report Scrap Asset';
        $stat2 = 'disposal_date';
    }

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $nama,
        'loc_list' => $loc_list
    ))->with('page', 'Fixed Asset Approval');
}

public function approveDisposalRetire(Request $request)
{
    $title = 'Approval Report Scrap Asset';
    $title_jp = '??';
    $message2 = 'Successfully Approved';
    $message = 'Report Scrap Asset';
    $stat = true;
    $stat2 = 'approve';

    $asset = FixedAssetDisposalScrap::where('id', '=', $request->get('id'))
    ->select('id', 'form_number', 'pic_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'acc_control_app')
    ->first();

    $asset_upd = FixedAssetDisposalScrap::where('id', '=', $request->get('id'))
    ->update([
        'acc_control_app_date' => date('Y-m-d H:i:s'),
        'status' => 'fa_control',
        'last_status' => 'fa_control'
    ]);

    // ---------------------- REPORT PDF --------------------

    $disposal_scrap = FixedAssetDisposalScrap::where('form_number', '=', $asset->form_number)
    ->select('form_number', 'form_number_disposal', 'fixed_asset_id', 'fixed_asset_name', db::raw('DATE_FORMAT(disposal_date, "%d %b %Y") as disposal_date'), 'officer_department', 'officer', 'picture_before', 'picture_process', 'picture_after', 'pic_app', db::raw('DATE_FORMAT(pic_app_date, "%d %b %Y") as pic_app_date'), 'manager_app', db::raw('DATE_FORMAT(manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(director_app_date, "%d %b %Y") as director_app_date'), 'acc_control_app', db::raw('DATE_FORMAT(acc_control_app_date, "%d %b %Y") as acc_control_app_date'), db::raw('DATE_FORMAT(created_at, "%d %b %Y") as create_at'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.disposal_report_scrap', array(
        'datas' => $disposal_scrap
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_disposal_scrap/DisposalScrap_".$asset->form_number.".pdf");


    $asset_upd = FixedAssetitem::where('sap_number', '=', $disposal_scrap->fixed_asset_id)
    ->update([
        'retired_date' => $request->get('retired_date'),
    ]);

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $request->get('nama'),
    ))->with('page', 'Fixed Asset Approval');
}

public function fetchDisposalScrapAssetById(Request $request)
{
    $data_fixed_asset = FixedAssetDisposalScrap::where('fixed_asset_disposal_scraps.id', '=', $request->get('id'))
    ->select('fixed_asset_disposal_scraps.id', 'fixed_asset_disposal_scraps.form_number_disposal', 'fixed_asset_disposal_scraps.form_number','fixed_asset_disposal_scraps.fixed_asset_id', 'fixed_asset_disposal_scraps.fixed_asset_name', 'fixed_asset_disposal_scraps.disposal_date', 'fixed_asset_disposal_scraps.officer', 'fixed_asset_disposal_scraps.officer_department','fixed_asset_disposal_scraps.picture_before', 'fixed_asset_disposal_scraps.picture_process', 'fixed_asset_disposal_scraps.picture_after', db::raw('DATE_FORMAT("fixed_asset_disposal_scraps.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposal_scraps.status')
    ->first();

    $response = array(
        'status' => true,
        'datas' => $data_fixed_asset
    );
    return Response::json($response);
}

public function EditDisposalScrapAsset(Request $request)
{
    try {
        $picture_before = $request->file('picture_before');
        $picture_process = $request->file('picture_process');
        $picture_after = $request->file('picture_after');

        $tujuan_upload = 'files/fixed_asset/scrap_picture';

        if ($picture_before != null || $picture_before != "") {
            $nama = $picture_before->getClientOriginalName();
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename_before = 'Before_'.$request->get('asset_no_edit').'.'.$extension;

            $picture_before->move($tujuan_upload,$filename_before);

        }else{
            $filename_before = "";
        }

        if ($picture_process != null || $picture_process != "") {
            $nama = $picture_process->getClientOriginalName();
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename_process = 'Process_'.$request->get('asset_no_edit').'.'.$extension;

            $picture_process->move($tujuan_upload,$filename_process);

        }else{
            $filename_process = "";
        }

        if ($picture_after != null || $picture_after != "") {
            $nama = $picture_after->getClientOriginalName();
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename_after = 'After_'.$request->get('asset_no_edit').'.'.$extension;

            $picture_after->move($tujuan_upload,$filename_after);

        }else{
            $filename_after = "";
        }

        $asset_dispo = FixedAssetDisposalScrap::where('id', '=', $request->get("id_edit"))->first();

        if ($asset_dispo->status == 'hold') {
            $stat = $asset_dispo->last_status;
        } else if ($asset_dispo->status == 'reject') {
            $stat = 'created';
        } else {
            $stat = $asset_dispo->status;
        }

        $dispo_upd = FixedAssetDisposalScrap::where('id', '=', $request->get('id_edit'))
        ->update([
            'disposal_date' => $request->get('disposal_date_edit'),
            'picture_before' => $filename_before,
            'picture_process' => $filename_process,
            'picture_after' => $filename_after,
            'status' => $stat,
        ]);

        $response = array(
            'status' => true,
        );
        return Response::json($response);
    } catch (Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function indexMissingAsset()
{
    $title = "Fixed Asset Missing Form";
    $title_jp = "??";

    $dept = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();

    $sec = EmployeeSync::where('department', '=', $dept->department)->select('section')->get();
    $sec_arr = [];

    foreach ($sec as $section) {
        array_push($sec_arr, $section->section);
    }

    $asset_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
    ->whereIn('fixed_asset_items.section', $sec_arr)
    ->whereNull('retired_date')
    ->select('sap_number', 'fixed_asset_name', 'location', 'fixed_asset_items.section', 'pic', 'name', 'classification_category')
    ->get();

    // $asset_list = FixedAssetRegistration::select('sap_id', 'asset_name', 'pic', 'location', 'created_by')
    // ->get();

    return view('fixed_asset.form.missing_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'asset_list' => $asset_list
    ))->with('page', 'Fixed Asset Missing');
}

public function fetchMissingAsset()
{
    $missings = FixedAssetMissing::orderBy('id');
    if (Auth::user()->username != 'PI0905001') {
        $missings = $missings->where('created_by', '=', Auth::user()->username);
    } 

    $missings = $missings->get();

    $response = array(
        'status' => true,
        'missing_datas' => $missings
    );
    return Response::json($response);
}

public function postMissingAsset(Request $request)
{
    $tahun = date('y');
    $bulan = date('m');

    $query = "SELECT form_number FROM `fixed_asset_missings` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by form_number DESC LIMIT 1";
    $nomorurut = DB::select($query);

    if ($nomorurut != null)
    {
        $nomor = substr($nomorurut[0]->form_number, -3);
        $nomor = $nomor + 1;
        $nomor = sprintf('%03d', $nomor);
    }
    else
    {
        $nomor = "001";
    }

    $result['tahun'] = $tahun;
    $result['bulan'] = $bulan;
    $result['no_urut'] = $nomor;

    $form_number = 'FAM'.$result['tahun'].$result['bulan'].$result['no_urut'];

    //  ----------------- Upload ----------

    $asset_picture = $request->file('asset_picture');

    $tujuan_upload = 'files/fixed_asset/missing_picture';

    if ($asset_picture != null || $asset_picture != "") {
        $nama = $asset_picture->getClientOriginalName();
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename = $form_number.'.'.$extension;

        $asset_picture->move($tujuan_upload,$filename);

    }else{
        $filename = "";
    }


    $dept = EmployeeSync::where('employee_id', '=', $request->get('asset_pic'))->select('employee_id','name','section', 'position','department')->first();

    if (strpos($dept->position, 'Staff') !== false ) {
        $q_pic = db::select("SELECT username, name, email from users where username = '".$dept->employee_id."'");
        $pic_app = $dept->employee_id.'/'.$dept->name;
    } else {
        $q_pic = db::select("SELECT username, name, send_emails.email from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$dept->section."'");
        $pic_app = $q_pic[0]->username.'/'.$q_pic[0]->name;
    }

    $q_manager = db::select("SELECT username, name, send_emails.email from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$dept->department."'");
    $manager_app = $q_manager[0]->username.'/'.$q_manager[0]->name;

    $div_pic = EmployeeSync::where('employee_id', '=', $request->get('asset_pic'))->select('division')->first();
    $gm_pic = EmployeeSync::where('division', '=', $div_pic->division)->where('position', 'like', 'General Manager%')
    ->whereNull('end_date')
    ->select('employee_id', 'name')
    ->first();
    $gm_app = $gm_pic->employee_id.'/'.$gm_pic->name;

    $acc_manager = EmployeeSync::whereNull('end_date')->where('department', '=', 'Accounting Department')
    ->where('position', 'like', 'Manager%')
    ->select('employee_id', 'name')
    ->first();
    $acc_manager_app = $acc_manager->employee_id.'/'.$acc_manager->name;

    $dir = EmployeeSync::whereNull('end_date')->where('position', 'like', 'Director%')
    ->where('division', '=', 'Finance Division')
    ->select('employee_id', 'name')
    ->first();
    $director_fin_app = $dir->employee_id.'/'.$dir->name;

    $presdir = EmployeeSync::whereNull('end_date')->where('position', 'like', 'President Director%')
    ->select('employee_id', 'name')
    ->first();
    $presdir_app = $presdir->employee_id.'/'.$presdir->name;

    $fa_app = 'PI0905001/Ismail Husen';

    $asset_missing = new FixedAssetMissing([
        'form_number' => $form_number,
        'request_date' => $request->get('request_date'),
        'fixed_asset_id' => $request->get('asset_no'),
        'fixed_asset_name' => $request->get('asset_name'),
        'clasification' => $request->get('asset_cls'),
        'section_control' => $request->get('section'),
        'new_picture' => $filename,
        'reason' => $request->get('disposal_reason'),
        'missing_reason' => $request->get('missing_reason'),
        'improvement_plan' => $request->get('improvement_plan'),
        'status' => 'created',
        'last_status' => 'created',
        'pic_app' => $pic_app,
        'fa_app' => $fa_app,
        'manager_app' => $manager_app,
        'gm_app' => $gm_app,
        'acc_manager_app' => $acc_manager_app,
        'director_app' => $director_fin_app,
        'presdir_app' => $presdir_app,
        'created_by' => Auth::user()->username
    ]);
    $asset_missing->save();

    // ---------------- REPORT PDF ---------------

    $missing = FixedAssetMissing::where('form_number', '=', $form_number)
    ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.missing_report', array(
        'datas' => $missing
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$form_number.".pdf");

    // --------------- SEND MAIL ---------------------------

    $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $asset_missing->form_number)
    ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
    ->first();

    $data = [
        'datas' => $data_fixed_asset
    ];

    $get_pos = EmployeeSync::where('employee_id', '=', $request->get('asset_pic'))->select('position', 'section')->first();

    // JIKA Leader
    if (str_contains($get_pos->position,'Leader')) {
        $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
    } else {
        $mail = db::select("SELECT email from users where username = '".$request->get('asset_pic')."'");

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
    }
}

public function fillMissingAsset(Request $request)
{
    try {
        $dispo_upd = FixedAssetMissing::where('form_number', '=', $request->get('form_number_fill'))
        ->update([
            'acquisition_cost' => $request->get('acq_fill'),
            'acquisition_date' => $request->get('acq_date_fill'),
            'book_value' => $request->get('net_fill'),
            'fa_app_date' => date('Y-m-d H:i:s'),
            'status' => 'fa_control',
            'last_status' => 'fa_control'
        ]);

        // ---------------- REPORT PDF ---------------

        $missing = FixedAssetMissing::where('form_number', '=', $request->get('form_number_fill'))
        ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'),'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
        ->first();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('fixed_asset.report_file.missing_report', array(
            'datas' => $missing
        ));

        $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$request->get('form_number_fill').".pdf");

        // APPROVAL
        $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('form_number_fill'))
        ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status', 'fixed_asset_missings.manager_app')
        ->first();

        $data = [
            'datas' => $data_fixed_asset
        ];

        $manager = explode('/', $data_fixed_asset->manager_app)[0];
        $email = db::select("SELECT email from users where username = '".$manager."'");

        Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));

        $response = array(
            'status' => true
        );
        return Response::json($response);
    } catch (Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function approvalAssetMissing($id, $status, $posisi)
{
    $title = 'Approval Missing Asset';
    $title_jp = '??';


    if ($status == 'Approved') {
        $message2 = 'Successfully Approved';
        $stat = true;
        $stat2 = 'approve';
        $nama = '';
        $asset = FixedAssetMissing::where('form_number', '=', $id)
        ->select('id', 'form_number', 'fixed_asset_id', 'pic_app', 'fa_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'presdir_app', 'created_by', 'retire_date')
        ->first();

    } else if ($status == 'Reject'){
        $message2 = 'Rejected & Comment';
        $stat = false;
        $stat2 = 'reject';

        $asset = FixedAssetMissing::where('form_number', '=', $id)
        ->select('id', 'form_number', 'fixed_asset_id', 'pic_app', 'fa_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'presdir_app', 'created_by', 'retire_date')
        ->first();

        if ($posisi == 'created') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'pic') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'fa_control') {
            $nama = 'PI0905001/Ismail Husen/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'manager') {
            $nama = $asset->manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'gm') {
            $nama = $asset->gm_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'acc_manager') {
            $nama = $asset->acc_manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'director_fin') {
            $nama = $asset->director_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'presdir') {
            $nama = $asset->presdir_app.'/'.date('Y-m-d H:i:s');
        }
    } else if ($status == 'Hold') {
        $message2 = 'Hold & Comment';
        $stat = false;
        $stat2 = 'hold';

        $asset = FixedAssetMissing::where('form_number', '=', $id)
        ->select('id','form_number', 'fixed_asset_id', 'pic_app', 'fa_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'presdir_app', 'created_by', 'retire_date')
        ->first();

        if ($posisi == 'created') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'pic') {
            $nama = $asset->pic_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'fa_control') {
            $nama = 'PI0905001/Ismail Husen/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'manager') {
            $nama = $asset->manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'gm') {
            $nama = $asset->gm_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'acc_manager') {
            $nama = $asset->acc_manager_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'director_fin') {
            $nama = $asset->director_app.'/'.date('Y-m-d H:i:s');
        } else if ($posisi == 'presdir') {
            $nama = $asset->presdir_app.'/'.date('Y-m-d H:i:s');
        }
    }

    if ($posisi == 'pic') {
        $message = 'Report Missing Asset';
        if ($stat) {
            $asset_upd = FixedAssetMissing::where('form_number', '=', $id)
            ->update([
                'pic_app_date' => date('Y-m-d H:i:s'),
                'status' => 'pic',
                'last_status' => 'pic'
            ]);

            // ---------------- REPORT PDF ---------------

            $missing = FixedAssetMissing::where('form_number', '=', $id)
            ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.missing_report', array(
                'datas' => $missing
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$id.".pdf");

            // ---------  APPROVAL ------------

            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $id)
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            Mail::to('ismail.husen@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    } else if ($posisi == 'fa_control') {
        $message = 'Report Missing Asset';
        if ($stat) {
            $asset_upd = FixedAssetMissing::where('form_number', '=', $id)
            ->update([
                'fa_app_date' => date('Y-m-d H:i:s'),
                'status' => 'fa_control',
                'last_status' => 'fa_control'
            ]);

            // ---------------- REPORT PDF ---------------

            $missing = FixedAssetMissing::where('form_number', '=', $id)
            ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.missing_report', array(
                'datas' => $missing
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$id.".pdf");

            // ---------  APPROVAL ------------


            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $id)
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $manager = explode('/', $asset->manager_app)[0];
            $email = db::select("SELECT email from users where username = '".$manager."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        } 
    }else if ($posisi == 'manager') {
        $message = 'Report Missing Asset';
        if ($stat) {
            $asset_upd = FixedAssetMissing::where('form_number', '=', $id)
            ->update([
                'manager_app_date' => date('Y-m-d H:i:s'),
                'status' => 'manager',
                'last_status' => 'manager'
            ]);

            // ---------------- REPORT PDF ---------------

            $missing = FixedAssetMissing::where('form_number', '=', $id)
            ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.missing_report', array(
                'datas' => $missing
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$id.".pdf");

            // ---------  APPROVAL ------------

            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $id)
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'),  db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $gm = explode('/', $asset->gm_app)[0];
            $email = db::select("SELECT email from users where username = '".$gm."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    } else if ($posisi == 'gm') {
        $message = 'Report Missing Asset';
        if ($stat) {
            $asset_upd = FixedAssetMissing::where('form_number', '=', $id)
            ->update([
                'gm_app_date' => date('Y-m-d H:i:s'),
                'status' => 'gm',
                'last_status' => 'gm'
            ]);

            // ---------------- REPORT PDF ---------------

            $missing = FixedAssetMissing::where('form_number', '=', $id)
            ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.missing_report', array(
                'datas' => $missing
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$id.".pdf");

            // ---------  APPROVAL ------------

            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $id)
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $manager_acc = explode('/', $asset->acc_manager_app)[0];
            $email = db::select("SELECT email from users where username = '".$manager_acc."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    } else if ($posisi == 'acc_manager') {
        $message = 'Report Missing Asset';
        if ($stat) {
            $asset_upd = FixedAssetMissing::where('form_number', '=', $id)
            ->update([
                'acc_manager_app_date' => date('Y-m-d H:i:s'),
                'status' => 'acc_manager',
                'last_status' => 'acc_manager'
            ]);

            // ---------------- REPORT PDF ---------------

            $missing = FixedAssetMissing::where('form_number', '=', $id)
            ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.missing_report', array(
                'datas' => $missing
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$id.".pdf");

            // ---------  APPROVAL ------------

            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $id)
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $dir_fin_acc = explode('/', $asset->director_app)[0];
            $email = db::select("SELECT email from users where username = '".$dir_fin_acc."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    } else if ($posisi == 'director_fin') {
        $message = 'Report Missing Asset';
        if ($stat) {
            $asset_upd = FixedAssetMissing::where('form_number', '=', $id)
            ->update([
                'director_app_date' => date('Y-m-d H:i:s'),
                'status' => 'director_fin',
                'last_status' => 'director_fin'
            ]);

            // ---------------- REPORT PDF ---------------

            $missing = FixedAssetMissing::where('form_number', '=', $id)
            ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.missing_report', array(
                'datas' => $missing
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$id.".pdf");

            // ---------  APPROVAL ------------

            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $id)
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $presdir_app = explode('/', $asset->presdir_app)[0];
            $email = db::select("SELECT email from users where username = '".$presdir_app."'");

            Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    } else if ($posisi == 'presdir') {
        $message = 'Report Missing Asset';
        if ($stat) {
            $asset_upd = FixedAssetMissing::where('form_number', '=', $id)
            ->update([
                'presdir_app_date' => date('Y-m-d H:i:s'),
                'status' => 'presdir',
                'last_status' => 'presdir'
            ]);

            // ---------------- REPORT PDF ---------------

            $missing = FixedAssetMissing::where('form_number', '=', $id)
            ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
            ->first();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('fixed_asset.report_file.missing_report', array(
                'datas' => $missing
            ));

            $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$id.".pdf");

            // ---------  APPROVAL ------------

            $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $id)
            ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
            ->first();

            $data = [
                'datas' => $data_fixed_asset
            ];

            $pic_app = $asset->created_by;
            $email = db::select("SELECT email from users where username = '".$pic_app."'");

            Mail::to($email[0]->email)->cc(['ismail.husen@music.yamaha.com'])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
        }
    } else if ($posisi == 'fa_control_upload') {
        $message = 'Report Missing Asset';

        $stat2 = 'upload_doc_missing';

    } else if ($posisi = 'fa_manager_doc') {
        $message = 'Report Missing Asset';

        $stat2 = 'upload_doc_missing_2';
    }

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $nama
    ))->with('page', 'Fixed Asset Approval');
}

public function approveMissingDokumen(Request $request)
{
    $title = 'Approval Missing Asset';
    $title_jp = '??';

    $message2 = 'Successfully Approved';
    $stat = true;
    $stat2 = 'approve';
    $nama = '';
    $message = 'Report Missing Asset';
    $stat2 = 'approve';

    $asset = FixedAssetMissing::where('form_number', '=', $request->get('form_number_missing'))
    ->select('id', 'form_number', 'fixed_asset_id', 'pic_app', 'fa_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'presdir_app', 'created_by', 'retire_date')
    ->first();

    $asset_upd = FixedAssetMissing::where('form_number', '=', $request->get('form_number_missing'))
    ->update([
        'upload_doc_date' => date('Y-m-d H:i:s'),
        'status' => 'upload_doc',
        'last_status' => 'upload_doc',
        'retire_date' => $request->get('retire_date')
    ]);


    FixedAssetItem::where('sap_number', '=', $asset->fixed_asset_id)
    ->update([
        'retired_date' => $asset->retire_date,
    ]);

    $missing_doc = $request->file('file');

    $tujuan_upload = 'files/fixed_asset/missing_document';

    if ($missing_doc != null || $missing_doc != "") {
        $nama = $missing_doc->getClientOriginalName();
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename_before = $asset->form_number.'.'.$extension;

        $missing_doc->move($tujuan_upload,$filename_before);
    }

    // ---------------- REPORT PDF ---------------

    $missing = FixedAssetMissing::where('form_number', '=', $request->get('form_number_missing'))
    ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.missing_report', array(
        'datas' => $missing
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$request->get('form_number_missing').".pdf");

        // ---------  APPROVAL ------------
    $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('form_number_missing'))
    ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
    ->first();

    $data = [
        'datas' => $data_fixed_asset
    ];

    $acc_manager = explode('/', $asset->acc_manager_app)[0];
    $email = db::select("SELECT email from users where username = '".$acc_manager."'");

    Mail::to($email[0]->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));

    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $nama
    ))->with('page', 'Fixed Asset Approval');
}

public function approveMissingDokumenManager(Request $request)
{
    $title = 'Approval Missing Asset';
    $title_jp = '??';

    $message2 = 'Successfully Approved';
    $stat = true;
    $stat2 = 'approve';
    $nama = '';
    $message = 'Report Missing Asset';
    $stat2 = 'approve';

    $asset = FixedAssetMissing::where('form_number', '=', $request->get('form_number_missing2'))
    ->select('id', 'form_number', 'fixed_asset_id', 'pic_app', 'fa_app', 'manager_app', 'gm_app', 'acc_manager_app', 'director_app', 'presdir_app', 'created_by', 'retire_date')
    ->first();

    $asset_upd = FixedAssetMissing::where('form_number', '=', $request->get('form_number_missing2'))
    ->update([
        'upload_doc_date' => date('Y-m-d H:i:s'),
        'status' => 'approve_doc',
        'last_status' => 'approve_doc'
    ]);

    $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('form_number_missing2'))
    ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan', db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), 'fixed_asset_missings.status')
    ->first();

    $data = [
        'datas' => $data_fixed_asset
    ];

    $get_pos = EmployeeSync::where('employee_id', '=', explode('/', $asset->pic_app)[0])->select('position', 'section')->first();

    // JIKA Leader
    if (str_contains($get_pos->position,'Leader')) {
        $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
    } else {
        $mail = db::select("SELECT email from users where username = '".explode('/', $asset->pic_app)[0]."'");

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_missing'));
    }

        // FixedAssetItem::where('sap_number', '=', $asset->fixed_asset_id)
        // ->update([
        //     'retired_date' => $asset->retired_date,
        // ]);


    return view('fixed_asset.approval_message', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'message' => $message,
        'message2' => $message2,
        'asset' => $asset,
        'status' => $stat,
        'status2' => $stat2,
        'nama' => $nama
    ))->with('page', 'Fixed Asset Approval');
}

public function fetchMissingAssetById(Request $request)
{
    $data_fixed_asset = FixedAssetMissing::where('fixed_asset_missings.form_number', '=', $request->get('id'))
    ->select('fixed_asset_missings.id', 'fixed_asset_missings.form_number','fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.request_date', 'fixed_asset_missings.new_picture', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.missing_reason', 'fixed_asset_missings.improvement_plan')
    ->first();

    $response = array(
        'status' => true,
        'missing' => $data_fixed_asset,
    );
    return Response::json($response);
}

public function EditMissingAsset(Request $request)
{    
    try {
        $file = $request->file('asset_picture_edit');
        $tujuan_upload = 'files/fixed_asset/missing_picture';

        if ($file != null || $file != "") {
            $nama = $file->getClientOriginalName();
            $filename = pathinfo($nama, PATHINFO_FILENAME);
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename = $request->get("form_number_edit").'.'.$extension;

            $file->move($tujuan_upload,$filename);

        }else{
            $filename = "";
        }

        $asset_missing = FixedAssetMissing::where('form_number', '=', $request->get("form_number_edit"))->first();

        if ($asset_missing->status == 'hold') {
            $stat = $asset_missing->last_status;
        } else if ($asset_missing->status == 'reject') {
            $stat = 'created';
        } else {
            $stat = $asset_missing->status;
        }

        $asset_upd = FixedAssetMissing::where('form_number', '=', $request->get('form_number_edit'))
        ->update([
            'new_picture' => $filename,
            'reason' => $request->get('disposal_reason_edit'),
            'missing_reason' => $request->get('missing_reason_edit'),
            'improvement_plan' => $request->get('improvement_plan_edit'),
            'status' => $stat,
        ]);

        // ---------------- REPORT PDF ---------------

        $missing = FixedAssetMissing::where('form_number', '=', $request->get('form_number_edit'))
        ->select('fixed_asset_missings.form_number', 'fixed_asset_missings.fixed_asset_id', 'fixed_asset_missings.fixed_asset_name', 'fixed_asset_missings.clasification', 'fixed_asset_missings.section_control', 'fixed_asset_missings.reason', 'fixed_asset_missings.new_picture', db::raw('DATE_FORMAT(fixed_asset_missings.request_date, "%d %b %Y") as req_date'), 'missing_reason', 'improvement_plan', db::raw("FORMAT(fixed_asset_missings.acquisition_cost,2) AS acquisition_cost"), db::raw("FORMAT(fixed_asset_missings.book_value,2) AS book_value"), db::raw('DATE_FORMAT(fixed_asset_missings.acquisition_date, "%d %b %Y") as acquisition_date'), 'pic_app', db::raw('DATE_FORMAT(fixed_asset_missings.pic_app_date, "%d %b %Y") as pic_app_date'), 'fa_app', db::raw('DATE_FORMAT(fixed_asset_missings.fa_app_date, "%d %b %Y") as fa_app_date'), 'manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.manager_app_date, "%d %b %Y") as manager_app_date'), 'gm_app', db::raw('DATE_FORMAT(fixed_asset_missings.gm_app_date, "%d %b %Y") as gm_app_date'), 'acc_manager_app', db::raw('DATE_FORMAT(fixed_asset_missings.acc_manager_app_date, "%d %b %Y") as acc_manager_app_date'), 'director_app', db::raw('DATE_FORMAT(fixed_asset_missings.director_app_date, "%d %b %Y") as director_app_date'), 'presdir_app', db::raw('DATE_FORMAT(fixed_asset_missings.presdir_app_date, "%d %b %Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_missings.created_at, "%d %b %Y") as create_at'))
        ->first();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('fixed_asset.report_file.missing_report', array(
            'datas' => $missing
        ));

        $pdf->save(public_path() . "/files/fixed_asset/report_missing/Missing_".$id.".pdf");


        $response = array(
            'status' => true
        );
        return Response::json($response);
    } catch (Exception $e) {
     $response = array(
        'status' => false,
        'message' => $e->getMessage()
    );
     return Response::json($response);
 }   
}

public function indexAssetAudit($sec, $loc, $period) {
    $title = "Form Audit Fixed Asset";
    $title_jp = "固定資産監査・監視";

    $location = FixedAssetAudit::distinct()->select('location', 'asset_section')->get();
    $section = FixedAssetPic::select('section')->get();

    return view('fixed_asset.form.audit_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'location' => $location,
        'section' => $section,
    ));
}

public function indexAssetCheck($cek_num, $section, $location, $period) {
    $title = "Form Check Fixed Asset";
    $title_jp = "??";

    $loc = FixedAssetAudit::distinct()->select('location', 'asset_section')->where('period','=',$period)->get();
    $section = FixedAssetPic::select('section')->get();

    return view('fixed_asset.form.audit_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'location' => $loc,
        'section' => $section,
    ));
}

public function indexTransferCIP()
{
    $title = "Fixed Asset List";
    $title_jp = "??";

    return view('fixed_asset.form.asset_list', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'page' => 'Asset Transfer CIP'
    ));
}

public function indexTransferCIPForm($form_number)
{
    $title = "Fixed Asset Transfer CIP";
    $title_jp = "??";

    $asset = FixedAssetCip::leftjoin('fixed_asset_items', 'fixed_asset_cips.sap_number', '=', 'fixed_asset_items.sap_number')
    ->leftjoin('employee_syncs', 'fixed_asset_cips.pic', '=', 'employee_syncs.employee_id')
    ->where('fixed_asset_cips.form_number', '=', $form_number)
    ->where('fixed_asset_cips.usage_term', '=', 'soon')
    ->select('fixed_asset_cips.sap_number', 'fixed_asset_cips.fixed_asset_name', 'fixed_asset_cips.acquisition_date', 'fixed_asset_cips.amount_usd', 'fixed_asset_cips.plan_use', 'fixed_asset_cips.clasification_category', 'fixed_asset_cips.clasification', 'fixed_asset_cips.usefull_life', 'fixed_asset_cips.pic', 'name', 'fixed_asset_items.vendor', 'fixed_asset_items.section', 'fixed_asset_items.location', 'fixed_asset_items.picture', 'fixed_asset_items.invoice_number', 'fixed_asset_items.invoice_name', 'fixed_asset_items.investment', 'fixed_asset_items.budget_number', 'fixed_asset_items.amount_usd', 'fixed_asset_items.category_code', 'fixed_asset_items.category', 'fixed_asset_items.depreciation_key')
    ->get();

    $clasification = FixedAssetClasification::select('id', 'category', 'category_code', 'clasification_name', 'life_time')->get();
    $exchange_rate = AccExchangeRate::select('currency', 'rate', 'periode')->orderBy('id', 'desc')->limit(3)->get();

    return view('fixed_asset.form.transfer_cip_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'page' => 'Asset Transfer CIP',
        'assets' => $asset,
        'clasification' => $clasification,
        'exchange_rate' => $exchange_rate
    ));
}

public function indexTransferCIPUserForm()
{
    $title = "Fixed Asset Transfer CIP";
    $title_jp = "??";

    $asset = FixedAssetItem::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
    ->where('registration_status', '=', 'Done')
    ->whereNull('retired_date');

    if (!in_array(strtoupper(Auth::user()->username), ['PI2002021', 'PI0905001']))  {
        $emp = EmployeeSync::where('employee_id', '=', Auth::user()->username)
        ->leftJoin(db::raw('(SELECT department, section from employee_syncs where end_date is null group by department, section) emp'), 'emp.department', '=', 'employee_syncs.department')
        ->select('emp.section')
        ->get();

        $asset = $asset->whereIn('fixed_asset_items.section', $emp);
    }

    $asset = $asset->where('usage_term', '=', 'not use yet')
    ->select('sap_number', 'fixed_asset_name', 'classification_category', 'vendor', 'currency', 'original_amount', 'amount_usd', 'fixed_asset_items.section', 'name', 'location', 'request_date', 'pic', db::raw('employee_syncs.name as name_pic'), 'employee_syncs.department', 'picture', 'remark', 'retired_date', 'new_number', 'usage_estimation')
    ->get();

    $clasification = FixedAssetClasification::select('id', 'category', 'category_code', 'clasification_name', 'life_time')->get();

    return view('fixed_asset.form.transfer_cip_user_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'page' => 'Asset Transfer CIP',
        'assets' => $asset,
        'clasification' => $clasification
    ));
}

public function indexTransferCIPUserForm2()
{
    $title = "Fixed Asset Transfer CIP";
    $title_jp = "??";

    $asset = FixedAssetItem::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
    ->where('registration_status', '=', 'Done')
    ->whereNull('retired_date');

    if (!in_array(strtoupper(Auth::user()->username), ['PI2002021', 'PI0905001']))  {
        $emp = EmployeeSync::where('employee_id', '=', Auth::user()->username)
        ->leftJoin(db::raw('(SELECT department, section from employee_syncs where end_date is null group by department, section) emp'), 'emp.department', '=', 'employee_syncs.department')
        ->select('emp.section')
        ->get();

        $asset = $asset->whereIn('fixed_asset_items.section', $emp);
    }

    $asset = $asset->where('usage_term', '=', 'not use yet')
    ->select('sap_number', 'fixed_asset_name', 'classification_category', 'vendor', 'currency', 'original_amount', 'amount_usd', 'fixed_asset_items.section', 'name', 'location', 'request_date', 'pic', db::raw('employee_syncs.name as name_pic'), 'employee_syncs.department', 'picture', 'remark', 'retired_date', 'new_number', 'usage_estimation')
    ->get();

    $clasification = FixedAssetClasification::select('id', 'category', 'category_code', 'clasification_name', 'life_time')->get();

    return view('fixed_asset.form.transfer_cip_user_form', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'page' => 'Asset Transfer CIP',
        'assets' => $asset,
        'clasification' => $clasification
    ));
}

public function postFixedAssetCIP(Request $request)
{
    try {
        // --- MANAGER ----
        $mngr = Mails::leftJoin('users', 'users.email', '=', 'send_emails.email')
        ->where('remark', '=', $request->get('details')[0]['dept'])
        ->select('username', 'name')
        ->first();

        // --- ACC MANAGER ----
        $acc_mngr = EmployeeSync::whereNull('end_date')
        ->where('department', '=', 'Accounting Department')
        ->where('position', '=', 'Manager')
        ->select('employee_id', 'name')
        ->first();

        // --- MANAGER ----
        $fa = EmployeeSync::whereNull('end_date')
        ->where('employee_id', '=', 'PI0905001')
        ->select('employee_id', 'name')
        ->first();

        // $tahun = date('y');
        // $bulan = date('m');

        // $query = "SELECT form_number FROM `fixed_asset_cips` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by id DESC LIMIT 1";
        // $nomorurut = DB::select($query);

        // if ($nomorurut != null) {
        //     $nomor = substr($nomorurut[0]->form_number, -3);
        //     $nomor = $nomor + 1;
        //     $nomor = sprintf('%03d', $nomor);
        // } else {
        //     $nomor = "001";
        // }

        // $result['tahun'] = $tahun;
        // $result['bulan'] = $bulan;
        // $result['no_urut'] = $nomor;

        // $form_number = 'FAC' . $result['tahun'] . $result['bulan'] . $result['no_urut'];

        foreach ($request->get('details') as $asset) {
            $cip = new FixedAssetCip;

            $cip->form_number = $request->get('form_number');
            $cip->sap_number = $asset['sap_number'];
            $cip->fixed_asset_name = $asset['asset_name'];
            $cip->acquisition_date = $asset['acq_date'];
            $cip->amount_usd = $asset['amount_usd'];
            $cip->plan_use = $asset['plan_use'];
            $cip->usage_term = $asset['usage_term'];
            $cip->usage_estimation = $asset['usage_est'];
            $cip->pic = $asset['pic'];
            $cip->department = $asset['dept'];
            $cip->clasification_category = $asset['cls_cat'];
            $cip->clasification = $asset['cls'];
            $cip->usefull_life = $asset['usefull'];
            $cip->status = 'created';
            $cip->manager_appr = strtoupper($mngr->username).'/'.$mngr->name;
            $cip->acc_appr = $acc_mngr->employee_id.'/'.$acc_mngr->name;
            $cip->fa_receive = $fa->employee_id.'/'.$fa->name;
            $cip->created_by = strtoupper(Auth::user()->username);

            $cip->save();

        }

        $datas = FixedAssetCip::leftJoin('employee_syncs', 'fixed_asset_cips.created_by', '=', 'employee_syncs.employee_id')
        ->leftJoin('fixed_asset_items', 'fixed_asset_cips.sap_number', '=', 'fixed_asset_items.sap_number')
        ->where('form_number', '=', $request->get('form_number'))
        ->select('form_number', 'fixed_asset_cips.sap_number', 'fixed_asset_cips.fixed_asset_name', 'fixed_asset_cips.acquisition_date', 'fixed_asset_cips.amount_usd', db::raw('fixed_asset_items.usage_term as usage_term_old'), db::raw('fixed_asset_items.usage_estimation as usage_estimation_old'), 'fixed_asset_cips.usage_term', 'fixed_asset_items.location', 'fixed_asset_cips.status', 'fixed_asset_cips.usage_estimation', 'employee_syncs.name','manager_appr', 'manager_appr_at', 'acc_appr', 'acc_appr_at','fa_receive', 'fa_receive_at')
        ->get();

        $mail = User::where('username', '=', explode('/', $datas[0]->manager_appr)[0])
        ->select('email')
        ->first();

        $data = [
            'data' => $datas,
            'position' => 'manager'
        ];

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_cip_approval'));

        $response = array(
            'status' => true            
        );
        return Response::json($response);
    } catch (Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage(),
        );
        return Response::json($response);
    }
}

public function fetchFixedAssetList(Request $request)
{
    $asset = FixedAssetItem::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
    ->where('registration_status', '=', 'Done')
    ->whereNull('retired_date');

    if (!in_array(strtoupper(Auth::user()->username), ['PI2002021', 'PI0905001']))  {
        $emp = EmployeeSync::where('employee_id', '=', Auth::user()->username)
        ->leftJoin(db::raw('(SELECT department, section from employee_syncs where end_date is null group by department, section) emp'), 'emp.department', '=', 'employee_syncs.department')
        ->select('emp.section')
        ->get();

        $asset = $asset->whereIn('fixed_asset_items.section', $emp);
    }

    if (strlen($request->get('category')) > 0 ) {
        if ($request->get('category') == 'CIP') {
            $asset = $asset->where('usage_term', '=', 'not use yet');
        }
    }

    if (strlen($request->get('asset_id')) > 0 ) {
        $asset = $asset->where('sap_number', '=', $request->get('asset_id'));
    }

    $asset = $asset->select('sap_number', 'fixed_asset_name', 'classification_category', 'vendor', 'currency', 'original_amount', 'amount_usd', 'fixed_asset_items.section', 'name', 'location', 'request_date', 'picture', 'remark', 'retired_date', 'new_number', 'investment')
    ->get();

    $response = array(
        'status' => true,
        'assets' => $asset,
    );
    return Response::json($response);
}

public function fetchFixedAssetCIPList(Request $request)
{
    $dpt = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();

    $datas = FixedAssetCip::leftJoin('employee_syncs', 'fixed_asset_cips.created_by', '=', 'employee_syncs.employee_id')
    ->select('form_number', db::raw("GROUP_CONCAT(fixed_asset_name SEPARATOR ', ') as asset"), 'status', 'employee_syncs.name', 'fixed_asset_cips.created_at', 'fa_receive_at')
    ->where('fixed_asset_cips.department', '=', $dpt->department)
    ->groupBy('form_number', 'status', 'name', 'fixed_asset_cips.created_at', 'fa_receive_at')
    ->get();

    $reminder_list = db::select("SELECT mstr.section, mstr.jml_asset as tot, IFNULL(cip.jml_asset,0) as remind, remind_date, form from
        (select section, count(sap_number) as jml_asset from fixed_asset_items where usage_term = 'not use yet' and retired_date is null and sap_number is not null 
            and registration_status = 'Done' and request_date < '".$request->get('period')."-01'
            group by section) mstr left join


            (SELECT section, count(id) as jml_asset, GROUP_CONCAT(created_at) as remind_date, GROUP_CONCAT(form_number) as form from fixed_asset_cip_logs 
            where period = '".$request->get('period')."-01'
            group by section) cip on mstr.section = cip.section");


        $response = array(
            'status' => true,
            'cips' => $datas,
            'reminder_lists' => $reminder_list,
        );
        return Response::json($response);
    }

    public function MailFixedAssetCIP(Request $request)
    {
        $datas = FixedAssetCip::leftJoin('employee_syncs', 'fixed_asset_cips.created_by', '=', 'employee_syncs.employee_id')
        ->leftJoin('fixed_asset_items', 'fixed_asset_cips.sap_number', '=', 'fixed_asset_items.sap_number')
        ->where('form_number', '=', $request->get('form_number'))
        ->select('form_number', 'fixed_asset_cips.sap_number', 'fixed_asset_cips.fixed_asset_name', 'fixed_asset_cips.acquisition_date', 'fixed_asset_cips.amount_usd', db::raw('fixed_asset_items.usage_term as usage_term_old'), db::raw('fixed_asset_items.usage_estimation as usage_estimation_old'), 'fixed_asset_cips.usage_term', 'fixed_asset_items.location', 'fixed_asset_cips.status', 'fixed_asset_cips.usage_estimation', 'employee_syncs.name','manager_appr', 'manager_appr_at', 'acc_appr', 'acc_appr_at','fa_receive', 'fa_receive_at')
        ->get();

        $mail = User::where('username', '=', explode('/', $datas[0]->manager_appr)[0])
        ->select('email')
        ->first();

        $data = [
            'data' => $datas,
            'position' => 'manager'
        ];

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_cip_approval'));
    }

    public function ResendReminderCIP(Request $request)
    {
        try {

            $email = [];

            $cek_data = db::select("SELECT fa.*, applicant_id, applicant_name, users.email from
                (SELECT sap_number, fixed_asset_name, classification_category, amount_usd, section, pic, location, usage_estimation, request_date, investment FROM `fixed_asset_items` where usage_term = 'not use yet' and registration_status = 'Done' and retired_date is null and request_date < '".$request->get('period').'-01'."' and section = '".$request->get('section')."') fa
                    left join acc_investments on fa.investment = acc_investments.reff_number
                    left join users on acc_investments.applicant_id = users.username");

                foreach ($cek_data as $ds) {
                    if (!in_array($ds->email, $email) && $ds->email) {
                        array_push($email, $ds->email);
                    }
                }

                if (count($email) > 0) {
                    foreach ($email as $eml) {
                        $form_number = db::select("SELECT form_number from fixed_asset_cip_logs where period = '".$request->get('period').'-01'."' and section = '".$request->get('section')."'");

                        $datas_ml = db::select("SELECT fa.*, applicant_id, applicant_name, users.email, employee_syncs.name from
                            (SELECT sap_number, fixed_asset_name, classification_category, amount_usd, section, pic, location, usage_term, usage_estimation, request_date, investment FROM `fixed_asset_items` where usage_term = 'not use yet' and registration_status = 'Done' and retired_date is null and request_date < '".$request->get('period').'-01'."' and section = '".$request->get('section')."') fa
                                left join acc_investments on fa.investment = acc_investments.reff_number
                                left join users on acc_investments.applicant_id = users.username
                                left join employee_syncs on fa.pic = employee_syncs.employee_id
                                where users.email = '".$eml."'
                                order by request_date asc");

                            $data = [
                                'datas' => $datas_ml,
                                'form_number' => $form_number[0]->form_number
                            ];

                            Mail::to($eml)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_cip_reminder'));
                        }
                    }

                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } catch (Exception $e) {
                    $response = array(
                        'status' => false,
                        'message' => $e->getMessage(),
                    );
                    return Response::json($response);
                }   
            }

            public function approvalFixedAssetCIP($form_number, $status, $position)
            {
                $title = 'Approval Confirmation Form CIP Fixed Asset';
                $title_jp = '??';
                $stts = true;

                $asset = FixedAssetCip::where('form_number', '=', $form_number)
                ->select('form_number','manager_appr_at', 'acc_appr_at', 'fa_receive_at', 'department')
                ->first();

                if ($status == 'Approved') {
                    if ($position == 'manager') {
                        if ($asset->manager_appr_at) {
                            $message = 'Failed';
                            $message2 = 'Already Approve';
                        } else {
                            FixedAssetCip::where('form_number', $form_number)
                            ->update([
                                'manager_appr_at' => date('Y-m-d H:i:s'),
                                'status' => 'approval_manager'
                            ]);
                            $message = 'Approved';
                            $message2 = 'Successfully Approved';

                            $datas = FixedAssetCip::leftJoin('employee_syncs', 'fixed_asset_cips.created_by', '=', 'employee_syncs.employee_id')
                            ->leftJoin('fixed_asset_items', 'fixed_asset_cips.sap_number', '=', 'fixed_asset_items.sap_number')
                            ->where('form_number', '=', $form_number)
                            ->select('form_number', 'fixed_asset_cips.sap_number', 'fixed_asset_cips.fixed_asset_name', 'fixed_asset_cips.acquisition_date', 'fixed_asset_cips.amount_usd', db::raw('fixed_asset_items.usage_term as usage_term_old'), db::raw('fixed_asset_items.usage_estimation as usage_estimation_old'), 'fixed_asset_cips.usage_term', 'fixed_asset_items.location', 'fixed_asset_cips.status', 'fixed_asset_cips.usage_estimation', 'employee_syncs.name','manager_appr', 'manager_appr_at', 'acc_appr', 'acc_appr_at','fa_receive', 'fa_receive_at')
                            ->get();

                            $mail = User::where('username', '=', explode('/', $datas[0]->acc_appr)[0])
                            ->select('email')
                            ->first();

                            $data = [
                                'data' => $datas,
                                'position' => 'acc_manager'
                            ];

                            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_cip_approval'));
                        }
                    } else if ($position == 'acc_manager') {
                        if ($asset->acc_appr_at) {
                            $message = 'Failed';
                            $message2 = 'Already Approve';
                        } else {
                            FixedAssetCip::where('form_number', $form_number)
                            ->update([
                                'acc_appr_at' => date('Y-m-d H:i:s'),
                                'status' => 'approval_accounting'
                            ]);
                            $message = 'Approved';
                            $message2 = 'Successfully Approved';

                            $datas = FixedAssetCip::leftJoin('employee_syncs', 'fixed_asset_cips.created_by', '=', 'employee_syncs.employee_id')
                            ->leftJoin('fixed_asset_items', 'fixed_asset_cips.sap_number', '=', 'fixed_asset_items.sap_number')
                            ->where('form_number', '=', $form_number)
                            ->select('form_number', 'fixed_asset_cips.sap_number', 'fixed_asset_cips.fixed_asset_name', 'fixed_asset_cips.acquisition_date', 'fixed_asset_cips.amount_usd', db::raw('fixed_asset_items.usage_term as usage_term_old'), db::raw('fixed_asset_items.usage_estimation as usage_estimation_old'), 'fixed_asset_cips.usage_term', 'fixed_asset_items.location', 'fixed_asset_cips.status', 'fixed_asset_cips.usage_estimation', 'employee_syncs.name','manager_appr', 'manager_appr_at', 'acc_appr', 'acc_appr_at','fa_receive', 'fa_receive_at')
                            ->get();

                            $mail = User::where('username', '=', explode('/', $datas[0]->fa_receive)[0])
                            ->select('email')
                            ->first();

                            $data = [
                                'data' => $datas,
                                'position' => 'fa_control'
                            ];

                            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_cip_approval'));
                        }
                    } else if ($position == 'fa_control') {
                        if ($asset->fa_receive_at) {
                            $message = 'Failed';
                            $message2 = 'Already Approve';
                        } else {
                            FixedAssetCip::where('form_number', $form_number)
                            ->update([
                                'fa_receive_at' => date('Y-m-d H:i:s'),
                                'status' => 'approval_fa_control'
                            ]);
                            $message = 'Approved';
                            $message2 = 'Successfully Approved';

                            $datas = FixedAssetCip::leftJoin('employee_syncs', 'fixed_asset_cips.created_by', '=', 'employee_syncs.employee_id')
                            ->leftJoin('fixed_asset_items', 'fixed_asset_cips.sap_number', '=', 'fixed_asset_items.sap_number')
                            ->where('form_number', '=', $form_number)
                            ->select('form_number', 'fixed_asset_cips.sap_number', 'fixed_asset_cips.fixed_asset_name', 'fixed_asset_cips.acquisition_date', 'fixed_asset_cips.amount_usd', db::raw('fixed_asset_items.usage_term as usage_term_old'), db::raw('fixed_asset_items.usage_estimation as usage_estimation_old'), 'fixed_asset_cips.usage_term', 'fixed_asset_items.location', 'fixed_asset_cips.status', 'fixed_asset_cips.usage_estimation', 'employee_syncs.name','manager_appr', 'manager_appr_at', 'acc_appr', 'acc_appr_at','fa_receive', 'fa_receive_at', 'fixed_asset_cips.created_by', 'fixed_asset_cips.pic')
                            ->get();

                            $mail = User::where('username', '=', $datas[0]->created_by)
                            ->select('email')
                            ->first();

                            $data = [
                                'data' => $datas,
                                'position' => 'user'
                            ];

                            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_cip_approval'));

                            $cip_sp = [];
                            foreach ($datas as $dat) {
                                $diff = date_diff(date_create($dat->acquisition_date), date_create(date('Y-m-d')))->format("%a");

                                if ($diff > 365 && $dat->usage_term == 'not use yet') {
                                    array_push($cip_sp, [
                                        'sap_number' => $dat->sap_number,
                                        'fixed_asset_name' => $dat->fixed_asset_name,
                                        'date_acquisition' => $dat->acquisition_date,
                                        'amount_usd' => $dat->amount_usd,
                                        'plan_use' => $dat->usage_estimation,
                                        'pic' => $dat->created_by
                                    ]);
                                }
                            }

                            if (count($cip_sp) > 0) {
                                $tahun = date('y');
                                $bulan = date('m');

                                $query = "SELECT form_number FROM `fixed_asset_sp_letters` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by id DESC LIMIT 1";
                                $nomorurut = DB::select($query);

                                if ($nomorurut != null) {
                                    $nomor = substr($nomorurut[0]->form_number, -3);
                                    $nomor = $nomor + 1;
                                    $nomor = sprintf('%03d', $nomor);
                                } else {
                                    $nomor = "001";
                                }

                                $result['tahun'] = $tahun;
                                $result['bulan'] = $bulan;
                                $result['no_urut'] = $nomor;

                                $form_number = 'FASL' . $result['tahun'] . $result['bulan'] . $result['no_urut'];

                                $q_manager = db::select("SELECT username, name, send_emails.email from send_emails left join users on users.email = send_emails.email where send_emails.remark = '".$asset->department."'");
                                $manager_app = $q_manager[0]->username.'/'.$q_manager[0]->name;

                                $div_pic = EmployeeSync::where('department', '=', $asset->department)->select('division')->first();

                                if ($div_pic->division == 'Production Division') {
                                    $dgm_app = 'PI0109004/Budhi Apriyanto';
                                } else if ($div_pic->division == 'Production Support Division') {
                                    $dgm_app = 'PI9905001/Mei Rahayu';
                                } else {
                                    $dgm_app = null;
                                }

                                $gm_pic = EmployeeSync::where('division', '=', $div_pic->division)->where('position', 'like', 'General Manager%')
                                ->whereNull('end_date')
                                ->select('employee_id', 'name')
                                ->first();
                                $gm_app = $gm_pic->employee_id.'/'.$gm_pic->name;

                                $acc_manager = EmployeeSync::whereNull('end_date')->where('department', '=', 'Accounting Department')
                                ->where('position', 'like', 'Manager%')
                                ->select('employee_id', 'name')
                                ->first();
                                $acc_manager_app = $acc_manager->employee_id.'/'.$acc_manager->name;

                                $dir = EmployeeSync::whereNull('end_date')->where('position', 'like', 'Director%')
                                ->where('division', '=', 'Finance Division')
                                ->select('employee_id', 'name')
                                ->first();
                                $director_fin_app = $dir->employee_id.'/'.$dir->name;

                                foreach ($cip_sp as $sp) {
                                    $spLetter = new FixedAssetSpLetter([
                                        'form_number' => $form_number,
                                        'fixed_asset_number' => $sp['sap_number'],
                                        'fixed_asset_name' => $sp['fixed_asset_name'],
                                        'acquisition_date' => $sp['date_acquisition'],
                                        'amount' => $sp['amount_usd'],
                                        'plan_use' => $sp['plan_use'],
                                        'period' => date('Y-m-01'),
                                        'pic' => $sp['pic'],
                                        'status' => 'Requested',
                                        'app_manager' => $manager_app,
                                        'app_dgm' => $dgm_app,
                                        'app_gm' => $gm_app,
                                        'app_acc_manager' => $acc_manager_app,
                                        'app_fin_dir' => $director_fin_app,
                                        'created_by' => Auth::user()->username
                                    ]);
                                    $spLetter->save();
                                }

                    // ----------- EMAIL TO USER -----------------

                                $datas = FixedAssetSpLetter::where('form_number', '=', $form_number)
                                ->select('form_number', 'fixed_asset_number', 'fixed_asset_name', 'acquisition_date', 'amount', 'plan_use', 'pic', 'created_at')
                                ->get();

                                $mail = User::where('username', '=', $datas[0]->pic)
                                ->select('email')
                                ->first();

                                $data = [
                                    'period' => $datas[0]->period,
                                    'data' => $datas,
                                    'position' => 'Reminder',
                                    'status' => 'Approved',
                                    'att' => [],
                                ];

                                Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_sp_letter'));
                            }

                        }
                    }
                } else if ($status == 'Hold') {
                    $message = 'Hold & Comment';
                    $message2 = 'Successfully Hold & Comment';
                } else if ($status == 'Reject')  {
                    $message = 'Reject';
                    $message2 = 'Successfully Reject';
                }

                return view('fixed_asset.approval_cip_message', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'message' => $message,
                    'message2' => $message2,
                    'asset' => $asset,
                    'status' => $stts,
                    'status2' => $status,
                    'position' => $position
                ))->with('page', 'Fixed Asset Approval');
            }

            public function postFixedAssetTransferCIP(Request $request)
            {
                try {
                    $ast =  explode(',', $request->get('assets'));
                    foreach ($ast as $cip) {

                        $cip_name = FixedAssetCip::where('form_number', $request->get('form_number'))->where('sap_number', $cip)
                        ->select('fixed_asset_name', 'amount_usd')
                        ->first();

                        $transfer_cip = new FixedAssetCipTransfer([
                            'cip_form_number' => $request->get('form_number'),
                            'cip_sap_number' => $cip,
                            'cip_asset_name' => $cip_name->fixed_asset_name,
                            'new_sap_number' => $request->get('sap_number'),
                            'new_asset_name' => $request->get('item_name'),
                            'invoice_number' => $request->get('invoice_number'),
                            'invoice_name' => $request->get('invoice_name'),
                            'clasification_code' => $request->get('category_code'),
                            'clasification_category' => $request->get('category'),
                            'investment_number' => $request->get('investment_number'),
                            'budget_number' => $request->get('budget'),
                            'vendor' => $request->get('vendor'),
                            'currency' => $request->get('currency'),
                            'cip_amount_usd' => $cip_name->amount_usd,
                            'amount_usd' => $request->get('amount_usd'),
                            'pic' => $request->get('pic_asset'),
                            'location' => $request->get('location'),
                            'category_code' => $request->get('category_code'),
                            'category_name' => $request->get('category'),
                            'registration_date' => $request->get('register_date'),
                            'depreciation_key' => $request->get('depreciation'),
                            'usefull_life' => $request->get('life'),
        // 'sap_file' => $request->get(''),
                            'transfer_date' => date('Y-m-d H:i:s'),
                            'transfer_by' => 'Ismail Husen',
                            'created_by' => Auth::user()->username,
                            'created_name' => Auth::user()->name
                        ]);

                        $transfer_cip->save();
                    }
                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } catch (Exception $e) {
                    $response = array(
                        'status' => false,
                        'message' => $e->getMessage(),
                    );
                    return Response::json($response);
                }


            }

            public function postFixedAssetCIPNormal(Request $request)
            {
                try {

                    $file_destination = 'files/fixed_asset/sap_file';
                    $file_name = null;

                    if($request->file('sap_file') != NULL)
                    {
                        $files = $request->file('sap_file');

                        $file = $files;

                        $nama = $file->getClientOriginalName();

                        $filename = $nama;
                        $extension = pathinfo($nama, PATHINFO_EXTENSION);

                        $filename = 'SAP_FILE_'.date('YmdHis').'.'.$extension;

                        $file->move($file_destination, $filename);

                        $file_name = $filename;
                    } else {
                        $file_name = null;
                    }

                    $assets = json_decode($request->get('assets'));

                    foreach ($assets as $asset) {
                        FixedAssetCipTransfer::where('cip_form_number', '=', $asset->form_number)
                        ->where('cip_sap_number', '=', $asset->cip_number)
                        ->update([
                            'amount_use' => $asset->amount_detail,
                            'sap_file' => $file_name,
                        ]);
                    }

                    $datas = FixedAssetCipTransfer::leftJoin('employee_syncs', 'fixed_asset_cip_transfers.pic', '=', 'employee_syncs.employee_id')
                    ->where('cip_form_number', '=', $request->get('cip_number'))
                    ->select('cip_form_number', 'cip_sap_number', 'cip_asset_name', 'new_sap_number', 'new_asset_name', 'currency', 'amount_use', 'cip_amount_usd', 'amount_usd', 'registration_date', 'sap_file')
                    ->get();

                    $c_trf = FixedAssetCipTransfer::where('cip_form_number', '=', $request->get('cip_number'))
                    ->select('new_sap_number', db::raw('count(new_sap_number) as con'))
                    ->groupBy('new_sap_number')
                    ->get();

                    $datas = [
                        'data' => $datas,
                        'count_fa' => $c_trf,
                        'position' => 'approval'
                    ];

                    Mail::to('romy-agung.kurniawan@music.yamaha.com')->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($datas, 'fixed_asset_cip_transfer'));

                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } catch (Exception $e) {
                    $response = array(
                        'status' => false,
                        'message' => $e->getMessage(),
                    );
                    return Response::json($response);
                }
            }

            public function approvalFixedAssetTransferCIP($form_number, $stat, $position)
            {
                if ($stat == 'Approved') {
                    $msg = 'Approve';
                } else if ($stat == 'Hold') {
                    $msg = 'Hold & Comment';
                } else if ($stat == 'Reject') {
                    $msg = 'Reject & Comment';
                }

                return view('fixed_asset.approval_cip_transfer_message', array(
                    'title' => 'Approval Transfer CIP Asset',
                    'message' => $msg,
                    'status' => $stat,
                    'form_number' => $form_number
                ))->with('page', 'Fixed Asset')->with('head', 'Fixed Asset');
            }

            public function uploadJurnalFixedAssetCIP(Request $request)
            {
                try {
                    $file_destination = 'files/fixed_asset/sap_file';
                    $file_name = null;

                    if($request->file('sap_file') != NULL)
                    {
                        $files = $request->file('sap_file');

                        $file = $files;

                        $nama = $file->getClientOriginalName();

                        $filename = $nama;
                        $extension = pathinfo($nama, PATHINFO_EXTENSION);

                        $filename = 'SAP_FILE_'.date('YmdHis').'.'.$extension;

                        $file->move($file_destination, $filename);

                        $file_name = $filename;
                    } else {
                        $file_name = null;
                    }

                    FixedAssetCipTransfer::where('cip_form_number', '=', $request->get('id_form'))
                    ->update([
                        'status' => 'Approved',
                        'sap_file' => $file_name,
                    ]);

                    $fa_cip = FixedAssetCipTransfer::where('cip_form_number', '=', $request->get('id_form'))
                    ->get();

                    foreach ($fa_cip as $fa) {
                        FixedAssetitem::where('sap_number', '=', $fa->cip_sap_number)
                        ->update([
                            'retired_date' => $fa->registration_date
                        ]);

                        $item = FixedAssetitem::where('sap_number', '=', $fa->new_sap_number)->get();
                        if (count($item) < 1) {

                            $sec = EmployeeSync::where('employee_id', '=', $fa->pic)->select('section')->first();

                            $transfer_cip = new FixedAssetitem([
                                'sap_number' => $fa->new_sap_number,
                                'fixed_asset_name' => $fa->new_asset_name,
                                'invoice_number' => $fa->invoice_number,
                                'invoice_name' => $fa->invoice_name,
                                'classification_code' => $fa->clasification_code,
                                'classification_category' => $fa->clasification_category,
                                'vendor' => $fa->vendor,
                                'currency' => $fa->currency,
                                'original_amount' => $fa->amount_usd,
                                'amount_usd' => $fa->amount_usd,
                                'section' => $sec,
                                'pic' => $fa->pic,
                                'location' => $fa->location,
                                'investment' => $fa->investment_number,
                                'budget_number' => $fa->budget_number,
                                'usage_term' => 'soon',
                                'category_code' => $fa->category_code,
                                'category' => $fa->category_name,
                                'depreciation_key' => $fa->depreciation_key,
                                'sap_file' => $fa->sap_file,
                                'usefull_life' => $fa->usefull_life,
                                'request_date' => $fa->registration_date,
                                'picture' => $fa->new_sap_number.'.jpg',
                                'registration_status' => 'Done',
                                'remark' => 'YMPI',
                                'new_number' => $fa->new_sap_number,
                                'created_by' => $fa->pic
                            ]);

                            $transfer_cip->save();
                        }
                    }

                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } catch (Exception $e) {
                    $response = array(
                        'status' => false,
                        'message' => $e->getMessage(),
                    );
                    return Response::json($response);
                }
            }

            public function fetchFixedAssetCIP(Request $request)
            {
                $trf = FixedAssetCipTransfer::where('cip_form_number', '=', $request->get('form_number'))
                ->get();

                $c_trf = FixedAssetCipTransfer::where('cip_form_number', '=', $request->get('form_number'))
                ->select('new_sap_number', db::raw('count(new_sap_number) as con'))
                ->groupBy('new_sap_number')
                ->get();

                $response = array(
                    'status' => true,
                    'transfers' => $trf,
                    'count_cip' => $c_trf
                );
                return Response::json($response);
            }

            public function indexFixedAssetSpLetter()
            {
                $title = "Fixed Asset Special Letter";
                $title_jp = "??";

                return view('fixed_asset.index_special_letter', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'page' => 'Fixed Asset Special Letter',
                ));
            }

            public function indexFixedAssetSpLetterForm($form_number)
            {
                $title = "Fixed Asset Transfer CIP";
                $title_jp = "??";

                $asset = FixedAssetSpLetter::where('form_number', '=', $form_number)->get();

                return view('fixed_asset.form.special_letter', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'page' => 'Fixed Asset Special Letter',
                    'assets' => $asset
                ));
            }

            public function postFixedAssetSpLetterForm(Request $request)
            {
                $fa_num = explode(',', $request->get('fixed_asset_number'));

                foreach ($fa_num as $fa) {
                    FixedAssetSpLetter::where('form_number', '=', $request->get('form_number'))
                    ->where('fixed_asset_number', '=', $fa)
                    ->update([
            // 'subject' => $request->get('subject'),
            // 'subject_jp' => $request->get('subject_jp'),
                        'reason' => $request->get('reason'),
                        'reason_jp' => $request->get('reason_jp'),
                        'status' => 'Created'
                    ]);
                }

    // --------- APPROVAL ----------

                $datas = FixedAssetSpLetter::leftJoin('employee_syncs', 'fixed_asset_sp_letters.pic', 'employee_syncs.employee_id')
                ->where('form_number', '=', $request->get('form_number'))
                ->whereNotNull('reason')
    // ->where('fixed_asset_number', '=', $fa_num[0])
                ->select('form_number', 'period', 'fixed_asset_number', 'fixed_asset_name', 'acquisition_date', 'amount', 'plan_use', 'pic', 'fixed_asset_sp_letters.created_at', 'employee_syncs.name', 'subject', 'subject_jp','reason', 'reason_jp', 'app_manager', 'app_manager_at', 'app_dgm', 'app_dgm_at', 'app_gm', 'app_gm_at', 'app_acc_manager', 'app_acc_manager_at', 'app_fin_dir', 'app_fin_dir_at')
                ->get();

                $mail = User::where('username', '=', explode('/', $datas[0]->app_manager)[0] )
                ->select('email')
                ->first();

                $data = [
                    'period' => $datas[0]->period,
                    'data' => $datas,
                    'position' => 'Approval',
                    'status' => 'Approved',
                    'att' => []
                ];

                Mail::to($mail->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_sp_letter'));
            }

            public function approvalFixedAssetSpLetterForm($status, $position, $form_number)
            {
                $title = 'Fixed Asset Special Letter';
                $title_jp = '';
                $message = 'Approval Fixed Asset Special Letter';

                $fa_sp = FixedAssetSpLetter::where('form_number', $form_number)->whereNotNull('reason')->get();

                if ($position == 'Approval') {
                    $nama = $fa_sp[0]->app_manager.'/'.date('Y-m-d H:i:s');
                } else if ($position == 'dgm') {
                    $nama = $fa_sp[0]->app_dgm.'/'.date('Y-m-d H:i:s');
                } else if ($position == 'gm') {
                    $nama = $fa_sp[0]->app_gm.'/'.date('Y-m-d H:i:s');
                } else if ($position == 'acc_manager') {
                    $nama = $fa_sp[0]->app_acc_manager.'/'.date('Y-m-d H:i:s');
                } else if ($position == 'fin_director') {
                    $nama = $fa_sp[0]->app_fin_dir.'/'.date('Y-m-d H:i:s');
                }


                if ($status == 'Approved') {
                    $msg = 'Approve';
                } else if ($status == 'Hold') {
                    $msg = 'Hold & Comment';
                } else if ($status == 'Reject') {
                    $msg = 'Reject & Comment';
                }


                if ($position == 'Approval') {
                    if ($fa_sp[0]->app_manager_at) {
                        return view('fixed_asset.approval_message', array(
                            'title' => $title,
                            'title_jp' => $title_jp,
                            'message' => $message,
                            'message2' => 'Already Approved',
                            'status' => true,
                            'status2' => 'not allow',
                            'nama' => $nama,
                            'asset' => $fa_sp[0]
                        ))->with('page', 'Fixed Asset Special Letter');
                    }

                    FixedAssetSpLetter::where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->update([
                        'app_manager_at' => date('Y-m-d H:i:s'),
                        'status' => 'Approval'
                    ]);

         // --------- APPROVAL ----------

                    $datas = FixedAssetSpLetter::leftJoin('employee_syncs', 'fixed_asset_sp_letters.pic', 'employee_syncs.employee_id')
                    ->where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->select('form_number', 'period', 'fixed_asset_number', 'fixed_asset_name', 'acquisition_date', 'amount', 'plan_use', 'pic', 'fixed_asset_sp_letters.created_at', 'employee_syncs.name', 'subject', 'subject_jp','reason', 'reason_jp', 'app_manager', 'app_manager_at', 'app_dgm', 'app_dgm_at', 'app_gm', 'app_gm_at', 'app_acc_manager', 'app_acc_manager_at', 'app_fin_dir', 'app_fin_dir_at')
                    ->get();

                    $mail = User::where('username', '=', explode('/', $datas[0]->app_dgm)[0] )
                    ->select('email')
                    ->first();

                    $data = [
                        'period' => $datas[0]->period,
                        'data' => $datas,
                        'position' => 'dgm',
                        'status' => 'Approved',
                        'att' => []
                    ];

                    Mail::to($mail->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_sp_letter'));

                    return view('fixed_asset.approval_message', array(
                        'title' => $title,
                        'title_jp' => $title_jp,
                        'message' => $message,
                        'message2' => 'Fixed Asset Special Letter Successfully Approved',
                        'status' => true,
                        'status2' => 'approve',
                        'nama' => $nama,
                        'asset' => $fa_sp[0]
                    ))->with('page', 'Fixed Asset Special Letter');
                }  else if ($position == 'dgm') {
                    if ($fa_sp[0]->app_dgm_at) {
                        return view('fixed_asset.approval_message', array(
                            'title' => $title,
                            'title_jp' => $title_jp,
                            'message' => $message,
                            'message2' => 'Already Approved',
                            'status' => true,
                            'status2' => 'not allow',
                            'nama' => $nama,
                            'asset' => $fa_sp[0]
                        ))->with('page', 'Fixed Asset Special Letter');
                    }

                    FixedAssetSpLetter::where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->update([
                        'app_dgm_at' => date('Y-m-d H:i:s'),
                    ]);

         // --------- APPROVAL ----------

                    $datas = FixedAssetSpLetter::leftJoin('employee_syncs', 'fixed_asset_sp_letters.pic', 'employee_syncs.employee_id')
                    ->where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->select('form_number', 'period', 'fixed_asset_number', 'fixed_asset_name', 'acquisition_date', 'amount', 'plan_use', 'pic', 'fixed_asset_sp_letters.created_at', 'employee_syncs.name', 'subject', 'subject_jp','reason', 'reason_jp', 'app_manager', 'app_manager_at', 'app_dgm', 'app_dgm_at', 'app_gm', 'app_gm_at', 'app_acc_manager', 'app_acc_manager_at', 'app_fin_dir', 'app_fin_dir_at')
                    ->get();

                    $mail = User::where('username', '=', explode('/', $datas[0]->app_gm)[0] )
                    ->select('email')
                    ->first();

                    $data = [
                        'period' => $datas[0]->period,
                        'data' => $datas,
                        'position' => 'gm',
                        'status' => 'Approved',
                        'att' => []
                    ];

                    Mail::to($mail->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_sp_letter'));

                    return view('fixed_asset.approval_message', array(
                        'title' => $title,
                        'title_jp' => $title_jp,
                        'message' => $message,
                        'message2' => 'Fixed Asset Special Letter Successfully Approved',
                        'status' => true,
                        'status2' => 'approve',
                        'nama' => $nama,
                        'asset' => $fa_sp[0]
                    ))->with('page', 'Fixed Asset Special Letter');
                } else if ($position == 'gm') {
                    if ($fa_sp[0]->app_gm_at) {
                        return view('fixed_asset.approval_message', array(
                            'title' => $title,
                            'title_jp' => $title_jp,
                            'message' => $message,
                            'message2' => 'Already Approved',
                            'status' => true,
                            'status2' => 'not allow',
                            'nama' => $nama,
                            'asset' => $fa_sp[0]
                        ))->with('page', 'Fixed Asset Special Letter');
                    }

                    FixedAssetSpLetter::where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->update([
                        'app_gm_at' => date('Y-m-d H:i:s'),
                    ]);

         // --------- APPROVAL ----------

                    $datas = FixedAssetSpLetter::leftJoin('employee_syncs', 'fixed_asset_sp_letters.pic', 'employee_syncs.employee_id')
                    ->where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->select('form_number', 'period', 'fixed_asset_number', 'fixed_asset_name', 'acquisition_date', 'amount', 'plan_use', 'pic', 'fixed_asset_sp_letters.created_at', 'employee_syncs.name', 'subject', 'subject_jp','reason', 'reason_jp', 'app_manager', 'app_manager_at', 'app_dgm', 'app_dgm_at', 'app_gm', 'app_gm_at', 'app_acc_manager', 'app_acc_manager_at', 'app_fin_dir', 'app_fin_dir_at')
                    ->get();

                    $mail = User::where('username', '=', explode('/', $datas[0]->app_acc_manager)[0] )
                    ->select('email')
                    ->first();

                    $data = [
                        'period' => $datas[0]->period,
                        'data' => $datas,
                        'position' => 'acc_manager',
                        'status' => 'Approved',
                        'att' => []
                    ];

                    Mail::to($mail->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_sp_letter'));

                    return view('fixed_asset.approval_message', array(
                        'title' => $title,
                        'title_jp' => $title_jp,
                        'message' => $message,
                        'message2' => 'Fixed Asset Special Letter Successfully Approved',
                        'status' => true,
                        'status2' => 'approve',
                        'nama' => $nama,
                        'asset' => $fa_sp[0]
                    ))->with('page', 'Fixed Asset Special Letter');
                }  else if ($position == 'acc_manager') {
                    if ($fa_sp[0]->app_acc_manager_at) {
                        return view('fixed_asset.approval_message', array(
                            'title' => $title,
                            'title_jp' => $title_jp,
                            'message' => $message,
                            'message2' => 'Already Approved',
                            'status' => true,
                            'status2' => 'not allow',
                            'nama' => $nama,
                            'asset' => $fa_sp[0]
                        ))->with('page', 'Fixed Asset Special Letter');
                    }

                    FixedAssetSpLetter::where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->update([
                        'app_acc_manager_at' => date('Y-m-d H:i:s'),
                    ]);

         // --------- APPROVAL ----------

                    $datas = FixedAssetSpLetter::leftJoin('employee_syncs', 'fixed_asset_sp_letters.pic', 'employee_syncs.employee_id')
                    ->where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->select('form_number', 'period', 'fixed_asset_number', 'fixed_asset_name', 'acquisition_date', 'amount', 'plan_use', 'pic', 'fixed_asset_sp_letters.created_at', 'employee_syncs.name', 'subject', 'subject_jp','reason', 'reason_jp', 'app_manager', 'app_manager_at', 'app_dgm', 'app_dgm_at', 'app_gm', 'app_gm_at', 'app_acc_manager', 'app_acc_manager_at', 'app_fin_dir', 'app_fin_dir_at')
                    ->get();

                    $mail = User::where('username', '=', explode('/', $datas[0]->app_fin_dir)[0] )
                    ->select('email')
                    ->first();

                    $data = [
                        'period' => $datas[0]->period,
                        'data' => $datas,
                        'position' => 'fin_director',
                        'status' => 'Approved',
                        'att' => []
                    ];

                    Mail::to($mail->email)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_sp_letter'));

                    return view('fixed_asset.approval_message', array(
                        'title' => $title,
                        'title_jp' => $title_jp,
                        'message' => $message,
                        'message2' => 'Fixed Asset Special Letter Successfully Approved',
                        'status' => true,
                        'status2' => 'approve',
                        'nama' => $nama,
                        'asset' => $fa_sp[0]
                    ))->with('page', 'Fixed Asset Special Letter');
                }  else if ($position == 'fin_director') {
                    if ($fa_sp[0]->app_fin_dir_at) {
                        return view('fixed_asset.approval_message', array(
                            'title' => $title,
                            'title_jp' => $title_jp,
                            'message' => $message,
                            'message2' => 'Already Approved',
                            'status' => true,
                            'status2' => 'not allow',
                            'nama' => $nama,
                            'asset' => $fa_sp[0]
                        ))->with('page', 'Fixed Asset Special Letter');
                    }

                    FixedAssetSpLetter::where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->update([
                        'app_fin_dir_at' => date('Y-m-d H:i:s'),
                        'status' => 'Complete'
                    ]);

         // --------- UPDATE DATA ----------

                    $datas = FixedAssetSpLetter::leftJoin('employee_syncs', 'fixed_asset_sp_letters.pic', 'employee_syncs.employee_id')
                    ->where('form_number', '=', $form_number)
                    ->whereNotNull('reason')
                    ->select('form_number', 'period', 'fixed_asset_number', 'fixed_asset_name', 'acquisition_date', 'amount', 'plan_use', 'pic', 'fixed_asset_sp_letters.created_at', 'employee_syncs.name', 'subject', 'subject_jp','reason', 'reason_jp', 'app_manager', 'app_manager_at', 'app_dgm', 'app_dgm_at', 'app_gm', 'app_gm_at', 'app_acc_manager', 'app_acc_manager_at', 'app_fin_dir', 'app_fin_dir_at')
                    ->get();

                    foreach ($datas as $dts) {
                        FixedAssetCip::where('sap_number', '=', $dts->fixed_asset_number)
                        ->where(db::raw('DATE_FORMAT(now(),"%Y-%m-01")'), '=', $dts->period)
                        ->update([
                            'special_letter_status' => 'Created'
                        ]);
                    }

                    return view('fixed_asset.approval_message', array(
                        'title' => $title,
                        'title_jp' => $title_jp,
                        'message' => $message,
                        'message2' => 'Fixed Asset Special Letter Successfully Approved',
                        'status' => true,
                        'status2' => 'approve',
                        'nama' => $nama,
                        'asset' => $fa_sp[0]
                    ))->with('page', 'Fixed Asset Special Letter');
                } 
            }

            public function indexDisposalAssetCip($asset_list)
            {
                $title = 'Fixed Asset - Disposal Application';
                $title_jp = '固定資産の処分申請';

                $assets = explode(',', $asset_list);

                $asset_lists = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
                ->whereIn('fixed_asset_items.sap_number', $assets)
                ->whereNull('retired_date')
                ->select('sap_number', 'fixed_asset_name', 'location', 'fixed_asset_items.section', 'pic', 'name', 'classification_category')
                ->get();

                return view('fixed_asset.form.disposal_form_cip', array(
                    'title' => $title,
                    'title_jp' => $title_jp,
                    'asset_list' => $asset_lists
                ))->with('page', 'Fixed Asset Disposal');
            }

            public function postDisposalAssetCip(Request $request)
            {
                try {
                    $asset_name = explode(',', $request->get('asset_name'));
                    $asset_id = explode(',', $request->get('asset_id'));
                    $asset_no = explode(',', $request->get('asset_no'));
                    $asset_cls = explode(',', $request->get('asset_cls'));
                    $section = explode(',', $request->get('section'));
                    $reason = explode(',', $request->get('reason'));
                    $reason_jp = explode(',', $request->get('reason_jp'));
                    $mode = explode(',', $request->get('mode'));

                    for ($i=0; $i < count($asset_name); $i++) { 
                        $asset_reg = FixedAssetitem::where('sap_number', '=', $asset_id[$i])
                        ->select('pic', 'classification_category')
                        ->first();

                        $file = $request->file('asset_picture_'.$i);
                        $tujuan_upload = 'files/fixed_asset/disposal';

                        if ($file != null || $file != "") {
                            $nama = $file->getClientOriginalName();
                            $extension = pathinfo($nama, PATHINFO_EXTENSION);
                            $filename = $asset_id[$i].'.'.$extension;

                            $file->move($tujuan_upload,$filename);

                        }else{
                            $filename = "";
                        }

    // quotation file

                        $q_file = $request->file('quot_file_'.$i);
                        $tujuan_upload_q = 'files/fixed_asset/disposal_quotation';

                        if ($q_file != null || $q_file != "") {
                            $nama = $q_file->getClientOriginalName();
                            $extension = pathinfo($nama, PATHINFO_EXTENSION);
                            $filename_q = 'Quotation_'.$asset_id[$i].'.'.$extension;

                            $q_file->move($tujuan_upload_q,$filename_q);

                        }else{
                            $filename_q = "";
                        }

    // pic incharge
                        if ($asset_reg->classification_category == 'Building' || $asset_reg->classification_category == 'Construction in Prog' || $asset_reg->classification_category == 'Land' || $asset_reg->classification_category == 'Land right') {
                            $pic_incharge = 'Maintenance Department';

                            $pic_disposal = EmployeeSync::whereNull('end_date')->where('department', '=', $pic_incharge)
                            ->where('position', 'like', 'Chief%')
                            ->select('employee_id', 'name')
                            ->first();
                        } else if ($asset_reg->classification_category == 'Machinery & Equipment' || $asset_reg->classification_category == 'Molding' || $asset_reg->classification_category == 'Tools, Furniture') {
                            $pic_incharge = 'Logistic Department';

                            $pic_disposal = EmployeeSync::whereNull('end_date')->where('department', '=', $pic_incharge)
                            ->where('position', 'like','Foreman%')
                            ->select('employee_id', 'name')
                            ->first();
                        } else if($asset_reg->classification_category == 'Vehicle') {
                            $pic_incharge = 'General Affairs Department';

                            $pic_disposal = EmployeeSync::whereNull('end_date')->where('department', '=', $pic_incharge)
                            ->where('position', 'like', 'Chief%')
                            ->select('employee_id', 'name')
                            ->first();
                        }

    //Approval
                        $emp_pic = EmployeeSync::where('employee_id', '=', $asset_reg->pic)->select('employee_id', 'name', 'position', 'section', 'department', 'division')->first();

    // JIKA Leader
                        if (str_contains($emp_pic->position,'Leader')) {
                            $pic = db::select("SELECT users.username as employee_id, users.name from send_emails LEFT JOIN users on send_emails.email = users.email where remark = '".$emp_pic->section."' AND users.deleted_at is null");

                            $pic_app = $pic[0]->employee_id.'/'.$pic[0]->name;
                        } else {
                            $pic_app = $emp_pic->employee_id.'/'.$emp_pic->name;
                        }

                        $fa_app = 'PI0905001/Ismail Husen';

                        $manager_pic = DB::select('SELECT username, name from send_emails left join users on send_emails.email = users.email where send_emails.remark = "'.$emp_pic->department.'"');
                        $manager_app = $manager_pic[0]->username.'/'.$manager_pic[0]->name;

                        $manager_disp = DB::select('SELECT username, name from send_emails left join users on send_emails.email = users.email where send_emails.remark = "'.$pic_incharge.'"');
                        $manager_disposal_app = $manager_disp[0]->username.'/'.$manager_disp[0]->name;

                        if ($emp_pic->division == 'Production Division') {
                            $dgm = 'PI0109004/Budhi Apriyanto';
                        } else if ($emp_pic->division == 'Production Support Division') {
                            $dgm = 'PI9905001/Mei Rahayu';
                        } else {
                            $dgm = null;
                        }

                        $dgm_app = $dgm;

                        $gm_pic = EmployeeSync::where('division', '=', $emp_pic->division)->where('position', 'like', 'General Manager%')
                        ->whereNull('end_date')
                        ->select('employee_id', 'name')
                        ->first();
                        $gm_app = $gm_pic->employee_id.'/'.$gm_pic->name;

                        $acc_manager = EmployeeSync::whereNull('end_date')->where('department', '=', 'Accounting Department')
                        ->where('position', 'like', 'Manager%')
                        ->select('employee_id', 'name')
                        ->first();
                        $acc_manager_app = $acc_manager->employee_id.'/'.$acc_manager->name;

                        $fin_dir = EmployeeSync::whereNull('end_date')->where('division', 'like', 'Finance Division%')
                        ->where('position', 'like', 'Director')
                        ->select('employee_id', 'name')
                        ->first();
                        $fin_dir_app = $fin_dir->employee_id.'/'.$fin_dir->name;

                        $dir = EmployeeSync::whereNull('end_date')->where('position', 'like', 'President Director%')
                        ->select('employee_id', 'name')
                        ->first();
                        $presdir_app = $dir->employee_id.'/'.$dir->name;

                        $pic_disposal_app = $pic_disposal->employee_id.'/'.$pic_disposal->name;

                        $tahun = date('y');
                        $bulan = date('m');

                        $query = "SELECT form_number FROM `fixed_asset_disposals` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by form_number DESC LIMIT 1";
                        $nomorurut = DB::select($query);

                        if ($nomorurut != null)
                        {
                            $nomor = substr($nomorurut[0]->form_number, -3);
                            $nomor = $nomor + 1;
                            $nomor = sprintf('%03d', $nomor);
                        }
                        else
                        {
                            $nomor = "001";
                        }

                        $result['tahun'] = $tahun;
                        $result['bulan'] = $bulan;
                        $result['no_urut'] = $nomor;

                        $form_number = 'FAD'.$result['tahun'].$result['bulan'].$result['no_urut'];

                        $asset_disposal = new FixedAssetDisposal([
                            'disposal_request_date' => date('Y-m-d'),
                            'form_number' => $form_number,
                            'fixed_asset_id' => $asset_id[$i],
                            'fixed_asset_name' => $asset_name[$i],
                            'clasification_id' => $asset_reg->classification_category,
                            'section_control' => $section[$i],
                            'reason' => $reason[$i],
                            'reason_jp' => $reason_jp[$i],
                            'new_picture' => $filename,
                            'pic_incharge' => $pic_incharge,
                            'mode' => $mode[$i],
                            'quotation_file' => $filename_q,
                            'status' => 'created',
                            'pic_app' => $pic_app,
                            'fa_app' => $fa_app,
                            'manager_app' => $manager_app,
                            'manager_disposal_app' => $manager_disposal_app,
                            'gm_app' => $gm_app,
                            'dgm_app' => $dgm_app,
                            'manager_acc_app' => $acc_manager_app,
                            'director_fin_app' => $fin_dir_app,
                            'presdir_app' => $presdir_app,
                            'new_pic_app' => $pic_disposal_app,
                            'created_by' => Auth::user()->username
                        ]);
                        $asset_disposal->save();

    // ---------------------- REPORT PDF --------------------

                        $disposal = FixedAssetDisposal::where('form_number', '=', $form_number)
                        ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.gm_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.director_fin_app', 'fixed_asset_disposals.presdir_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.gm_app_date, "%d-%m-%Y") as gm_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.director_fin_app_date, "%d-%m-%Y") as director_fin_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.presdir_app_date, "%d-%m-%Y") as presdir_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'), 'fixed_asset_disposals.dgm_app', db::raw('DATE_FORMAT(dgm_app_date, "%d-%m-%Y") as dgm_app_date'))
                        ->first();

                        $pdf = \App::make('dompdf.wrapper');
                        $pdf->getDomPDF()->set_option("enable_php", true);
                        $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
                        $pdf->setPaper('A4', 'potrait');

                        $pdf->loadView('fixed_asset.report_file.disposal_report', array(
                            'datas' => $disposal
                        ));

                        $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$form_number.".pdf");

    // --------------   Email ------------------

                        $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $asset_disposal->id)
                        ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.reason_jp','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'), 'dgm_app', 'reject_status', 'comment')
                        ->first();

                        $data = [
                            'datas' => $data_fixed_asset
                        ];

                        $get_pos = EmployeeSync::where('employee_id', '=', $emp_pic->employee_id)->select('position', 'section')->first();

    // JIKA Leader
                        if (str_contains($get_pos->position,'Leader')) {
                            $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

                            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
                        } else {
                            $mail = db::select("SELECT email from users where username = '".$emp_pic->employee_id."'");

                            Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
                        }
                    }

                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } catch (Exception $e) {
                    $response = array(
                        'status' => false,
                        'message' => $e->getMessage()
                    );
                    return Response::json($response);
                }
            }

            public function fetchAssetbyLocation(Request $request)
            {
                DB::enableQueryLog();

    // status
                $asset = FixedAssetAudit::leftJoin('fixed_asset_items', 'fixed_asset_items.sap_number', '=', 'fixed_asset_audits.sap_number')
                ->leftJoin('fixed_asset_checks', function($join)
                {
                    $join->on('fixed_asset_checks.sap_number', '=', 'fixed_asset_audits.sap_number');
                    $join->on('fixed_asset_checks.period','=', 'fixed_asset_audits.period');
                })
                ->where('fixed_asset_audits.period', '=', $request->get('period'));

                if ($request->get('status') == 'check1') {
                    $asset = $asset->where('fixed_asset_checks.status', '=' , 'Not Checked');
                    $asset = $asset->whereNull('fixed_asset_checks.remark');
                }

                if ($request->get('status') == 'check2') {
                    $asset = $asset->whereRaw('((fixed_asset_checks.status = "Check 1" AND fixed_asset_checks.remark is null) OR (fixed_asset_checks.status = "Not Checked" AND fixed_asset_checks.remark = "temporary save"))');
                }

                if ($request->get('status') == 'audit') {
                    $asset = $asset->whereNull('fixed_asset_audits.remark');
                }

                $asset = $asset->where('fixed_asset_audits.asset_section', '=' ,$request->get('section'));
                $asset = $asset->where('fixed_asset_audits.location' , '=',$request->get('area'));

                $asset = $asset->select('fixed_asset_audits.id', 'fixed_asset_audits.period', 'fixed_asset_audits.category', 'fixed_asset_audits.location', 'fixed_asset_audits.sap_number', 'fixed_asset_audits.asset_name', 'fixed_asset_audits.asset_section', 'fixed_asset_audits.asset_map', 'fixed_asset_audits.asset_images', 'fixed_asset_audits.pic', 'fixed_asset_audits.id', 'fixed_asset_checks.availability', 'fixed_asset_checks.asset_condition', 'fixed_asset_checks.label_condition', 'fixed_asset_checks.usable_condition', 'fixed_asset_checks.map_condition', 'fixed_asset_checks.asset_image_condition', 'fixed_asset_audits.checked_by', 'fixed_asset_audits.status', 'fixed_asset_audits.checked_date', 'fixed_asset_items.request_date', 'fixed_asset_checks.result_images', 'fixed_asset_checks.note', db::raw('fixed_asset_checks.status as check_status'), 'fixed_asset_checks.remark')
                ->get();

                $audit = 0;
                if ($request->get('status') == 'audit') {
                    $audit_q = FixedAssetAudit::whereNotNull('remark')
                    ->where('period', '=', $request->get('period'))
                    ->where('asset_section', '=', $request->get('section'))
                    ->where('location' , '=', $request->get('area'))
                    ->select(db::raw('COUNT(id) as count_audit'))
                    ->first();

                    $audit = $audit_q->count_audit;
                }

                $total_cek = FixedAssetCheck::where('asset_section', '=', $request->get('section'))
                ->where('period', '=', $request->get('period'))
                ->where('location', '=', $request->get('area'))
                ->whereRaw('(remark is null OR remark <> "temporary save 2")')
                ->count();

                $response = array(
                    'status' => true,
                    'asset' => $asset,
                    'audit' => $audit,
                    'total_blm_cek' => $total_cek,
                    'query' => DB::getQueryLog()
                );
                return Response::json($response);
            }

            public function fetchAssetbyId(Request $request)
            {
                $asset = FixedAssetItem::where('sap_number', '=', $request->get('sap_number'))
                ->select('sap_number', 'fixed_asset_name', 'request_date', 'section', 'location', 'id', 'picture')
                ->first();

                $response = array(
                    'status' => true,
                    'asset' => $asset
                );
                return Response::json($response);
            }

            public function inputAssetAudit(Request $request)
            {
                try {
                    if (count($request->file('fileData')) > 0) {
                        $tujuan_upload = 'files/fixed_asset/asset_audit';
                        $file = $request->file('fileData');
                        $filename = $request->get('period').'_'.$request->input('asset_id').'.'.$request->input('extension');
                        $file->move($tujuan_upload,$filename);

                        $audit = FixedAssetAudit::where('sap_number',$request->get('asset_id'))->where('period', $request->get('period'))->first();
                        $audit->availability = $request->get('availability');
                        $audit->asset_condition = $request->get('asset_condition');
                        $audit->label_condition = $request->get('label_condition');
                        $audit->usable_condition = $request->get('usable_condition');
                        $audit->map_condition = $request->get('map_condition');
                        $audit->asset_image_condition = $request->get('image_condition');
                        $audit->note = $request->get('note');
                        $audit->result_images = $filename;
                        $audit->checked_date = date('Y-m-d H:i:s');
                        $audit->status = 'Close';
                        $audit->remark = $request->get('audit_status');
                        $audit->save();

            //Email notifikasi
                        if ($request->get('index') == $request->get('counter')) {
                            FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                            ->where('period', '=', $request->get('period'))
                            ->where('location', '=', $audit->location)
                            ->where('remark', '=', 'temporary save')
                            ->update([
                                'remark' => 'audited',
                                'status' => 'Close'
                            ]);

                            $data_audit = FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                            ->where('period', '=', $request->get('period'))
                            ->where('location', '=', $audit->location)
                            ->get();

                            $summary_data = db::select("select asset_section, 
                                location,
                                COUNT(sap_number) as total_asset,
                                SUM(IF(remark = 'audited', 1, 0)) as audit_asset,
                                SUM(IF(availability = 'Ada', 1, 0)) as ada,
                                SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
                                SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
                                SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
                                SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
                                SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
                                SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
                                from fixed_asset_audits where asset_section = '".$audit->asset_section."' and location = '".$audit->location."' and period = '".$request->get('period')."'
                                group by asset_section, location");

                            $auditor = FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                            ->where('location', '=', $audit->location)
                            ->where('period', '=', $request->get('period'))
                            ->select('checked_by')
                            ->first();

                            $mail_auditor = db::select('SELECT email from users where username ="'.explode('/', $auditor->checked_by)[0].'"');

                            $data = [
                                "position" => 'Audit Report',
                                "datas" => $data_audit,
                                "status" => 'Approve',
                                "data_details" => $summary_data,
                                "period" => $data_audit[0]->period
                            ];

                            Mail::to(['ismail.husen@music.yamaha.com', $mail_auditor[0]->email])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));
                        }

                        $response = array(
                            'status' => true,
                        );
                        return Response::json($response);

                    } else if($request->get('availability') == 'Tidak Ada' || $request->get('availability') == null) {
                        if ($request->get('counter') != 0) {
                         $audit = FixedAssetAudit::where('sap_number',$request->get('asset_id'))->where('period', $request->get('period'))->first();
                         $audit->availability = $request->get('availability');
                         $audit->asset_condition = $request->get('asset_condition');
                         $audit->label_condition = $request->get('label_condition');
                         $audit->usable_condition = $request->get('usable_condition');
                         $audit->map_condition = $request->get('map_condition');
                         $audit->asset_image_condition = $request->get('image_condition');
                         $audit->note = $request->get('note');
                         $audit->checked_date = date('Y-m-d H:i:s');
                         $audit->remark = $request->get('audit_status');
                         $audit->status = 'Close';
                         $audit->save();
                     } else {
                        $audit = FixedAssetAudit::where('asset_section', '=', $request->get('section'))
                        ->where('period', $request->get('period'))
                        ->where('location', '=', $request->get('location'))
                        ->update([
                            'checked_date' => date('Y-m-d H:i:s'),
                            'status' => 'Close'
                        ]);

                        FixedAssetAudit::where('asset_section', '=', $request->get('section'))
                        ->where('period', $request->get('period'))
                        ->where('location', '=', $request->get('location'))
                        ->whereNotNull('remark')
                        ->update([
                            'remark' => 'audited',
                        ]);
                    }


                    //Email notifikasi
                    if ($request->get('index') == $request->get('counter')) {
                        FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                        ->where('period', '=', $request->get('period'))
                        ->where('location', '=', $audit->location)
                        ->where('remark', '=', 'temporary save')
                        ->update([
                            'remark' => 'audited',
                            'status' => 'Close'
                        ]);

                        $data_audit = FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                        ->where('period', '=', $request->get('period'))
                        ->where('location', '=', $audit->location)
                        ->get();


                        $summary_data = db::select("select asset_section, 
                            location,
                            COUNT(sap_number) as total_asset,
                            SUM(IF(remark = 'audited', 1, 0)) as audit_asset,
                            SUM(IF(availability = 'Ada', 1, 0)) as ada,
                            SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
                            SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
                            SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
                            SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
                            SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
                            SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
                            from fixed_asset_audits where asset_section = '".$audit->asset_section."' and location = '".$audit->location."' and period = '".$request->get('period')."'
                            group by asset_section, location");

                        $auditor = FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                        ->where('location', '=', $audit->location)
                        ->where('period', '=', $request->get('period'))
                        ->select('checked_by')
                        ->first();

                        $mail_auditor = db::select('SELECT email from users where username ="'.explode('/', $auditor->checked_by)[0].'"');

                        $data = [
                            "position" => 'Audit Report',
                            "datas" => $data_audit,
                            "status" => 'Approve',
                            "data_details" => $summary_data,
                            "period" => $data_audit[0]->period,
                            'att' => []
                        ];

                        Mail::to(['ismail.husen@music.yamaha.com', $mail_auditor[0]->email])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));
                    }

                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } else if($request->get('availability') == 'Ada' && $request->get('category') == 'audit') {
                    $audit = FixedAssetAudit::where('sap_number',$request->get('asset_id'))->where('period', $request->get('period'))->first();
                    $audit->availability = $request->get('availability');
                    $audit->asset_condition = $request->get('asset_condition');
                    $audit->label_condition = $request->get('label_condition');
                    $audit->usable_condition = $request->get('usable_condition');
                    $audit->map_condition = $request->get('map_condition');
                    $audit->asset_image_condition = $request->get('image_condition');
                    $audit->note = $request->get('note');
                    $audit->checked_date = date('Y-m-d H:i:s');
                    $audit->remark = $request->get('audit_status');
                    $audit->status = 'Close';
                    $audit->save();

            //Email notifikasi
                    if ($request->get('index') == $request->get('counter')) {
                        FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                        ->where('period', '=', $request->get('period'))
                        ->where('location', '=', $audit->location)
                        ->where('remark', '=', 'temporary save')
                        ->update([
                            'remark' => 'audited',
                            'status' => 'Close'
                        ]);


                        $data_audit = FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                        ->where('period', '=', $request->get('period'))
                        ->where('location', '=', $audit->location)
                        ->get();

                        $summary_data = db::select("select asset_section, 
                            location,
                            COUNT(sap_number) as total_asset,
                            SUM(IF(remark = 'audited', 1, 0)) as audit_asset,
                            SUM(IF(availability = 'Ada', 1, 0)) as ada,
                            SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
                            SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
                            SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
                            SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
                            SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
                            SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
                            from fixed_asset_audits where asset_section = '".$audit->asset_section."' and location = '".$audit->location."' and period = '".$request->get('period')."'
                            group by asset_section, location");

                        $auditor = FixedAssetAudit::where('asset_section', '=', $audit->asset_section)
                        ->where('location', '=', $audit->location)
                        ->where('period', '=', $request->get('period'))
                        ->select('checked_by')
                        ->first();

                        $mail_auditor = db::select('SELECT email from users where username ="'.explode('/', $auditor->checked_by)[0].'"');

                        $data = [
                            "position" => 'Audit Report',
                            "datas" => $data_audit,
                            "status" => 'Approve',
                            "data_details" => $summary_data,
                            "period" => $data_audit[0]->period,
                            'att' => []
                        ];

                        Mail::to(['ismail.husen@music.yamaha.com', $mail_auditor[0]->email])->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));
                    }

                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } else{
                    $response = array(
                        'status' => false,
                        'message' => 'Upload Photo on Point '.$request->input('asset_name')
                    );
                    return Response::json($response);
                }
            } catch (Exception $e) {
                $response = array(
                    'status' => false,
                    'message' => $e->getMessage().' on Line '.$e->getLine()
                );
                return Response::json($response);
            }
        }

        public function inputAssetAuditTemp(Request $request)
        {
            try {
                if (count($request->file('fileData')) > 0) {
                    $tujuan_upload = 'files/fixed_asset/asset_audit';
                    $file = $request->file('fileData');
                    $filename = $request->get('period').'_'.$request->input('asset_id').'.'.$request->input('extension');
                    $file->move($tujuan_upload,$filename);

                    $audit = FixedAssetAudit::where('sap_number',$request->get('asset_id'))->where('period', $request->get('period'))->first();
                    $audit->availability = $request->get('availability');
                    $audit->asset_condition = $request->get('asset_condition');
                    $audit->label_condition = $request->get('label_condition');
                    $audit->usable_condition = $request->get('usable_condition');
                    $audit->map_condition = $request->get('map_condition');
                    $audit->asset_image_condition = $request->get('image_condition');
                    $audit->note = $request->get('note');
                    $audit->result_images = $filename;
                    $audit->checked_date = date('Y-m-d H:i:s');
            // $audit->status = 'Close';
                    $audit->remark = 'temporary save';
                    $audit->save();

                    $response = array(
                      'status' => true,
                  );
                    return Response::json($response);

                } else if($request->get('availability') == 'Tidak Ada' || $request->get('availability') == null) {
                    $audit = FixedAssetAudit::where('sap_number',$request->get('asset_id'))->where('period', $request->get('period'))->first();
                    $audit->availability = $request->get('availability');
                    $audit->asset_condition = $request->get('asset_condition');
                    $audit->label_condition = $request->get('label_condition');
                    $audit->usable_condition = $request->get('usable_condition');
                    $audit->map_condition = $request->get('map_condition');
                    $audit->asset_image_condition = $request->get('image_condition');
                    $audit->note = $request->get('note');
                    $audit->checked_date = date('Y-m-d H:i:s');
            // $audit->status = 'Close';
                    $audit->remark = 'temporary save';
                    $audit->save();

                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } else if($request->get('availability') == 'Ada' && $request->get('category') == 'audit') {
                    $audit = FixedAssetAudit::where('sap_number',$request->get('asset_id'))->where('period', $request->get('period'))->first();
                    $audit->availability = $request->get('availability');
                    $audit->asset_condition = $request->get('asset_condition');
                    $audit->label_condition = $request->get('label_condition');
                    $audit->usable_condition = $request->get('usable_condition');
                    $audit->map_condition = $request->get('map_condition');
                    $audit->asset_image_condition = $request->get('image_condition');
                    $audit->note = $request->get('note');
                    $audit->checked_date = date('Y-m-d H:i:s');
        // $audit->status = 'Close';
                    $audit->remark = 'temporary save';
                    $audit->save();

                    $response = array(
                        'status' => true,
                    );
                    return Response::json($response);
                } else{
                    $response = array(
                        'status' => false,
                        'message' => 'Upload Photo on Point '.$request->input('asset_name')
                    );
                    return Response::json($response);
                }
            } catch (\Exception $e) {
                $response = array(
                    'status' => false,
                    'message' => $e->getMessage().' on Line '.$e->getLine()
                );
                return Response::json($response);
            }
        }

        public function indexAssetAuditList()
        {
            $title = "Fixed Asset Audit List";
            $title_jp = "??";

            $section_loc = FixedAssetitem::whereNull('retired_date')->where('usage_term', '!=', 'not use yet')->select('section', 'location', 'remark', db::raw('count(id) as jml_asset'))->groupBy('section', 'location', 'remark')->orderBy('section', 'asc')->get();
            $auditor_list = EmployeeSync::select('employee_id', 'name')->whereNull('end_date')->whereIn('department', ['Accounting Department', 'Procurement Department', 'Purchasing Control Department'])->orderBy('hire_date', 'asc')->get();
            $period = FixedAssetAudit::select('period')->groupby('period')->get();

            $dept = EmployeeSync::whereNull('end_date')->select('department')->groupBy('department')->orderBy('department', 'asc')->get();

            return view('fixed_asset.form.audit_list', array(
                'title' => $title,
                'title_jp' => $title_jp,
                'location' => $section_loc,
                'auditor_list' => $auditor_list,
                'period' => $period,
                'dept' => $dept
            ))->with('page', 'Fixed Asset Audit List');
        }

        public function indexAssetAuditListAuditor()
        {
            $title = "Fixed Asset Audit List";
            $title_jp = "??";

            $section_loc = FixedAssetitem::select('section', 'location', 'remark')->groupBy('section', 'location', 'remark')->orderBy('section', 'asc')->get();
            $auditor_list = EmployeeSync::select('employee_id', 'name')->whereNull('end_date')->where('department', '=', 'Accounting Department')->orderBy('hire_date', 'asc')->get();
            $period = FixedAssetAudit::select('period')->groupby('period')->get();

            return view('fixed_asset.form.auditor_audit_list', array(
                'title' => $title,
                'title_jp' => $title_jp,
                'location' => $section_loc,
                'auditor_list' => $auditor_list,
                'period' => $period
            ))->with('page', 'Fixed Asset Audit List');
        }

        public function fetchAssetAuditList(Request $request)
        {
            $dept = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();

            $sec = EmployeeSync::where('department', '=', $dept->department)->select('section')->get();
            $sec_arr = [];

            foreach ($sec as $section) {
                array_push($sec_arr, $section->section);
            }

            if ($request->get('period') == '') {
                if (Auth::user()->username != 'PI0905001' && Auth::user()->username != 'PI2002021') {
                    if (in_array("Buyer & RD Admin Section", $sec_arr)) {
                        array_push($sec_arr, 'Purchasing Admin Section');
                    }

                    $prd = FixedAssetAudit::select('period')->whereIn('fixed_asset_audits.asset_section', $sec_arr)
                    ->orderBy('id','desc')
                    ->limit(1)
                    ->first();
                } else {
                    $prd = FixedAssetAudit::select('period')->orderBy('id','desc')
                    ->limit(1)
                    ->first();
                }

                $period = $prd->period;
            } else {
                $period = $request->get('period');
            }

            $assets = FixedAssetAudit::where('fixed_asset_checks.period', '=', $period)
            ->leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_audits.pic')
            ->leftJoin('fixed_asset_checks', function($join)
            {
                $join->on('fixed_asset_checks.period', '=', 'fixed_asset_audits.period');
                $join->on('fixed_asset_checks.sap_number', '=', 'fixed_asset_audits.sap_number');
            });

            if (Auth::user()->username != 'PI0905001'  && Auth::user()->username != 'PI2002021') {
                $assets = $assets->whereIn('fixed_asset_audits.asset_section', $sec_arr);
            }

            $assets = $assets->select('fixed_asset_audits.period', 'fixed_asset_audits.sap_number', 'fixed_asset_audits.asset_name', 'fixed_asset_audits.location', 'fixed_asset_audits.asset_section', 'fixed_asset_checks.asset_images', 'fixed_asset_audits.pic', 'fixed_asset_checks.status', 'fixed_asset_checks.category', 'fixed_asset_checks.appr_manager_at', 'fixed_asset_checks.remark', 'employee_syncs.name', 'fixed_asset_audits.checked_by', 'fixed_asset_checks.audit_type', 'fixed_asset_checks.check_one_by')
            ->get();

            $img_not = [];

            foreach ($assets as $ast) {
                if (!file_exists('files/fixed_asset/asset_picture/'.$ast->asset_images)) {
                    if (!in_array($ast->asset_section.'_'.$ast->location, $img_not)) {
                        array_push($img_not, $ast->asset_section.'_'.$ast->location);
                    }
                }
            }

            $response = array(
                'status' => true,
                'assets' => $assets,
                'img_not' => $img_not,
            );
            return Response::json($response);
        }

        public function fetchAssetAuditorAuditList(Request $request)
        {
            $auditor = strtoupper(Auth::user()->username);
            $role = Auth::user()->role_code;

            if ($auditor == 'PI0905001' || str_contains($role, 'MIS')) {
                $where = '';
            } else {
                $where = 'AND checked_by LIKE "'.$auditor.'%"';
            }

            $last_period = FixedAssetCheck::select('period')->orderBy('period','desc')->first();

            if ($request->get('period') != '') {
                $period = $request->get('period');
            } else if ($last_period){
                $period = $last_period->period;
            } else {
                $period = $request->get('period');
            }

            $assets = db::select('SELECT audit.period, audit.pic, employee_syncs.name, audit.asset_section, audit.location, audit.audit_type, audit.checked_by, asset_stat.jml_asset, asset_stat.status, appr_manager_at, audit.status as status_audit, audit.audited from
                (select period, asset_section, location, pic, checked_by, status, audit_type, SUM(IF(remark is not null, 1, 0)) as audited from fixed_asset_audits
                    where period = "'.$period.'"
                    '.$where.'
                    group by period, asset_section, pic, location, checked_by, status, audit_type) as audit
                left join
                (select period, asset_section, location, count(id) as jml_asset, `status`, appr_manager_at from fixed_asset_checks
                    where period = "'.$period.'"
                    group by period, asset_section, location, `status`, appr_manager_at) as asset_stat on audit.asset_section = asset_stat.asset_section and audit.location = asset_stat.location
                    left join employee_syncs on employee_syncs.employee_id = audit.pic');

                $response = array(
                    'status' => true,
                    'assets' => $assets
                );
                return Response::json($response);
            }

            public function fetchAssetLocation(Request $request)
            {
                $dept = EmployeeSync::where('employee_id', '=', Auth::user()->username)->select('department')->first();

                $sec = EmployeeSync::where('department', '=', $dept->department)->select('section')->get();
                $sec_arr = [];

                foreach ($sec as $section) {
                    array_push($sec_arr, $section->section);
                }

                if ($request->get('period') == '') {
                    if (Auth::user()->username != 'PI0905001' && Auth::user()->username != 'PI2002021') {
                        if (in_array("Buyer & RD Admin Section", $sec_arr)) {
                            array_push($sec_arr, 'Purchasing Admin Section');
                        }

                        $prd = FixedAssetAudit::select('period')->whereIn('fixed_asset_audits.asset_section', $sec_arr)
                        ->orderBy('id','desc')
                        ->limit(1)
                        ->first();
                    } else {
                        $prd = FixedAssetAudit::select('period')->orderBy('id','desc')
                        ->limit(1)
                        ->first();
                    }

                    $period = $prd->period;
                } else {
                    $period = $request->get('period');
                }
                $sections = EmployeeSync::where('department', '=', $request->get('dept'))
                ->whereNull('end_date')
                ->select('section')
                ->groupBy('section')
                ->get();

                $arr_sec = [];

                foreach ($sections as $sec) {
                    array_push($arr_sec, $sec->section);
                }

                $maps = FixedAssetCheck::whereIn('asset_section', $arr_sec)
                ->where('period', '=', $period)
                ->select('asset_section', 'location', 'asset_map')
                ->groupBy('asset_section', 'location', 'asset_map')
                ->get();

                $response = array(
                    'status' => true,
                    'asset_maps' => $maps
                );
                return Response::json($response);
            }

            public function fetchAssetVendor(Request $request)
            {
                $asset = FixedAssetCheck::where('period', $request->get('period'))
                ->where('category', '=', 'Vendor')
                ->select('location', 'check_file')
                ->groupBy('location', 'check_file')
                ->get();

                $response = array(
                    'status' => true,
                    'assets' => $asset
                );
                return Response::json($response);
            }

            public function fetchVendorType(Request $request)
            {
               $asset = FixedAssetCheck::where('period', $request->get('period'))
               ->where('category', '=', 'Vendor')
               ->select('location', 'audit_type')
               ->groupBy('location', 'audit_type')
               ->get();

               $response = array(
                'status' => true,
                'assets' => $asset
            );
               return Response::json($response);
           }

           public function postAssetMap(Request $request)
           {
            $section = explode(',', $request->get('section'));
            $location = explode(',', $request->get('location'));

            for ($i=0; $i <= count($section); $i++) { 

                if ($request->file('map_'.$i)) {
                    $tujuan_upload = 'files/fixed_asset/map';
                    $file = $request->file('map_'.$i);

                    $nama = $file->getClientOriginalName();
                    $extension = pathinfo($nama, PATHINFO_EXTENSION);
                    $filename = $section[$i].'_'.$location[$i].'.'.$extension;

                    $file->move($tujuan_upload,$filename);

                    FixedAssetCheck::where('asset_section', '=', $section[$i])
                    ->where('location', '=', $location[$i])
                    ->update([
                        'asset_map' => $filename
                    ]);

                    FixedAssetAudit::where('asset_section', '=', $section[$i])
                    ->where('location', '=', $location[$i])
                    ->update([
                        'asset_map' => $filename
                    ]);
                }

            }

            $response = array(
                'status' => true
            );
            return Response::json($response);
        }

        public function uploadAssetVendor(Request $request)
        {
    // dd($request->get('len'));
            try{
                $location = $request->get('location');
                $periode = $request->get('period');


                if($request->hasFile('asset')) {
                    $file = $request->file('asset');
                    $file_name = $periode.'_'.$location.'_'.$request->get('type').'.'.$file->getClientOriginalExtension();
                    $file->move(public_path('files/fixed_asset/report_asset_vendor/'), $file_name);

            //BAP File
                    if ($request->hasFile('bap')) {
                        $file_bap = $request->file('bap');
                        $file_name2 = $periode.'_'.$location.'.'.$file_bap->getClientOriginalExtension();
                        $file_bap->move(public_path('files/fixed_asset/bap_audit/'), $file_name2);
                    }


                    $excel = public_path('files/fixed_asset/report_asset_vendor/') . $file_name;
                    $rows = Excel::load($excel, function($reader) {
                        $reader->noHeading();
                        $reader->skipRows(1);
                    })->get();
                    $rows = $rows->toArray();

                    $total_asset = count($rows);
                    $must_audit = floor(count($rows) / 100 * 10);
                    $audit = 0;

                    if ($request->get('type') == 'Audit') {
                        if ($must_audit == 0) $must_audit = 1;

                        for ($i=0; $i < count($rows); $i++) {
                            if ($rows[$i][15] != '' && $rows[$i][16] != '') {
                                $audit += 1;
                            }
                        }

                        if ($audit < $must_audit) {
                            $response = array(
                                'status' => false,
                                'message' => 'Audit Kurang dari 10% ('.$must_audit.' Asset)',
                            );
                            return Response::json($response);
                        }
                    } else if ($request->get('type') == 'Check') {
                        for ($i=0; $i < count($rows); $i++) {
                    // if ($rows[$i][9] == '' || $rows[$i][10] == '' || $rows[$i][11] == '' || $rows[$i][12] == '' || $rows[$i][13] == '' || $rows[$i][14] == '' || $rows[$i][15] == '' || $rows[$i][16] == '' || $rows[$i][17] == '' || $rows[$i][18] == '') {

                    //     $response = array(
                    //         'status' => false,
                    //         'message' => 'Mohon Lengkapi data Cek Asset',
                    //     );
                    //     return Response::json($response);
                    // }
                        }
                    }

                    for ($i=0; $i < count($rows); $i++) {
                        $loc = $rows[$i][2];
                        $sap_number = $rows[$i][3];
                        $note = $rows[$i][8];
                        $ava = $rows[$i][9];
                        $asset_con = $rows[$i][10];
                        $label = $rows[$i][11];
                        $use = $rows[$i][12];
                        $map = $rows[$i][13];
                        $img = $rows[$i][14];
                        $ck1 = $rows[$i][15];
                        $ck1_date = $rows[$i][16];
                        $ck2 = $rows[$i][17];
                        $ck2_date = $rows[$i][18];


                        if ($request->get('type') == 'Check') {
                            FixedAssetCheck::where('period', '=', $periode)
                            ->where('sap_number', '=', $sap_number)
                            ->update([
                                'note' => $note,
                                'availability' => $ava,
                                'asset_condition' => $asset_con,
                                'label_condition' => $label,
                                'usable_condition' => $use,
                                'map_condition' => $map,
                                'asset_image_condition' => $img,
                                'status' => 'Check 2',
                                'check_one_by' => $ck1,
                                'check_one_at' => $ck1_date,
                                'check_two_by' => $ck2,
                                'check_two_at' => $ck2_date,
                                'check_file' => $file_name,
                                'appr_chief_by' => null,
                                'appr_chief_at' => null,
                                'appr_manager_by' => null,
                                'appr_manager_at' => null,
                                'appr_status' => null
                            ]);
                        } else if ($request->get('type') == 'Audit') {
                            FixedAssetAudit::where('period', '=', $periode)
                            ->where('sap_number', '=', $sap_number)
                            ->update([
                                'note' => $note,
                                'availability' => $ava,
                                'asset_condition' => $asset_con,
                                'label_condition' => $label,
                                'usable_condition' => $use,
                                'map_condition' => $map,
                                'asset_image_condition' => $img,
                                'status' => 'Close',
                        // 'check_one_by' => $ck1,
                                'checked_date' => $ck1_date,
                                'remark' => 'audited'
                            ]);
                        }



                        $stts = FixedAssetCheck::where('period', '=', $periode)
                        ->where('sap_number', '=', $sap_number)
                        ->select('audit_type')
                        ->first();

                        if (count($stts) > 0) {
                            if ($stts->audit_type == 'Remote') {
                                FixedAssetAudit::where('period', '=', $periode)
                                ->where('sap_number', '=', $sap_number)
                                ->update([
                                    'note' => $note,
                                    'availability' => $ava,
                                    'asset_condition' => $asset_con,
                                    'label_condition' => $label,
                                    'usable_condition' => $use,
                                    'map_condition' => $map,
                                    'asset_image_condition' => $img,
                                    'remark' => 'audited'
                                ]);
                            }
                        }

                    }


            // $asset_check = FixedAssetCheck::where('category', '=', 'Vendor')
            // ->where('status', '=', 'Check 2')
            // ->where('location', '=', $location)
            // ->where('period', '=', $periode)
            // ->select('period', db::raw('location as asset_section'), db::raw('count(sap_number) as total_asset'))
            // ->groupBy('period', 'location')->get();

            // $summary_data = db::select("select location, 
            //     SUM(IF(availability = 'Ada', 1, 0)) as ada,
            //     SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
            //     SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
            //     SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
            //     SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
            //     SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
            //     SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
            //     from fixed_asset_checks where `status` = 'Check 2' and location = '".$location."' and period = '".$periode."'
            //     group by location");

            // $att = [];

            // $data = [
            //     "datas" => $asset_check,
            //     "position" => 'Chief Foreman',
            //     "status" => 'Approve',
            //     "data_details" => $summary_data,
            //     "period" => $asset_check[0]->period,
            //     "att" => $att
            // ];

            // $chief_foreman = db::select('SELECT email from send_emails where remark = "Buyer & RD Admin Section"');

            // $mailto = $chief_foreman[0]->email;

            // Mail::to($mailto)->bcc(['ismail.husen@music.yamaha.com','nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));
                }

                for ($i=0; $i < (int) $request->get('len'); $i++) { 
                    $file = $request->file('photo_'.$i);
                    $nama = $file->getClientOriginalName();

                    if ($request->get('type') == 'Check') {
                        $file_name = $periode.'_check1_'.$nama;
                        $file->move(public_path('files/fixed_asset/asset_check/'), $file_name);

                        $tujuan_upload = 'files/fixed_asset/asset_check';
                        $file_name2 = $periode.'_check2_'.$nama;
                        copy($tujuan_upload.'/'.$file_name, $tujuan_upload.'/'.$file_name2);

                        FixedAssetCheck::where('period', '=', $periode)
                        ->where('sap_number', '=', pathinfo($nama, PATHINFO_FILENAME))
                        ->update([
                            'result_images' => $file_name2,
                        ]);
                    } else if ($request->get('type') == 'Audit') {
                        $file_name = $periode.'_'.$nama;
                        $file->move(public_path('files/fixed_asset/asset_audit/'), $file_name);

                        FixedAssetAudit::where('period', '=', $periode)
                        ->where('sap_number', '=', pathinfo($nama, PATHINFO_FILENAME))
                        ->update([
                            'result_images' => $file_name,
                        ]);
                    }

                }


                $response = array(
                    'status' => true,
                    'message' => 'OK'
                );
                return Response::json($response);

            }catch(\Exception $e){
                $response = array(
                    'status' => false,
                    'message' => $e->getMessage(),
                );
                return Response::json($response);
            }

        }

        public function downloadAssetVendor(Request $request)
        {
            $asset_check = FixedAssetCheck::where('category', '=', 'Vendor')
            ->where('location', '=', $request->get('loc_exp'))
            ->where('period', '=', $request->get('period_exp'))
            ->select('period', 'category', 'location', 'sap_number', 'asset_name', 'asset_section', 'note', 'availability', 'asset_condition', 'label_condition', 'usable_condition', 'map_condition', 'asset_image_condition', 'check_one_by', 'check_one_at', 'check_two_by', 'check_two_at', 'asset_images', 'result_images')
            ->get();

            $data = array(
                'assets' => $asset_check
            );

            ob_clean();
            Excel::create('Fixed Asset '.$request->get('loc_exp'), function($excel) use ($data){
                $excel->sheet('Point Check', function($sheet) use ($data) {
                    return $sheet->loadView('fixed_asset.report_file.fa_excel', $data);
                });
            })->export('xlsx');

    // return view('fixed_asset.report_file.fa_excel', array(
    //     'assets' => $asset_check
    // ))->with('page', 'Fixed Asset Approval');

    // return redirect('index/fixed_asset/audit/list');
        }

        public function updateFixedAssetPhoto(Request $request)
        {
            try {
                if (count($request->file('new_asset_image')) > 0) {

                    $tujuan_upload = 'files/fixed_asset/asset_picture';
                    $file = $request->file('new_asset_image');

                    $nama = $file->getClientOriginalName();
                    $extension = pathinfo($nama, PATHINFO_EXTENSION);
                    $filename = $request->get('sap_number').'.'.$extension;

                    $file->move($tujuan_upload,$filename);

                    $item = FixedAssetItem::where('sap_number',$request->get('sap_number'))->first();
                    $item->picture = $filename;
                    $item->save();

                    if ($request->get('period_img')) {
                        $audit = FixedAssetAudit::where('sap_number',$request->get('sap_number'))->where('period', $request->get('period_img'))->first();
                        $audit->asset_images = $filename;
                        $audit->save();

                        $check = FixedAssetCheck::where('sap_number',$request->get('sap_number'))->where('period', $request->get('period_img'))->first();
                        $check->asset_images = $filename;
                        $check->save();
                    }

                    if ($request->get('period_img')) {
                        return redirect('index/fixed_asset/audit/list');
                    } else {
                        return redirect('index/fixed_asset/report');
                    }
                }else{
                    return redirect('index/fixed_asset/audit/list');
                }
            } catch (Exception $e) {
                $response = array(
                    'status' => false,
                    'message' => $e->getMessage()
                );
                return Response::json($response);
            }
        }

        public function generateFixedAssetAudit(Request $request)
        {
            $period = $request->get('mon').'-01';

            $arr_param = [];
            for ($i=0; $i < count($request->get('section')); $i++) { 
                $arr_param["name"][] = $request->get('section')[$i].' - '.strtolower($request->get('location')[$i]);
                $arr_param["auditor"][] = $request->get('auditor')[$i];
                $arr_param["type"][] = $request->get('remote')[$i];
            }


            try {
                $asset = FixedAssetitem::whereNull('retired_date')->where('usage_term', '<>', 'not use yet')->whereNotNull('sap_number')->get();

                foreach ($asset as $ast) {
                    $stat = false;
                    $auditor = null;
                    $type = null;

                    for ($i=0; $i < count($arr_param['name']); $i++) { 

                        if ($ast->section.' - '.strtolower($ast->location) == $arr_param['name'][$i] ) {
                            $stat = true;
                            $auditor = $arr_param['auditor'][$i];
                            $type = $arr_param['type'][$i];
                        } 
                    }


                    if ($stat) {
                        $asset_audit = FixedAssetAudit::firstOrNew(array('period' => $period, 'sap_number' => $ast->sap_number));
                        $asset_audit->asset_name = $ast->fixed_asset_name;
                        $asset_audit->category = $ast->remark;
                        $asset_audit->location = $ast->location;
                        $asset_audit->asset_section = $ast->section;
                        $asset_audit->asset_images = $ast->picture;
                        $asset_audit->pic = $ast->pic;
                        $asset_audit->status = 'Open';
                        $asset_audit->audit_type = $type;
                        $asset_audit->checked_by = $auditor;
                        $asset_audit->created_by = Auth::user()->id;
                        $asset_audit->save();

                        $asset_check = FixedAssetCheck::firstOrNew(array('period' => $period, 'sap_number' => $ast->sap_number));
                        $asset_check->asset_name = $ast->fixed_asset_name;
                        $asset_check->category = $ast->remark;
                        $asset_check->location = $ast->location;
                        $asset_check->asset_section = $ast->section;
                        $asset_check->asset_images = $ast->picture;
                        $asset_check->pic = $ast->pic;
                        $asset_check->audit_type = $type;
                        $asset_check->status = 'Not Checked';
                        $asset_check->created_by = Auth::user()->id;
                        $asset_check->save();

                // if ($ast->remark == 'Vendor') {
                //     $get_num = db::connection('ympimis_online')->table('fixed_asset_audits')->where('period', $period)->where('sap_number', $ast->sap_number)->get();

                //     if(count($get_num) == 0) {
                //         $audit_online = db::connection('ympimis_online')->table('fixed_asset_audits')->insert(
                //             [
                //                 'period' =>  $period, 
                //                 'sap_number' => $ast->sap_number, 
                //                 'asset_name' => $ast->fixed_asset_name, 
                //                 'category' => $ast->remark, 
                //                 'location' => $ast->location, 
                //                 'asset_section' => $ast->section, 
                //                 'asset_images' => $ast->picture, 
                //                 'pic' => $ast->pic, 
                //                 'status' => 'Open', 
                //                 'audit_type' => $type, 
                //                 'checked_by' => $auditor, 
                //                 'created_by' => Auth::user()->id
                //             ]
                //         );

                //         $check_online = db::connection('ympimis_online')->table('fixed_asset_checks')->insert(
                //             ['period' => $period,
                //             'sap_number' => $ast->sap_number,
                //             'asset_name' => $ast->fixed_asset_name,
                //             'category' => $ast->remark,
                //             'location' => $ast->location,
                //             'asset_section' => $ast->section,
                //             'asset_images' => $ast->picture,
                //             'pic' => $ast->pic,
                //             'audit_type' => $type, 
                //             'status' => 'Not Checked',
                //             'created_by' => Auth::user()->id]
                //         );
                //     }

                // }

                    }            
                }

                $response = array(
                    'status' => true,
                );
                return Response::json($response); 
            } catch (Exception $e) {
                $response = array(
                    'status' => false,
                    'message' => $e->getMessage()
                );
                return Response::json($response);
            }
        }

        public function inputAssetCheck(Request $request)
        {
            try {
                if (count($request->file('fileData')) > 0) {

                    $tujuan_upload = 'files/fixed_asset/asset_check';
                    $file = $request->file('fileData');
                    $filename = $request->get('period').'_'.$request->get('category').'_'.$request->input('asset_id').'.'.$request->input('extension');
                    $file->move($tujuan_upload,$filename);


                    $image_file = 'files/fixed_asset/asset_picture/'.$request->input('asset_id').'.'.$request->input('extension');

                    if (!file_exists($image_file)) {
                        $tujuan_upload2 = 'files/fixed_asset/asset_picture';
                        $filename2 = $request->input('asset_id').'.'.$request->input('extension');
                        copy($tujuan_upload.'/'.$filename, $tujuan_upload2.'/'.$filename2);


                        $asset_img = FixedAssetItem::where('sap_number',$request->get('asset_id'))->update([
                            'picture' => $filename2
                        ]);

                        $check_img = FixedAssetCheck::where('sap_number',$request->get('asset_id'))->where('period',$request->get('period'))->update([
                            'asset_images' => $filename2
                        ]);

                        $audit_img = FixedAssetAudit::where('sap_number',$request->get('asset_id'))->where('period',$request->get('period'))->update([
                            'asset_images' => $filename2
                        ]);

                    }

                    $check = FixedAssetCheck::where('sap_number',$request->get('asset_id'))->where('period',$request->get('period'))->first();
                    $check->availability = $request->get('availability');
                    $check->asset_condition = $request->get('asset_condition');
                    $check->label_condition = $request->get('label_condition');
                    $check->usable_condition = $request->get('usable_condition');
                    $check->map_condition = $request->get('map_condition');
                    $check->asset_image_condition = $request->get('image_condition');
                    $check->note = $request->get('note');
                    $check->result_images = $filename;

                    if ($request->get('category') == 'check1') {
                        $check->check_one_by = Auth::user()->username.'/'.Auth::user()->name;
                        $check->check_one_at = date('Y-m-d H:i:s');

                        $update_asset = FixedAssetCheck::where('period',$request->get('period'))
                        ->where('asset_section', '=', $check->asset_section)
                        ->where('location', '=', $check->location)
                        ->update([
                            'status' => 'Check 1',
                            'remark' => null
                        ]);
                    } else if ($request->get('category') == 'check2') {
                        $check->check_two_by = Auth::user()->username.'/'.Auth::user()->name;
                        $check->check_two_at = date('Y-m-d H:i:s');

                        $update_asset = FixedAssetCheck::where('period',$request->get('period'))
                        ->where('asset_section', '=', $check->asset_section)
                        ->where('location', '=', $check->location)
                        ->update([
                            'status' => 'Check 2',
                            'remark' => null
                        ]);
                    }

                    $check->save();

                    $response = array(
                      'status' => true,
                  );
                    return Response::json($response);
                } else if($request->get('availability') == 'Tidak Ada'){
                    $check = FixedAssetCheck::where('sap_number',$request->get('asset_id'))->where('period',$request->get('period'))->first();
                    $check->availability = $request->get('availability');
                    $check->asset_condition = $request->get('asset_condition');
                    $check->label_condition = $request->get('label_condition');
                    $check->usable_condition = $request->get('usable_condition');
                    $check->map_condition = $request->get('map_condition');
                    $check->asset_image_condition = $request->get('image_condition');
                    $check->note = $request->get('note');


                    if ($request->get('category') == 'check1') {
                        $check->check_one_by = Auth::user()->username.'/'.Auth::user()->name;
                        $check->check_one_at = date('Y-m-d H:i:s');

                        $update_asset = FixedAssetCheck::where('period',$request->get('period'))
                        ->where('asset_section', '=', $check->asset_section)
                        ->where('location', '=', $check->location)
                        ->update([
                            'status' => 'Check 1',
                            'remark' => null
                        ]);

                    } else if ($request->get('category') == 'check2') {
                        $check->check_two_by = Auth::user()->username.'/'.Auth::user()->name;
                        $check->check_two_at = date('Y-m-d H:i:s');

                        $update_asset = FixedAssetCheck::where('period',$request->get('period'))
                        ->where('asset_section', '=', $check->asset_section)
                        ->where('location', '=', $check->location)
                        ->update([
                            'status' => 'Check 2',
                            'remark' => null
                        ]);
                    }

                    $check->save();

                    $response = array(
                      'status' => true,
                  );
                    return Response::json($response);
                } 
                else if($request->get('counter') == '0'){
                    if ($request->get('category') == 'check1') {
                        $update_asset = FixedAssetCheck::where('period',$request->get('period'))
                        ->where('asset_section', '=', $request->get('section'))
                        ->where('location', '=', $request->get('location'))
                        ->update([
                            'status' => 'Check 1',
                            'remark' => null
                        ]);

                    } else if ($request->get('category') == 'check2') {
                        $update_asset = FixedAssetCheck::where('period',$request->get('period'))
                        ->where('asset_section', '=', $request->get('section'))
                        ->where('location', '=', $request->get('location'))
                        ->update([
                            'status' => 'Check 2',
                            'remark' => null
                        ]);
                    }
                    $response = array(
                      'status' => true,
                  );
                    return Response::json($response);

                }

                else{
                  $response = array(
                      'status' => false,
                      'message' => 'Upload Photo on Point '.$request->input('asset_name')
                  );
                  return Response::json($response);
              }
          } catch (\Exception $e) {
            $response = array(
                'status' => false,
                'message' => $e->getMessage().' on Line'. $e->getLine()
            );
            return Response::json($response);
        }
    }

    public function inputAssetCheckTemp(Request $request)
    {
        try {
            if (count($request->file('fileData')) > 0) {

                $tujuan_upload = 'files/fixed_asset/asset_check';
                $file = $request->file('fileData');
                $filename = $request->get('period').'_'.$request->get('category').'_'.$request->input('asset_id').'.'.$request->input('extension');
                $file->move($tujuan_upload,$filename);

                $image_file = 'files/fixed_asset/asset_picture/'.$request->input('asset_id').'.'.$request->input('extension');

                if (!file_exists($image_file)) {
                    $tujuan_upload2 = 'files/fixed_asset/asset_picture';
                    $filename2 = $request->input('asset_id').'.'.$request->input('extension');
                    copy($tujuan_upload.'/'.$filename, $tujuan_upload2.'/'.$filename2);


                    $asset_img = FixedAssetItem::where('sap_number',$request->get('asset_id'))->update([
                        'picture' => $filename2
                    ]);

                    $check_img = FixedAssetCheck::where('sap_number',$request->get('asset_id'))->where('period',$request->get('period'))->update([
                        'asset_images' => $filename2
                    ]);

                    $audit_img = FixedAssetAudit::where('sap_number',$request->get('asset_id'))->where('period',$request->get('period'))->update([
                        'asset_images' => $filename2
                    ]);

                }

                $check = FixedAssetCheck::where('sap_number',$request->get('asset_id'))->where('period',$request->get('period'))->first();
                $check->availability = $request->get('availability');
                $check->asset_condition = $request->get('asset_condition');
                $check->label_condition = $request->get('label_condition');
                $check->usable_condition = $request->get('usable_condition');
                $check->map_condition = $request->get('map_condition');
                $check->asset_image_condition = $request->get('image_condition');
                $check->note = $request->get('note');
                $check->result_images = $filename;

                if ($request->get('category') == 'check1') {
                    $check->check_one_by = Auth::user()->username.'/'.Auth::user()->name;
                    $check->check_one_at = date('Y-m-d H:i:s');
                    $check->remark = 'temporary save';
                } else if ($request->get('category') == 'check2') {
                    $check->check_two_by = Auth::user()->username.'/'.Auth::user()->name;
                    $check->check_two_at = date('Y-m-d H:i:s');
                    $check->remark = 'temporary save 2';
                }

                $check->save();

                $response = array(
                  'status' => true,
              );
                return Response::json($response);
            } else if($request->get('availability') == 'Tidak Ada'){
                $check = FixedAssetCheck::where('sap_number',$request->get('asset_id'))->where('period',$request->get('period'))->first();
                $check->availability = $request->get('availability');
                $check->asset_condition = $request->get('asset_condition');
                $check->label_condition = $request->get('label_condition');
                $check->usable_condition = $request->get('usable_condition');
                $check->map_condition = $request->get('map_condition');
                $check->asset_image_condition = $request->get('image_condition');
                $check->note = $request->get('note');

                if ($request->get('category') == 'check1') {
                    $check->check_one_by = Auth::user()->username.'/'.Auth::user()->name;
                    $check->check_one_at = date('Y-m-d H:i:s');
                    $check->remark = 'temporary save';
                } else if ($request->get('category') == 'check2') {
                    $check->check_two_by = Auth::user()->username.'/'.Auth::user()->name;
                    $check->check_two_at = date('Y-m-d H:i:s');
                    $check->remark = 'temporary save 2';
                }

                $check->save();

                $response = array(
                  'status' => true,
              );
                return Response::json($response);
            } else{
              $response = array(
                  'status' => false,
                  'message' => 'Upload Photo on Point '.$request->input('asset_name')
              );
              return Response::json($response);
          }
      } catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage().' on Line'. $e->getLine()
        );
        return Response::json($response);
    }
}

public function approvalFixedAsset(Request $request)
{
    // CEK SEMUA ASSET SUDAH CEK
    $asset_qty = FixedAssetCheck::where('category', '=', $request->get('category'))
    ->where('status', '<>', 'Check 2');
    if ($request->get('category') == 'YMPI') {
        $asset_qty = $asset_qty->where('asset_section', '=', $request->get('section'));
    } else {
        $asset_qty = $asset_qty->where('location', '=', $request->get('section'));
    }

    $asset_qty = $asset_qty->where('period', '=', $request->get('period'))
    ->get();

    if (count($asset_qty) > 0) {
        $response = array(
            'status' => false,
            'message' => 'Semua Asset dalam Section harus sudah dicek'
        );
        return Response::json($response);
    }

    // CEK ASSET MAP
    if ($request->get('category') == 'YMPI') {
        $asset_map = FixedAssetCheck::where('category', '=', $request->get('category'))
        ->where('asset_section', '=', $request->get('section'))
        ->where('period', '=', $request->get('period'))
        ->whereNull('asset_map')
        ->get();

        if (count($asset_map) > 0) {
            $response = array(
                'status' => false,
                'message' => 'Mohon Upload Semua Peta Lokasi Asset'
            );
            return Response::json($response);
        }
    }

    // CEK ASSET SUDAH PERNAH KIRIM

    $asset_stat = FixedAssetCheck::where('category', '=', $request->get('category'));

    if ($request->get('category') == 'YMPI') {
        $asset_stat = $asset_stat->where('asset_section', '=', $request->get('section'));
    } else {
        $asset_stat = $asset_stat->where('location', '=', $request->get('section'));
    }

    $asset_stat = $asset_stat->where('period', '=', $request->get('period'))
    ->where('appr_status', '=', 'send')
    ->get();

    if (count($asset_stat) > 0) {
        $response = array(
            'status' => false,
            'message' => 'Approval sudah pernah dikirim'
        );
        return Response::json($response);
    }

    if ($request->get('category') == 'YMPI') {
        $asset_check = FixedAssetCheck::where('category', '=', $request->get('category'))
        ->where('status', '=', 'Check 2')
        ->where('asset_section', '=', $request->get('section'))
        ->where('period', '=', $request->get('period'))
        ->select('period', 'asset_section', db::raw('count(sap_number) as total_asset'))
        ->groupBy('period', 'asset_section')->get();

    } else {
        $asset_check = FixedAssetCheck::where('category', '=', $request->get('category'))
        ->where('status', '=', 'Check 2')
        ->where('location', '=', $request->get('section'))
        ->where('period', '=', $request->get('period'))
        ->select('period', db::raw('location as asset_section'), db::raw('count(sap_number) as total_asset'))
        ->groupBy('period', 'location')->get();
    }

    $asset_check2 = FixedAssetCheck::where('category', '=', $request->get('category'))
    ->where('status', '=', 'Check 2');

    if ($request->get('category') == 'YMPI') {
        $asset_check2 = $asset_check2->where('asset_section', '=', $request->get('section'));
    } else {
        $asset_check2 = $asset_check2->where('location', '=', $request->get('section'));
    }

    $asset_check2 = $asset_check2->where('period', '=', $request->get('period'))
    ->update([
        'appr_status' => 'send'
    ]);

    if ($request->get('category') == 'YMPI') {
        $chief_foreman = db::select('SELECT email from send_emails where remark = "'.$asset_check[0]->asset_section.'"');
    } else {
        $chief_foreman = db::select('SELECT email from send_emails where remark = "Buyer & RD Admin Section"');
    }


    $mailto = [];

    foreach ($chief_foreman as $chf_fr) {
        array_push($mailto, $chf_fr->email);
    }

    if ($request->get('category') == 'YMPI') {
       $summary_data = db::select("select asset_section, 
        SUM(IF(availability = 'Ada', 1, 0)) as ada,
        SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
        SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
        SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
        SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
        SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
        SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
        from fixed_asset_checks where `status` = 'Check 2' and asset_section = '".$request->get('section')."' and period = '".$request->get('period')."' and category = '".$request->get('category')."' 
        group by asset_section");
   } else {
    $summary_data = db::select("select location, 
        SUM(IF(availability = 'Ada', 1, 0)) as ada,
        SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
        SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
        SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
        SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
        SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
        SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
        from fixed_asset_checks where `status` = 'Check 2' and location = '".$request->get('section')."' and period = '".$request->get('period')."'
        group by location");
}


$att = [];

// if ($summary_data[0]->asset_section == 'Hardware Section') {
//     $data_loc = FixedAssetCheck::where('period', '=', $request->get('period'))
//     ->where('asset_section', '=', $summary_data[0]->asset_section)
//     ->select('location')
//     ->groupBy('location')
//     ->get();

//     foreach ($data_loc as $loc) {
    //  $pdf = \App::make('dompdf.wrapper');
    //  $pdf->getDomPDF()->set_option("enable_php", true);
    //  $pdf->setPaper('A4', 'potrait');

    //  $audit_data = FixedAssetAudit::leftJoin('fixed_asset_checks', function($join)
    //  {
    //     $join->on('fixed_asset_checks.period', '=', 'fixed_asset_audits.period');
    //     $join->on('fixed_asset_checks.sap_number','=', 'fixed_asset_audits.sap_number');
    // })
    //  ->leftjoin('fixed_asset_items', 'fixed_asset_items.sap_number', '=', 'fixed_asset_audits.sap_number')
    //  ->where('fixed_asset_audits.period', '=', $request->get('period'))
    //  ->where('fixed_asset_audits.asset_section', '=', $summary_data[0]->asset_section)
    //  ->where('fixed_asset_audits.location', '=', $loc->location)
    //  ->select('fixed_asset_audits.id','fixed_asset_audits.period', 'fixed_asset_audits.category', 'fixed_asset_audits.location', 'fixed_asset_audits.sap_number', 'fixed_asset_audits.asset_name', 'fixed_asset_audits.asset_section', 'fixed_asset_audits.asset_images', 'fixed_asset_audits.result_images', 'fixed_asset_audits.note', 'fixed_asset_checks.availability', 'fixed_asset_checks.asset_condition', 'fixed_asset_checks.label_condition', 'fixed_asset_checks.usable_condition', 'fixed_asset_checks.map_condition', 'fixed_asset_checks.asset_image_condition', 'fixed_asset_audits.checked_by', 'fixed_asset_audits.checked_date', 'fixed_asset_checks.check_one_by', 'fixed_asset_checks.check_one_at', 'fixed_asset_checks.check_two_by', 'fixed_asset_checks.check_two_at', 'fixed_asset_checks.appr_manager_by', 'fixed_asset_checks.appr_manager_at', db::raw('DATE_FORMAT("fixed_asset_items.request_date", "%Y-%b") as reg_date'))
    //  ->get();

    //  $pdf->loadView('fixed_asset.report_file.audit_report', array(
    //     'audit_data' => $audit_data,
    // ));

    //  $pdf->save(public_path()."/files/fixed_asset/asset_report/Hardware Section_".$request->get('period')."_".$loc->location.".pdf");
 //     array_push($att, "Hardware Section_".$request->get('period')."_".$loc->location.".pdf");
 // }

// }

$data = [
    "datas" => $asset_check,
    "position" => 'Chief Foreman',
    "status" => 'Approve',
    "data_details" => $summary_data,
    "period" => $asset_check[0]->period,
    "att" => $att
];

Mail::to($mailto)->bcc(['ismail.husen@music.yamaha.com','nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));

$response = array(
    'status' => true,
);
return Response::json($response);
}

public function indexAssetCheckReport($section, $period)
{
    $title = 'Report Check Fixed Asset';
    $title_jp = '';

    return view('fixed_asset.report_file.check_report', array(
        'title' => $title,
        'title_jp' => $title_jp,
    ));
}

public function fetchAssetCheckReport(Request $request)
{
    $asset = FixedAssetCheck::where('period', '=', $request->get('period'))
    ->where('asset_section', '=', $request->get('section'))
    ->select('category', 'location', 'sap_number', 'asset_name', 'asset_images', 'result_images', 'note','availability','asset_condition','label_condition','usable_condition','map_condition','asset_image_condition', db::raw('SPLIT_STRING(check_one_by, "/", 2) as check_one_by'), db::raw('SPLIT_STRING(check_two_by, "/", 2) as check_two_by'))
    ->get();

    $response = array(
        'status' => true,
        'assets' => $asset
    );
    return Response::json($response);
}

public function approvalFixedAssetCheck($section, $period, $stat, $position)
{
    if ($stat == 'Approved') {
        $nama = '';
        $status = true;
        $message2 = 'Successfully Approved';
        $stat2 = '';

        if ($position == 'chief') {
            $att = [];
            if (str_contains($section, 'Section')) { 
                FixedAssetCheck::where('asset_section', '=', $section)
                ->where('period', '=', $period)
                ->update([
                    'appr_chief_by' => Auth::user()->username.'/'.Auth::user()->name,
                    'appr_chief_at' => date('Y-m-d H:i:s'),
                ]);

                $asset_check = FixedAssetCheck::where('status', '=', 'Check 2')
                ->where('asset_section', '=', $section)
                ->where('period', '=', $period)
                ->where('category', '=','YMPI')
                ->select('period', 'asset_section', db::raw('count(sap_number) as total_asset'))
                ->groupBy('period', 'asset_section')
                ->get();

                $summary_data = db::select("select asset_section, 
                    SUM(IF(availability = 'Ada', 1, 0)) as ada,
                    SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
                    SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
                    SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
                    SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
                    SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
                    SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
                    from fixed_asset_checks where `status` = 'Check 2' and asset_section = '".$section."' and period = '".$period."'
                    and category = 'YMPI'
                    group by asset_section");

                $data = [
                    "datas" => $asset_check,
                    "position" => 'Manager',
                    "status" => 'Approve',
                    "data_details" => $summary_data,
                    "period" => $asset_check[0]->period,
                    "att" => $att
                ];


                $dept = EmployeeSync::where('section', '=', $section)->select('department')->first();

                $manger = db::select('SELECT email from send_emails where remark = "'.$dept->department.'"');

                $mailto = [];

                foreach ($manger as $mgr) {
                    array_push($mailto, $mgr->email);
                }

                Mail::to($mailto)->bcc(['ismail.husen@music.yamaha.com','nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));

            } else {
                FixedAssetCheck::where('location', '=', $section)
                ->where('period', '=', $period)
                ->update([
                    'appr_chief_by' => Auth::user()->username.'/'.Auth::user()->name,
                    'appr_chief_at' => date('Y-m-d H:i:s'),
                ]);

                $asset_check = FixedAssetCheck::where('status', '=', 'Check 2')
                ->where('location', '=', $section)
                ->where('period', '=', $period)
                ->select('period', db::raw('location as asset_section'), db::raw('count(sap_number) as total_asset'))
                ->groupBy('period', 'location')
                ->get();

                $summary_data = db::select("select location, 
                    SUM(IF(availability = 'Ada', 1, 0)) as ada,
                    SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
                    SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
                    SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
                    SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
                    SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
                    SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
                    from fixed_asset_checks where `status` = 'Check 2' and location = '".$section."' and period = '".$period."'
                    group by location");

                $data = [
                    "datas" => $asset_check,
                    "position" => 'Manager',
                    "status" => 'Approve',
                    "data_details" => $summary_data,
                    "period" => $asset_check[0]->period,
                    "att" => $att
                ];

                $manger = db::select('SELECT email from send_emails where remark = "Procurement Department"');

                $mailto = [];

                foreach ($manger as $mgr) {
                    array_push($mailto, $mgr->email);
                }

                Mail::to($mailto)->bcc(['ismail.husen@music.yamaha.com','nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));
            }

        } else if ($position == 'manager'){
            if (str_contains($section, 'Section')) {
                $att = [];
                FixedAssetCheck::where('asset_section', '=', $section)
                ->where('period', '=', $period)
                ->update([
                    'appr_manager_by' => Auth::user()->username.'/'.Auth::user()->name,
                    'appr_manager_at' => date('Y-m-d H:i:s'),
                ]);

                $auditor_list = FixedAssetAudit::where('asset_section', '=', $section)
                ->where('period', '=', $period)
                ->select('asset_section','checked_by')
                ->groupBy('asset_section', 'checked_by')
                ->get();

                foreach ($auditor_list as $au_list) {
                    $data_list = FixedAssetAudit::where('asset_section', '=', $section)->where('period', '=', $period)->where('checked_by', '=', $au_list->checked_by)->select('asset_section', 'location', db::raw('count(sap_number) as qty_asset'), 'period')->groupBy('asset_section','location', 'period')->get();

                    $auditor = explode('/', $au_list->checked_by)[0];

                    $mailto = db::select('SELECT email from users where username = "'.$auditor.'"');

                    $summary_data = db::select("select asset_section, 
                        SUM(IF(availability = 'Ada', 1, 0)) as ada,
                        SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
                        SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
                        SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
                        SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
                        SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
                        SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
                        from fixed_asset_checks where `status` = 'Check 2' and asset_section = '".$section."' and period = '".$period."'
                        group by asset_section");

                    $data = [
                        "datas" => $data_list,
                        "position" => 'Auditor',
                        "status" => '',
                        "data_details" => $summary_data,
                        "period" => $period,
                        "att" => $att
                    ];                

                    Mail::to($mailto[0]->email)->bcc(['ismail.husen@music.yamaha.com','nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));
                }
            } else {
               $att = [];
               FixedAssetCheck::where('location', '=', $section)
               ->where('period', '=', $period)
               ->update([
                'appr_manager_by' => Auth::user()->username.'/'.Auth::user()->name,
                'appr_manager_at' => date('Y-m-d H:i:s'),
                'remark' => 'audited',
            ]);

               $auditor_list = FixedAssetAudit::where('location', '=', $section)
               ->where('period', '=', $period)
               ->select('location','checked_by')
               ->groupBy('location', 'checked_by')
               ->get();

               foreach ($auditor_list as $au_list) {
                $data_list = FixedAssetAudit::where('location', '=', $section)->where('period', '=', $period)->where('checked_by', '=', $au_list->checked_by)->select('asset_section', 'location', db::raw('count(sap_number) as qty_asset'), 'period')->groupBy('asset_section','location', 'period')->get();

                $auditor = explode('/', $au_list->checked_by)[0];

                $mailto = db::select('SELECT email from users where username = "'.$auditor.'"');

                $summary_data = db::select("select location, 
                    SUM(IF(availability = 'Ada', 1, 0)) as ada,
                    SUM(IF(availability = 'Tidak Ada', 1, 0)) as tidak_ada,
                    SUM(IF(asset_condition = 'Rusak', 1, 0)) as rusak,
                    SUM(IF(usable_condition = 'Tidak Digunakan', 1, 0)) as tidak_digunakan,
                    SUM(IF(label_condition = 'Rusak', 1, 0)) as label_rusak,
                    SUM(IF(map_condition = 'Tidak Sesuai', 1, 0)) as map_rusak,
                    SUM(IF(asset_image_condition = 'Tidak Sesuai', 1, 0)) as image_rusak
                    from fixed_asset_checks where `status` = 'Check 2' and location = '".$section."' and period = '".$period."'
                    group by location");

                $data = [
                    "datas" => $data_list,
                    "position" => 'Auditor',
                    "status" => '',
                    "data_details" => $summary_data,
                    "period" => $period,
                    "att" => $att
                ];

                $asset_check = FixedAssetCheck::where('location', '=', $section)
                ->where('period', '=', $period)
                ->select('audit_type')
                ->get();

                if ($asset_check[0]->audit_type == 'Remote') {
                    FixedAssetAudit::where('period', '=', $period)
                    ->where('location', '=', $section)
                    ->update([
                        'status' => 'Close',
                        'checked_date' => date('Y-m-d H:i:s'),
                    ]);
                }

                Mail::to($mailto[0]->email)->bcc(['ismail.husen@music.yamaha.com','nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_check'));
            }
        }
    }
} else if($stat == 'Hold' || $stat == 'Reject'){
    $status = false;

    if ($stat == 'Hold') {
        $message2 = 'Hold & Comment';
    } else if($stat == 'Reject') {
        $message2 = 'Reject & Comment';
    }

    $stat2 = strtolower($stat);
    $nama = Auth::user()->username.'/'.Auth::user()->name;

    if ($position == 'chief') {
        FixedAssetCheck::where('asset_section', '=', $section)
        ->where('period', '=', $period)
        ->update([
            'appr_chief_by' => Auth::user()->username.'/'.Auth::user()->name,
            'appr_chief_at' => date('Y-m-d H:i:s'),
        ]);
    } else if ($position == 'manager'){
        FixedAssetCheck::where('asset_section', '=', $section)
        ->where('period', '=', $period)
        ->update([
            'appr_manager_by' => Auth::user()->username.'/'.Auth::user()->name,
            'appr_manager_at' => date('Y-m-d H:i:s'),
        ]);
    }
}

$title = 'Approval Audit Fixed Asset';
$title_jp = '??';
$message = 'Audit Fixed Asset';

$asset = FixedAssetCheck::where('asset_section', '=', $section)
->where('period', '=', $period)
->first();

return view('fixed_asset.approval_message', array(
    'title' => $title,
    'title_jp' => $title_jp,
    'message' => $message,
    'message2' => $message2,
    'asset' => $asset,
    'status' => $status,
    'status2' => $stat2,
    'nama' => $nama
))->with('page', 'Fixed Asset Approval');
}

public function reportPDFAudit($period, $section, $location)
{
    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $audit_data = FixedAssetAudit::leftJoin('fixed_asset_checks', function($join)
    {
     $join->on('fixed_asset_checks.period', '=', 'fixed_asset_audits.period');
     $join->on('fixed_asset_checks.sap_number','=', 'fixed_asset_audits.sap_number');
 })
    ->leftjoin('fixed_asset_items', 'fixed_asset_items.sap_number', '=', 'fixed_asset_audits.sap_number')
    ->where('fixed_asset_audits.period', '=', $period)
    ->where('fixed_asset_audits.asset_section', '=', $section)
    ->where('fixed_asset_audits.location', '=', $location)
    ->select('fixed_asset_audits.id','fixed_asset_audits.period', 'fixed_asset_audits.category', 'fixed_asset_audits.location', 'fixed_asset_audits.sap_number', 'fixed_asset_audits.asset_name', 'fixed_asset_audits.asset_section', 'fixed_asset_audits.asset_images', 'fixed_asset_audits.result_images', 'fixed_asset_audits.note', 'fixed_asset_audits.availability', 'fixed_asset_audits.asset_condition', 'fixed_asset_audits.label_condition', 'fixed_asset_audits.usable_condition', 'fixed_asset_audits.map_condition', 'fixed_asset_audits.asset_image_condition', 'fixed_asset_audits.checked_by', 'fixed_asset_audits.checked_date', 'fixed_asset_checks.check_one_by', 'fixed_asset_checks.check_one_at', 'fixed_asset_checks.check_two_by', 'fixed_asset_checks.check_two_at', 'fixed_asset_checks.appr_manager_by', 'fixed_asset_checks.appr_manager_at', db::raw('DATE_FORMAT("fixed_asset_items.request_date", "%Y-%b") as reg_date'), 'fixed_asset_audits.remark', 'fixed_asset_audits.audit_type')
    ->get();

    $pdf->loadView('fixed_asset.report_file.audit_report', array(
        'audit_data' => $audit_data,
    ));

    // $pdf->save(public_path() . "/payment_list/Payment ".$request->input('kind_of'). " ".date('d-M-y', strtotime($request->input('payment_date'))).".pdf");
    return $pdf->stream("Audit Fixed Asset ".$period."_".$section.".pdf");
}

public function reportPDFCheck($period, $section, $location)
{
    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $audit_data = FixedAssetAudit::leftJoin('fixed_asset_checks', function($join)
    {
     $join->on('fixed_asset_checks.period', '=', 'fixed_asset_audits.period');
     $join->on('fixed_asset_checks.sap_number','=', 'fixed_asset_audits.sap_number');
 })
    ->leftjoin('fixed_asset_items', 'fixed_asset_items.sap_number', '=', 'fixed_asset_audits.sap_number')
    ->where('fixed_asset_audits.period', '=', $period)
    ->where('fixed_asset_audits.asset_section', '=', $section)
    ->where('fixed_asset_audits.location', '=', $location)
    ->select('fixed_asset_audits.id','fixed_asset_audits.period', 'fixed_asset_audits.category', 'fixed_asset_audits.location', 'fixed_asset_audits.sap_number', 'fixed_asset_audits.asset_name', 'fixed_asset_audits.asset_section', 'fixed_asset_audits.asset_images', 'fixed_asset_audits.result_images', 'fixed_asset_audits.note', 'fixed_asset_checks.availability', 'fixed_asset_checks.asset_condition', 'fixed_asset_checks.label_condition', 'fixed_asset_checks.usable_condition', 'fixed_asset_checks.map_condition', 'fixed_asset_checks.asset_image_condition', 'fixed_asset_audits.checked_by', 'fixed_asset_audits.checked_date', 'fixed_asset_checks.check_one_by', 'fixed_asset_checks.check_one_at', 'fixed_asset_checks.check_two_by', 'fixed_asset_checks.check_two_at', 'fixed_asset_checks.appr_manager_by', 'fixed_asset_checks.appr_manager_at', db::raw('DATE_FORMAT("fixed_asset_items.request_date", "%Y-%b") as reg_date'))
    ->get();

    $pdf->loadView('fixed_asset.report_file.audit_report', array(
        'audit_data' => $audit_data,
    ));

    // $pdf->save(public_path() . "/payment_list/Payment ".$request->input('kind_of'). " ".date('d-M-y', strtotime($request->input('payment_date'))).".pdf");
    return $pdf->stream("Audit Fixed Asset ".$period."_".$section.".pdf");
}

    //=============================================================//
    //                     Payment Request                         //
    //=============================================================//

public function IndexPaymentRequest(){

    $title = "Payment Request";
    $title_jp = "支払リクエスト";

    $employees = EmployeeSync::orderBy('department', 'asc')->get();

    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $payment_term = AccInvoicePaymentTerm::select('*')->whereNull('deleted_at')
    ->distinct()
    ->get();

    return view('accounting_purchasing.payment_request.index_payment', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'employees' => $employees,
        'vendor' => $vendor,
        'payment_term' => $payment_term
    ));
}

public function fetchPaymentRequest(){
    $payment = db::select("SELECT *
        FROM
        acc_payment_requests
        order by id desc
        ");

    $response = array(
        'status' => true,
        'payment' => $payment
    );
    return Response::json($response);
}

public function fetchPaymentRequestDetail(Request $request){

    $payment = AccPaymentRequest::find($request->get('id'));

    // $employees = EmployeeSync::orderBy('department', 'asc')->get();

    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $payment_term = AccInvoicePaymentTerm::select('*')->whereNull('deleted_at')
    ->distinct()
    ->get();

    $payment_detail = AccPaymentRequestDetail::select('acc_payment_request_details.*','acc_invoices.file')
    ->join('acc_invoices','acc_payment_request_details.id_invoice','=','acc_invoices.id')
    ->where('id_payment',$request->get('id'))
    ->whereNull('acc_payment_request_details.deleted_at')
    ->get();


    $response = array(
        'status' => true,
        'payment' => $payment,
        'vendor' => $vendor,
        'payment_term' => $payment_term,
        'payment_detail' => $payment_detail
    );
    return Response::json($response);
}

public function createPaymentRequest(Request $request){
    try{

        $manager = null;
        $manager_name = null;
        $dgm = null;
        $gm = null;

        // $tujuan_upload = 'files/payment';

        // $file = $request->file('file_attach');
        // if ($file != null || $file != "") {
        //     $nama = $file->getClientOriginalName();
        //     $filename = pathinfo($nama, PATHINFO_FILENAME);
        //     $extension = pathinfo($nama, PATHINFO_EXTENSION);
        //     $filename = md5($filename.date('YmdHisa')).'.'.$extension;
        //     $file->move($tujuan_upload,$filename);
        // }else{
        //     $filename = null;
        // }

        if($request->input('kind_of') == "Electricity" || $request->input('kind_of') == "Gas" || $request->input('kind_of') == "Water")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Maintenance Department' and position like 'manager%'");
        }

        if ($manag != null)
        {
            foreach ($manag as $mg)
            {
                $manager = $mg->employee_id;
                $manager_name = $mg->name;
            }

            $dgm = $this->dgm;
            $gm = $this->gm;
        }
        else{
            $manager = null;
            $manager_name = null;
            $dgm = null;
            $gm = null;
        }

        $id = 0;

        $nomor = DB::select("SELECT id FROM `acc_payment_requests` ORDER BY id DESC LIMIT 1");

        if ($nomor != null){
            $id = (int)$nomor[0]->id + 1;
        }
        else{
            $id = 1;
        }

        $payment = new AccPaymentRequest([
            'payment_date' => $request->input('payment_date'),
            'supplier_code' => $request->input('supplier_code'),
            'supplier_name' => $request->input('supplier_name'),
            'currency' => $request->input('currency'),
            'payment_term' => $request->input('payment_term'),
            'payment_due_date' => $request->input('payment_due_date'),
            'amount' => $request->input('amount'),
            'kind_of' => $request->input('kind_of'),
            'attach_document' => $request->input('attach_document'),
            'file' => $filename,
            'pdf' => 'Payment '.$request->input('supplier_name').' '.date('d-M-y', strtotime($request->input('payment_date'))).' ('.$id.').pdf',
            'posisi' => 'user', 
            'status' => 'approval', 
            'manager' => $manager,
            'manager_name' => $manager_name,
            'dgm' => $dgm, 
            'gm' => $gm,
            'created_by' => Auth::user()->username,
            'created_name' => Auth::user()->name
        ]);

        $payment->save();

        $payment_data = AccPaymentRequest::where('id','=',$payment->id)->first();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
            'payment' => $payment_data,
            'id' => $payment->id
        ));

        
        $pdf->save(public_path() . "/payment_list/Payment ".$request->input('supplier_name'). " ".date('d-M-y', strtotime($request->input('payment_date')))." (".$payment->id.").pdf");


        $response = array(
            'status' => true,
            'message' => 'New Payment Request Successfully Added'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function editPaymentRequest(Request $request){
    try{
        $payment = AccPaymentRequest::where('id', '=', $request->get('id_edit'))->first();

        // $file = $request->file('file_attach');
        // $tujuan_upload = 'files/payment';

        // if ($file != null || $file != "") {
        //     $nama = $file->getClientOriginalName();
        //     $filename = pathinfo($nama, PATHINFO_FILENAME);
        //     $extension = pathinfo($nama, PATHINFO_EXTENSION);
        //     $filename = md5($filename.date('YmdHisa')).'.'.$extension;
        //     $file->move($tujuan_upload,$filename);
        // }else{
        //     $filename = $payment->file;
        // }

        // $document_attach = "";

        // if ($request->input('attach_document') != null || $request->input('attach_document') != "") {
        //     $document_attach = $request->input('attach_document');
        // }
        // else{
        //     $document_attach = $payment->attach_document;
        // }

        $payment->payment_date = $request->input('payment_date');
        $payment->supplier_code = $request->input('supplier_code');
        $payment->supplier_name = $request->input('supplier_name');
        $payment->currency = $request->input('currency');
        $payment->payment_term = $request->input('payment_term');
        $payment->payment_due_date = $request->input('payment_due_date');
        $payment->amount = $request->input('amount');
        $payment->kind_of = $request->input('kind_of');
        $payment->attach_document = $request->input('attach_document');
        // $payment->file = $filename;
        $payment->created_by = Auth::user()->username;
        $payment->save();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
            'payment' => $payment,
            'id' => $payment->id
        ));

        $pdf->save(public_path() . "/payment_list/Payment ".$request->input('supplier_name'). " ".date('d-M-y', strtotime($request->input('payment_date')))." (".$payment->id.").pdf");

        // $pdf->save(public_path() . "/payment_list/Payment ".$request->input('kind_of'). " ".date('d-M-y', strtotime($request->input('payment_date'))).".pdf");

        $response = array(
            'status' => true,
            'message' => 'Payment Request Updated'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function reportPaymentRequest($id){
    $payment = AccPaymentRequest::find($id);
    $payment_detail = AccPaymentRequestDetail::select('*')
    ->where('id_payment',$id)
    ->whereNull('deleted_at')
    ->get();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
        'payment' => $payment,
        'payment_detail' => $payment_detail,
        'id' => $id
    ));
    return $pdf->stream("Payment ".$payment->supplier_name. " ".date('d-M-y', strtotime($payment->payment_date)).".pdf");
}

public function emailPaymentRequest(Request $request){
    $pr = AccPaymentRequest::find($request->get('id'));

    try{
        if ($pr->posisi == "user")
        {
            $mails = "select distinct email from acc_payment_requests join users on acc_payment_requests.manager = users.username where acc_payment_requests.id = ".$request->get('id');
            $mailtoo = DB::select($mails);

            $pr->posisi = "manager";
            $pr->save();

            $isimail = "select acc_payment_requests.*, acc_payment_request_details.id_invoice, acc_payment_request_details.invoice, acc_payment_request_details.amount as amount_detail, net_payment,acc_invoices.file as attach_file,acc_invoices.mirai_amount from acc_payment_requests join acc_payment_request_details on acc_payment_requests.id = acc_payment_request_details.id_payment join acc_invoices on acc_payment_request_details.id_invoice = acc_invoices.id where acc_payment_requests.id = ".$request->get('id');

            // $isimail = "select * from acc_payment_requests where acc_payment_requests.id = ".$request->get('id');
            $payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($payment, 'payment_request'));

            $response = array(
              'status' => true,
              'datas' => "Berhasil"
          );

            return Response::json($response);
        }
    } 
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'datas' => "Gagal"
      );
        return Response::json($response);
    }
}


public function payment_resend_email(Request $request){
    $pr = AccPaymentRequest::find($request->get('id'));

    try{
        if ($pr->posisi == "manager")
        {
            $mails = "select distinct email from acc_payment_requests join users on acc_payment_requests.manager = users.username where acc_payment_requests.id = ".$request->get('id');
            $mailtoo = DB::select($mails);
        }

        if ($pr->posisi == "gm")
        {
            $mails = "select distinct email from acc_payment_requests join users on acc_payment_requests.gm = users.username where acc_payment_requests.id = ".$request->get('id');
            $mailtoo = DB::select($mails);
        }

        $isimail = "select acc_payment_requests.*, acc_payment_request_details.id_invoice, acc_payment_request_details.invoice, acc_payment_request_details.amount as amount_detail, net_payment,acc_invoices.file as attach_file,acc_invoices.mirai_amount from acc_payment_requests join acc_payment_request_details on acc_payment_requests.id = acc_payment_request_details.id_payment join acc_invoices on acc_payment_request_details.id_invoice = acc_invoices.id where acc_payment_requests.id = ".$request->get('id');
        
        $payment = db::select($isimail);

        Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($payment, 'payment_request'));

        $response = array(
          'status' => true,
          'datas' => "Berhasil"
      );

        return Response::json($response);
    }
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'datas' => "Gagal"
      );
        return Response::json($response);
    }
}


public function paymentapprovalmanager($id){
    $pr = AccPaymentRequest::find($id);

    $payment_detail = AccPaymentRequestDetail::select('*')
    ->where('id_payment',$id)
    ->whereNull('deleted_at')
    ->get();

    try{
        if ($pr->posisi == "manager")
        {
            if ($pr->dgm != null) {
                $pr->posisi = "dgm";
                $pr->status_manager = "Approved/".date('Y-m-d H:i:s');

                $mailto = "select distinct email from acc_payment_requests join users on acc_payment_requests.dgm = users.username where acc_payment_requests.id = '" . $id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                $pr->save();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'potrait');

                $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
                    'payment' => $pr,
                    'payment_detail' => $payment_detail,
                    'id' => $id
                ));

                $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");

                // $isimail = "select * from acc_payment_requests where acc_payment_requests.id = ".$id;

                $isimail = "select acc_payment_requests.*, acc_payment_request_details.id_invoice, acc_payment_request_details.invoice, acc_payment_request_details.amount as amount_detail, net_payment,acc_invoices.file as attach_file,acc_invoices.mirai_amount from acc_payment_requests join acc_payment_request_details on acc_payment_requests.id = acc_payment_request_details.id_payment join acc_invoices on acc_payment_request_details.id_invoice = acc_invoices.id where acc_payment_requests.id = ".$id;

                $payment = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($payment, 'payment_request'));

                $message = 'Payment Request '.$pr->supplier_name;
                $message2 ='Successfully Approved';
            }

            else{

                $pr->posisi = "gm";
                $pr->status_manager = "Approved/".date('Y-m-d H:i:s');

                $mailto = "select distinct email from acc_payment_requests join users on acc_payment_requests.gm = users.username where acc_payment_requests.id = '" . $id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                $pr->save();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'potrait');

                $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
                    'payment' => $pr,
                    'payment_detail' => $payment_detail,
                    'id' => $id
                ));

                $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");

                // $isimail = "select * from acc_payment_requests where acc_payment_requests.id = ".$id;

                $isimail = "select acc_payment_requests.*, acc_payment_request_details.id_invoice, acc_payment_request_details.invoice, acc_payment_request_details.amount as amount_detail, net_payment,acc_invoices.file as attach_file,acc_invoices.mirai_amount from acc_payment_requests join acc_payment_request_details on acc_payment_requests.id = acc_payment_request_details.id_payment join acc_invoices on acc_payment_request_details.id_invoice = acc_invoices.id where acc_payment_requests.id = ".$id;


                $payment = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($payment, 'payment_request'));

                $message = 'Payment Request '.$pr->supplier_name;
                $message2 ='Successfully Approved';


                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'potrait');

                $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
                    'payment' => $pr,
                    'payment_detail' => $payment_detail,
                    'id' => $id
                ));

                $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");
            }
        }
        else{
            $message = 'Payment Request '.$pr->supplier_name;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->supplier_name,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Payment Request');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->supplier_name,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Payment Request');
    }
}

public function paymentapprovaldgm($id){
    $pr = AccPaymentRequest::find($id);
    $payment_detail = AccPaymentRequestDetail::select('*')
    ->where('id_payment',$id)
    ->whereNull('deleted_at')
    ->get();
    try{
        if ($pr->posisi == "dgm")
        {
            $pr->posisi = "gm";
            $pr->status_dgm = "Approved/".date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_payment_requests join users on acc_payment_requests.gm = users.username where acc_payment_requests.id = '" . $pr->id . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $pr->save();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
                'payment' => $pr,
                'payment_detail' => $payment_detail,
                'id' => $id
            ));

            $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");

            // $isimail = "select * from acc_payment_requests where acc_payment_requests.id = ".$id;

            $isimail = "select acc_payment_requests.*, acc_payment_request_details.id_invoice, acc_payment_request_details.invoice, acc_payment_request_details.amount as amount_detail, net_payment,acc_invoices.file as attach_file,acc_invoices.mirai_amount from acc_payment_requests join acc_payment_request_details on acc_payment_requests.id = acc_payment_request_details.id_payment join acc_invoices on acc_payment_request_details.id_invoice = acc_invoices.id where acc_payment_requests.id = ".$id;

            $payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($payment, 'payment_request'));

            $message = 'Payment Request '.$pr->supplier_name;
            $message2 ='Successfully Approved';

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
                'payment' => $pr,
                'payment_detail' => $payment_detail,
                'id' => $id
            ));

            $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");
        }
        else{
            $message = 'Payment Request '.$pr->supplier_name;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->kind_of,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Payment Request');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->kind_of,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Payment Request');
    }
}

public function paymentapprovalgm($id){
    $pr = AccPaymentRequest::find($id);
    $payment_detail = AccPaymentRequestDetail::select('*')
    ->where('id_payment',$id)
    ->whereNull('deleted_at')
    ->get();

    try{
        if ($pr->posisi == "gm")
        {
            $pr->posisi = 'acc_verif';
            $pr->status_gm = "Approved/".date('Y-m-d H:i:s');

            $payment_detail = AccPaymentRequestDetail::select('*')
            ->where('id_payment',$id)
            ->whereNull('deleted_at')
            ->get();

            foreach($payment_detail as $payment){
                $updatePayment = AccInvoice::where('id','=',$payment->id_invoice)
                ->update([
                    'payment_status' => 'payment_acc'
                ]);
            }

                //kirim email ke Mbak Laila & Mbak Afifah
            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and employee_syncs.department = 'Accounting Department' and (employee_id = 'PI0902001'  or employee_id = 'PI1505001')";
            $mailtoo = DB::select($mails);

            $pr->save();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
                'payment' => $pr,
                'payment_detail' => $payment_detail,
                'id' => $id
            ));

            $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");

            // $isimail = "select * from acc_payment_requests where acc_payment_requests.id = ".$id;
            $isimail = "select acc_payment_requests.*, acc_payment_request_details.id_invoice, acc_payment_request_details.invoice, acc_payment_request_details.amount as amount_detail, net_payment,acc_invoices.file as attach_file,acc_invoices.mirai_amount from acc_payment_requests join acc_payment_request_details on acc_payment_requests.id = acc_payment_request_details.id_payment join acc_invoices on acc_payment_request_details.id_invoice = acc_invoices.id where acc_payment_requests.id = ".$id;

            $payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($payment, 'payment_request'));

            $message = 'Payment Request '.$pr->supplier_name;
            $message2 ='Successfully Approved';

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
                'payment' => $pr,
                'payment_detail' => $payment_detail,
                'id' => $id
            ));

            $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");
        }
        else{
            $message = 'Payment Request '.$pr->supplier_name;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->supplier_name,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Payment Request');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->supplier_name,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Payment Request');
    }
}

public function paymentreceiveacc($id){
    $pr = AccPaymentRequest::find($id);
    try{
        if ($pr->posisi == "acc")
        {
            $pr->posisi = 'received';
            $pr->status_dgm = "Approved/".date('Y-m-d H:i:s');
            $pr->status = "received";

            $pr->save();

            $message = 'Payment Request '.$pr->supplier_name;
            $message2 ='Successfully Received';
        }
        else{
            $message = 'Payment Request '.$pr->supplier_name;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->supplier_name,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Payment Request');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $pr->supplier_name,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Payment Request');
    }
}

public function paymentreject(Request $request, $id)
{
    $pr = AccPaymentRequest::find($id);

    if ($pr->posisi == "manager" || $pr->posisi == "gm"  || $pr->posisi == "acc_verif")
    {
        $pr->datereject = date('Y-m-d H:i:s');
        $pr->posisi = "user";
        $pr->status_manager = null;
        $pr->status_gm = null;
    }

    $pr->save();

    $isimail = "select * from acc_payment_requests where acc_payment_requests.id = ".$id;
    $tolak = db::select($isimail);

        //kirim email ke User
    $mails = "select distinct email from acc_payment_requests join users on acc_payment_requests.created_by = users.username where acc_payment_requests.id ='" . $id . "'";
    $mailtoo = DB::select($mails);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'payment_request'));

    $message = 'Payment Request '.$pr->supplier_name;
    $message2 = 'Not Approved';

    return view('accounting_purchasing.verifikasi.pr_message', array(
        'head' => $pr->kind_of,
        'message' => $message,
        'message2' => $message2,
    ))->with('page', 'Payment Request');
}

public function verifikasi_purchase_requisition_canteen($id)
{
    $pr = CanteenPurchaseRequisition::find($id);

    $items = CanteenPurchaseRequisitionItem::select('canteen_purchase_requisition_items.*')->join('canteen_purchase_requisitions', 'canteen_purchase_requisition_items.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
    ->where('canteen_purchase_requisitions.id', '=', $id)->get();

    $path = '/kantin/pr_list/' . $pr->file_pdf;            
    $file_path = asset($path);

    return view('accounting_purchasing.verifikasi.pr_verifikasi_canteen', array(
        'pr' => $pr,
        'items' => $items,
        'file_path' => $file_path,
    ))->with('page', 'Purchase Requisition Canteen');
}

public function approval_purchase_requisition_canteen(Request $request, $id)
{
    $approve = $request->get('approve');

    if ($approve == "1") {

        $pr = CanteenPurchaseRequisition::find($id);

        if ($pr->posisi == "manager")
        {
            $pr->posisi = "gm";
            $pr->approvalm = "Approved";
            $pr->dateapprovalm = date('Y-m-d H:i:s');

            $mailto = "select distinct email from canteen_purchase_requisitions join users on canteen_purchase_requisitions.gm = users.username where canteen_purchase_requisitions.id = '" . $pr->id . "'";
            $mails = DB::select($mailto);

            // $pr->posisi = 'pch';
            // $pr->approvalm = "Approved";
            // $pr->dateapprovalm = date('Y-m-d H:i:s');
            // $pr->status = "approval_acc";
            // $pr->approvalgm = "Approved";
            // $pr->dateapprovalgm = date('Y-m-d H:i:s');

            // $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
            // $mailtoo = DB::select($mails);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }
        }

        else if ($pr->posisi == "gm")
        {

            $pr->posisi = 'pch';
            $pr->approvalgm = "Approved";
            $pr->dateapprovalgm = date('Y-m-d H:i:s');
            $pr->status = "approval_acc";

                //kirim email ke Mas Shega & Mas Hamzah
            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020'  or employee_id = 'PI0904006' or employee_id = 'PI1506001')";
            $mailtoo = DB::select($mails);
        }

        $pr->save();

        $detail_pr = CanteenPurchaseRequisition::select('canteen_purchase_requisitions.*','canteen_purchase_requisition_items.*','canteen_budget_histories.beg_bal','canteen_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = canteen_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
        ->leftJoin('canteen_purchase_requisition_items', 'canteen_purchase_requisitions.no_pr', '=', 'canteen_purchase_requisition_items.no_pr')
        ->join('canteen_budget_histories', function($join) {
            $join->on('canteen_budget_histories.category_number', '=', 'canteen_purchase_requisition_items.no_pr');
            $join->on('canteen_budget_histories.no_item','=', 'canteen_purchase_requisition_items.item_desc');
        })
        ->where('canteen_purchase_requisitions.id', '=', $id)
        ->distinct()
        ->get();

        $exchange_rate = AccExchangeRate::select('*')
        ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
        ->where('currency','!=','USD')
        ->orderBy('currency','ASC')
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('general_affairs.report.report_pr', array(
            'pr' => $detail_pr,
            'rate' => $exchange_rate
        ));

        $pdf->save(public_path() . "/kantin/pr_list/PR".$detail_pr[0]->no_pr.".pdf");

        $isimail = "select canteen_purchase_requisitions.*,canteen_purchase_requisition_items.item_desc, canteen_purchase_requisition_items.item_request_date, canteen_purchase_requisition_items.item_qty, canteen_purchase_requisition_items.item_uom, canteen_purchase_requisition_items.item_price, canteen_purchase_requisition_items.item_amount FROM canteen_purchase_requisitions join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr where canteen_purchase_requisitions.id = ".$id;
        $purchaserequisition = db::select($isimail);

        Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($purchaserequisition, 'canteen_purchase_requisition'));

        return redirect('/canteen/purchase_requisition/verifikasi/' . $id)->with('status', 'PR Canteen Approved')
        ->with('page', 'Purchase Requisition Canteen');
    }
    else
    {
        return redirect('/canteen/purchase_requisition/verifikasi/' . $id)->with('error', 'PR Canteen Not Approved')
        ->with('page', 'Purchase Requisition Canteen');
    }
}

public function reject_purchase_requisition_canteen(Request $request, $id)
{
    $alasan = $request->get('alasan');

    $pr = CanteenPurchaseRequisition::find($id);

    if ($pr->posisi == "manager" || $pr->posisi == "gm")
    {
        $pr->alasan = $alasan;
        $pr->datereject = date('Y-m-d H:i:s');
        $pr->posisi = "user";
        $pr->approvalm = null;
        $pr->dateapprovalm = null;
    }

    $pr->save();

    $isimail = "select canteen_purchase_requisitions.*,canteen_purchase_requisition_items.item_desc, canteen_purchase_requisition_items.item_request_date, canteen_purchase_requisition_items.item_qty, canteen_purchase_requisition_items.item_uom, canteen_purchase_requisition_items.item_price, canteen_purchase_requisition_items.item_amount FROM canteen_purchase_requisitions join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr where canteen_purchase_requisitions.id = ".$pr->id;

    $tolak = db::select($isimail);

        //kirim email ke User
    $mails = "select distinct email from canteen_purchase_requisitions join users on canteen_purchase_requisitions.emp_id = users.username where canteen_purchase_requisitions.id ='" . $pr->id . "'";
    $mailtoo = DB::select($mails);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'canteen_purchase_requisition'));
    return redirect('/canteen/purchase_requisition/verifikasi/' . $id)->with('status', 'PR Canteen Not Approved')
    ->with('page', 'Purchase Requisition Canteen');
}


public function monitoringPRCanteen(){

    $dept = db::select("SELECT department_name as department FROM `departments`");

    return view('accounting_purchasing.display.pr_canteen_monitoring',  
        array(
          'title' => 'Purchase Requisition Canteen Monitoring', 
          'title_jp' => 'PR監視・管理',
          'department' => $dept,
      )
    )->with('page', 'Purchase Requisition Canteen');
}

public function fetchMonitoringPRCanteen(Request $request){

  $datefrom = date("Y-m-d", strtotime('-30 days'));
  $dateto = date("Y-m-d");

  $last = CanteenPurchaseRequisition::whereNull('receive_date')
  ->orderBy('tanggal', 'asc')
  ->select(db::raw('date(submission_date) as tanggal'))
  ->first();

  if(strlen($request->get('datefrom')) > 0){
    $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
}
else{
    if($last){
      $tanggal = date_create($last->tanggal);
      $now = date_create(date('Y-m-d'));
      $interval = $now->diff($tanggal);
      $diff = $interval->format('%a%');

      if($diff > 30){
        $datefrom = date('Y-m-d', strtotime($last->tanggal));
    }
}
}

if(strlen($request->get('dateto')) > 0){
    $dateto = date('Y-m-d', strtotime($request->get('dateto')));
}

        //per tgl
$data = db::select("
 select date.week_date, coalesce(belum_diterima.total, 0) as jumlah_belum, coalesce(sudah_diterima.total, 0) as jumlah_sudah from 
 (select week_date from weekly_calendars 
 where date(week_date) >= '".$datefrom."'
 and date(week_date) <= '".$dateto."') date
 left join
 (select date(submission_date) as date, count(id) as total from canteen_purchase_requisitions
 where date(submission_date) >= '".$datefrom."' and date(submission_date) <= '".$dateto."' and canteen_purchase_requisitions.deleted_at is null and receive_date is null 
 group by date(submission_date)) belum_diterima
 on date.week_date = belum_diterima.date
 left join
 (select date(submission_date) as date, count(id) as total from canteen_purchase_requisitions
 where date(submission_date) >= '".$datefrom."' and date(submission_date) <= '".$dateto."' and canteen_purchase_requisitions.deleted_at is null and receive_date is not null
 group by date(submission_date)) sudah_diterima
 on date.week_date = sudah_diterima.date
 order by week_date asc");

$data_pr_belum_po = db::select("
    select canteen_purchase_requisitions.no_pr, sum(case when sudah_po is null then 1 else 0 end) as belum_po, sum(case when sudah_po is not null then 1 else 0 end) as sudah_po from canteen_purchase_requisitions left join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr where canteen_purchase_requisitions.deleted_at is null and receive_date is not null GROUP BY no_pr order by submission_date asc");

$year = date('Y');

$response = array(
    'status' => true,
    'datas' => $data,
    'data_pr_belum_po' => $data_pr_belum_po,
    'year' => $year
);

return Response::json($response);
}


public function fetchtablePRCanteen(Request $request)
{
  $datefrom = $request->get('datefrom');
  $dateto = $request->get('dateto');

  if ($datefrom == "") {
      $datefrom = date('Y-m', strtotime(carbon::now()->subMonth(11)));
  }

  if ($dateto == "") {
      $dateto = date('Y-m', strtotime(carbon::now()));
  }

  $data = db::select("select id, no_pr, emp_id, emp_name, department, section, no_budget, submission_date, receive_date, file, posisi, `status`, manager, manager_name, (select `name` from employee_syncs where employee_id = gm) as gm , approvalm, dateapprovalm, approvalgm, dateapprovalgm, alasan, datereject from canteen_purchase_requisitions where canteen_purchase_requisitions.STATUS != 'received' and canteen_purchase_requisitions.deleted_at is null and DATE_FORMAT(submission_date,'%Y-%m') between '".$datefrom."' and '".$dateto."' order by submission_date asc");


  $data_pr_belum_po = db::select("select canteen_purchase_requisitions.no_pr,canteen_purchase_requisitions.receive_date, canteen_purchase_requisitions.department, canteen_purchase_requisition_items.item_code, canteen_purchase_requisition_items.item_desc, canteen_purchase_requisition_items.item_request_date from canteen_purchase_requisitions left join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr where canteen_purchase_requisitions.deleted_at is null and receive_date is not null and sudah_po is null and DATE_FORMAT(submission_date,'%Y-%m') between '".$datefrom."' and '".$dateto."' order by item_request_date ASC");

  $response = array(
    'status' => true,
    'datas' => $data,
    'data_pr_belum_po' => $data_pr_belum_po
);

  return Response::json($response); 
}

public function detailMonitoringPRCanteen(Request $request){

  $tanggal = $request->get("tanggal");
  $status = $request->get("status");
  $tglfrom = $request->get("tglfrom");
  $tglto = $request->get("status");

  $status_sign = "";

  if ($status == "PR Incompleted") {
      $status_sign = "and receive_date is null";
  }
  else if ($status == "PR Completed") {
      $status_sign = "and receive_date is not null";
  }

  $qry = "SELECT  * FROM canteen_purchase_requisitions WHERE deleted_at IS NULL and submission_date = '".$tanggal."' and DATE_FORMAT(submission_date,'%Y-%m') between '".$tglfrom."' and '".$tglto."' ".$status_sign." ";

  $pr = DB::select($qry);

  return DataTables::of($pr)
  ->editColumn('submission_date', function ($pr)
  {
    return $pr->submission_date;
})
  ->editColumn('note', function ($pr)
  {
    $note = "";
    if ($pr->note != null)
    {
        $note = $pr->note;
    }
    else
    {
        $note = '-';
    }

    return $note;
})
  ->editColumn('status', function ($pr)
  {
    $id = $pr->id;

    if ($pr->status == "approval")
    {
        return '<label class="label label-warning">Approval</a>';
    }
    else if ($pr->status == "approval_acc")
    {
        return '<label class="label label-info">Diverifikasi Purchasing</a>';
    }
    else if ($pr->status == "received")
    {
        return '<label class="label label-success">Diterima Purchasing</a>';
    }

})
  ->addColumn('action', function ($pr)
  {
    $id = $pr->id;

                    // <a href="purchase_requisition/detail/' . $id . '" class="btn btn-info btn-xs" data-toggle="tooltip" title="Detail PR"><i class="fa fa-eye"></i></a>

    if($pr->status == "approval"){
        return '
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        ';
    }
    else{
        return '
        <a href="report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" style="margin-right:5px;" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        ';
    }


})
  ->editColumn('file', function ($pr)
  {

    $data = json_decode($pr->file);

    $fl = "";

    if ($pr->file != null)
    {
        for ($i = 0;$i < count($data);$i++)
        {
            $fl .= '<a href="../files/pr_kantin/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
        }
    }
    else
    {
        $fl = '-';
    }

    return $fl;
})
  ->rawColumns(['status' => 'status', 'action' => 'action', 'file' => 'file'])
  ->make(true);
}

public function detailMonitoringPRPOCanteen(Request $request){

    $pr = $request->get("pr");
    $status = $request->get("status");
    $tglfrom = $request->get("tglfrom");
    $tglto = $request->get("status");

    $status_sign = "";

    if ($status == "Belum PO") {
        $status_sign = "and sudah_po is null";
    }
    else if ($status == "Sudah PO") {
        $status_sign = "and sudah_po is not null";
    }


    $qry = "SELECT canteen_purchase_requisitions.no_pr,canteen_purchase_requisitions.submission_date, canteen_purchase_requisition_items.*, (select DATE(created_at) from canteen_purchase_order_details where canteen_purchase_order_details.no_item = canteen_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order, (select supplier_name from canteen_purchase_order_details join canteen_purchase_orders on canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po where canteen_purchase_order_details.no_item = canteen_purchase_requisition_items.item_code ORDER BY canteen_purchase_order_details.created_at desc limit 1) as last_vendor from canteen_purchase_requisitions left join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr WHERE canteen_purchase_requisition_items.deleted_at is NULL and canteen_purchase_requisitions.no_pr = '".$pr."' and DATE_FORMAT(submission_date,'%Y-%m') between '".$tglfrom."' and '".$tglto."' ".$status_sign." ";

    $pr = DB::select($qry);

    return DataTables::of($pr)
    ->editColumn('item_request_date', function ($pr)
    {
        return date('d-M-Y', strtotime($pr->item_request_date)) ;
    })
    ->editColumn('item_qty', function ($pr)
    {
        return $pr->item_qty.' '.$pr->item_uom;
    })
    ->editColumn('item_price', function ($pr)
    {
        return number_format($pr->item_price,0,",",".");
    })
    ->editColumn('item_amount', function ($pr)
    {
        return number_format($pr->item_amount,0,",",".");
    })
    ->editColumn('last_order', function ($pr)
    {
        if ($pr->last_order != null) {
            return date('d-M-Y', strtotime($pr->last_order)) ;
        }
        else{
            return '-';
        }
    })

    ->editColumn('status', function ($pr)
    {
        if ($pr->sudah_po == null) {
            return '<span class="label label-danger">Belum PO</span>';
        }
        else if ($pr->sudah_po != null) {
            return '<span class="label label-success">Sudah PO</span>';
        }
    })
    ->rawColumns(['status' => 'status'])
    ->make(true);
}


    //==================================//
    //      Purchase Order Kantin       //
    //==================================//

public function purchase_order_canteen()
{
    $title = 'Purchase Order Canteen';
    $title_jp = '';

    $emp = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
    ->first();

    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $authorized2 = EmployeeSync::select('employee_id', 'name')
    ->where('position', 'like', 'Manager%')
    ->where('department', 'like', '%Procurement%')
    ->first();

    return view('accounting_purchasing.kantin.purchase_order_kantin', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'employee' => $emp,
        'vendor' => $vendor,
        'delivery' => $this->delivery,
        'transportation' => $this->transportation,
        'authorized2' => $authorized2,
        'uom' => $this->uom_kantin
    ))
    ->with('page', 'Purchase Order Canteen')
    ->with('head', 'Purchase Order Canteen');
}

public function fetch_purchase_order_canteen(Request $request)
{
    $tanggal = "";
    $adddepartment = "";

    if (strlen($request->get('datefrom')) > 0)
    {
        $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
        $tanggal = "and A.tgl_po >= '" . $datefrom . " 00:00:00' ";
        if (strlen($request->get('dateto')) > 0)
        {
            $dateto = date('Y-m-d', strtotime($request->get('dateto')));
            $tanggal = $tanggal . "and A.tgl_po  <= '" . $dateto . " 23:59:59' ";
        }
    }

    $qry = "SELECT * FROM canteen_purchase_orders A WHERE A.deleted_at IS NULL " . $tanggal . " order by A.id DESC";
    $po = DB::select($qry);

    return DataTables::of($po)

    ->editColumn('tgl_po', function ($po)
    {
        return date('Y-m-d', strtotime($po->tgl_po));
    })

    ->editColumn('status', function ($po)
    {
        $id = $po->id;

        if ($po->posisi == "staff_pch")
        {
            return '<label class="label label-danger">Staff Purchasing</label>';
        }

        else if ($po->posisi == "manager_pch")
        {
            return '<label class="label label-warning">Diverifikasi Manager</label>';
        }

        else if ($po->posisi == "pch")
        {
            return '<label class="label label-success">Sudah Diverifikasi</label>';
        }

    })
    ->addColumn('action', function ($po)
    {
        $id = $po->id;
        if ($po->posisi == "staff_pch") {
            return '
            <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
            <a href="canteen/purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
            <button class="btn btn-xs btn-success" data-toggle="tooltip" title="Send Email" style="margin-right:5px;"  onclick="sendEmail(' . $id .')"><i class="fa fa-envelope"></i> Send Email</button>
            <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="cancelPO('.$id.')" data-toggle="modal" data-target="#modalcancelPO"  title="Delete PO"><i class="fa fa-trash"></i> Delete PO</a>
            ';
        }

        else if ($po->posisi == "pch") {
            return '
            <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
            <a href="canteen/purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"> Report</i></a>
            <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="cancelPO('.$id.')" data-toggle="modal" data-target="#modalcancelPO"  title="Cancel PO"><i class="fa fa-close"></i> Cancel PO</a>
            ';
        }

        else{
            return '
            <a href="javascript:void(0)" data-toggle="modal" class="btn btn-xs btn-warning" class="btn btn-primary btn-sm" onClick="editPO(' . $id . ')"><i class="fa fa-edit"></i> Edit</a>
            <a href="canteen/purchase_order/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="PO Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
            <button class="btn btn-xs btn-primary" data-toggle="tooltip" title="Resend Email" style="margin-right:5px;"  onclick="ResendEmail(' . $id .')"><i class="fa fa-envelope"></i> Resend Email</button>
            ';   
        }
    })
    ->rawColumns(['status' => 'status', 'action' => 'action'])
    ->make(true);
}

public function fetch_po_outstanding_canteen(Request $request)
{
    $qry = "SELECT distinct canteen_purchase_requisitions.id, canteen_purchase_requisitions.no_pr,department,submission_date,emp_id,emp_name,no_budget,file,posisi,`status`,file_pdf FROM `canteen_purchase_requisitions` join canteen_purchase_requisition_items on canteen_purchase_requisitions.no_pr = canteen_purchase_requisition_items.no_pr where receive_date is not null and canteen_purchase_requisition_items.sudah_po is null and canteen_purchase_requisitions.deleted_at is null";
    $pr = DB::select($qry);

    return DataTables::of($pr)

    ->editColumn('submission_date', function ($pr)
    {
        return $pr->submission_date;
    })

    ->editColumn('file', function ($pr)
    {
        $data = json_decode($pr->file);

        $fl = "";

        if ($pr->file != null)
        {
            for ($i = 0;$i < count($data);$i++)
            {
                $fl .= '<a href="files/pr_kantin/' . $data[$i] . '" target="_blank" class="fa fa-paperclip"></a>';
            }
        }
        else
        {
            $fl = '-';
        }

        return $fl;
    })

    ->addColumn('action', function ($pr)
    {
        $id = $pr->id;

        return '
        <a href="javascript:void(0)" class="btn btn-xs btn-warning" onClick="editPR(' . $id . ')" data-toggle="tooltip" title="Edit PR"><i class="fa fa-edit"></i> Edit</a>
        <a href="canteen/purchase_requisition/report/' . $id . '" target="_blank" class="btn btn-danger btn-xs" data-toggle="tooltip" title="Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
        <a href="javascript:void(0)" class="btn btn-xs  btn-primary" onClick="detailPR(' . $id . ')" style="margin-right:5px;" data-toggle="tooltip" title="Detail PR"><i class="fa fa-eye"></i> Detail Item</a>
        <a href="javascript:void(0)" class="btn btn-xs btn-danger" onClick="deleteConfirmationPROutstanding('.$id.')" data-toggle="modal" data-target="#modalDeletePR"  title="Delete PR"><i class="fa fa-trash"></i> Cancel PR</a>

        ';
    })

    ->rawColumns(['file' => 'file', 'action' => 'action'])
    ->make(true);
}

public function detail_pr_po_canteen(Request $request)
{
    $purchase_requistion = CanteenPurchaseRequisition::find($request->get('id'));
    $purchase_requistion_item = CanteenPurchaseRequisition::select('canteen_purchase_requisition_items.*','canteen_budget_histories.budget', 'canteen_budget_histories.budget_month', 'canteen_budget_histories.budget_date', 'canteen_budget_histories.category_number','canteen_budget_histories.no_item','canteen_budget_histories.amount','canteen_budget_histories.beg_bal')
    ->join('canteen_purchase_requisition_items', 'canteen_purchase_requisitions.no_pr', '=', 'canteen_purchase_requisition_items.no_pr')
        // ->leftJoin('acc_items', 'canteen_purchase_requisition_items.item_code', '=', 'acc_items.kode_item')
    ->join('canteen_budget_histories', function($join) {
     $join->on('canteen_budget_histories.category_number', '=', 'canteen_purchase_requisition_items.no_pr');
     $join->on('canteen_budget_histories.no_item','=', 'canteen_purchase_requisition_items.item_desc');
 })
    ->where('canteen_purchase_requisitions.id', '=', $request->get('id'))
    ->get();

    $response = array(
        'status' => true,
        'purchase_requisition' => $purchase_requistion,
        'purchase_requisition_item' => $purchase_requistion_item
    );
    return Response::json($response);
}

public function update_purchase_requisition_canteen_po(Request $request)
{
    $id = Auth::id();
    $lop3 = $request->get('lop3');
    $lop = explode(',', $request->get('looping_pr'));

    $total_nambah = 0;
    $total_update = 0;
    $counter = 0;

    try
    {
        foreach ($lop as $lp)
        {
            $item_code = "item_code_edit" . $lp;
            $item_desc = "item_desc_edit" . $lp;
            $item_uom = "uom_edit" . $lp;
            $item_req = "req_date_edit" . $lp;
            $item_qty = "qty_edit" . $lp;
            $item_price = "item_price_edit" . $lp;
            $item_amount = "amount_edit" . $lp;

            $getitem = CanteenPurchaseRequisitionItem::where('id', $lp)->first();

            $data10 = CanteenBudgetHistory::where('no_item',$getitem->item_desc)
            ->where('category_number',$request->get('no_pr_edit'))
            ->update([
                'no_item' => $request->get($item_desc),
            ]);


            $data2 = CanteenPurchaseRequisitionItem::where('id', $lp)->update([
              'item_code' => $request->get($item_code), 
              'item_desc' => $request->get($item_desc), 
              'item_uom' => $request->get($item_uom), 
              'item_request_date' => $request->get($item_req), 
              'item_qty' => $request->get($item_qty),
              'item_price' => $request->get($item_price),
              'item_amount' => $request->get($item_amount),
              'created_by' => $id
          ]);


            if ($data2) {
                $konversi = "konversi_dollar" . $lp;

                $getamount = CanteenBudgetHistory::where('budget', $request->get('no_budget_edit'))
                ->where('category_number',$request->get('no_pr_edit'))
                ->where('no_item',$request->get($item_desc))
                ->first();

                $counter = $counter + $getamount->amount;

                $data5 = CanteenBudgetHistory::where('budget', $request->get('no_budget_edit'))
                ->where('category_number',$request->get('no_pr_edit'))
                ->where('no_item',$request->get($item_desc))
                ->update([
                    'amount' => $request->get($konversi),
                    'created_by' => $id
                ]);

                $total_update = $total_update + $request->get($konversi);
            }
        }

        for ($i = 2;$i <= $lop3;$i++)
        {
            $item_code = "item_code" . $i;
            $item_desc = "item_desc" . $i;
            $item_req = "req_date" . $i;
            $item_currency = "item_currency" . $i;
            $item_currency_text = "item_currency_text" . $i;
            $item_price = "item_price" . $i;
            $item_qty = "qty" . $i;
            $item_uom = "uom" . $i;
            $item_amount = "amount" . $i;

                    //Jika ada value kosong
            if ($request->get($item_code) == "kosong")
            {
                $request->get($item_code) == "";
            }

            if ($request->get($item_currency) != "")
            {
                $current = $request->get($item_currency);
            }
            else if ($request->get($item_currency_text) != "")
            {
                $current = $request->get($item_currency_text);
            }

            $data2 = new CanteenPurchaseRequisitionItem([
                'no_pr' => $request->get('no_pr_edit') , 
                'item_code' => $request->get($item_code) , 
                'item_desc' => $request->get($item_desc) ,
                'item_request_date' => $request->get($item_req) , 
                'item_currency' => $current,
                'item_price' => $request->get($item_price),
                'item_qty' => $request->get($item_qty) , 
                'item_uom' => $request->get($item_uom) , 
                'item_amount' => $request->get($item_amount), 
                'created_by' => $id
            ]);

            $data2->save();

            $dollar = "konversi_dollar" . $i;
            $month = strtolower(date("M",strtotime($request->get('tgl_pengajuan_edit'))));
            $begbal = $request->get('SisaBudgetEdit') + $request->get('TotalPembelianEdit');

            $data3 = new CanteenBudgetHistory([
                'budget' => $request->get('no_budget_edit'),
                'budget_month' => $month,
                'budget_date' => $request->get('tgl_pengajuan_edit'),
                'category_number' => $request->get('no_pr_edit'),
                'beg_bal' => $begbal,
                'no_item' => $request->get($item_desc),
                'amount' => $request->get($dollar),
                'created_by' => $id
            ]);

            $data3->save();

            $total_nambah += $request->get($dollar);
        }

        $getbulan = AccBudget::select('budget_no', 'periode')
        ->where('budget_no', $request->get('no_budget_edit'))
        ->first();

        if ($getbulan->periode == "FY200") {
            $bulan = strtolower(date('M'));
        }
        else{
            $bulan = "apr";
        }

            // $bulan = strtolower(date("M",strtotime($datePembelian))); //aug,sep,oct

        $sisa_bulan = $bulan.'_sisa_budget';                    
            //get Data Budget Based On Periode Dan Nomor
        $budget = AccBudget::where('budget_no','=',$request->get('no_budget_edit'))->first();

        $total = $budget->$sisa_bulan + $counter - $total_update - $total_nambah;

        if ($total < 0) {
            return redirect('/purchase_order_canteen')->with('error', 'Total Melebihi Budget')
            ->with('page', 'Purchase Order Canteen');
        } else{
            $dataupdate = AccBudget::where('budget_no',$request->get('no_budget_edit'))->update([
                $sisa_bulan => $total
            ]);
        }

        $detail_pr = CanteenPurchaseRequisition::select('canteen_purchase_requisitions.*','canteen_purchase_requisition_items.*','canteen_budget_histories.beg_bal','canteen_budget_histories.amount',DB::raw("(select DATE(created_at) from acc_purchase_order_details where acc_purchase_order_details.no_item = canteen_purchase_requisition_items.item_code ORDER BY created_at desc limit 1) as last_order"))
        ->leftJoin('canteen_purchase_requisition_items', 'canteen_purchase_requisitions.no_pr', '=', 'canteen_purchase_requisition_items.no_pr')
        ->join('canteen_budget_histories', function($join) {
            $join->on('canteen_budget_histories.category_number', '=', 'canteen_purchase_requisition_items.no_pr');
            $join->on('canteen_budget_histories.no_item','=', 'canteen_purchase_requisition_items.item_desc');
        })
        ->where('canteen_purchase_requisitions.id', '=', $request->get('id_edit_pr'))
        ->distinct()
        ->get();

        $exchange_rate = AccExchangeRate::select('*')
        ->where('periode','=',date('Y-m-01', strtotime($detail_pr[0]->submission_date)))
        ->where('currency','!=','USD')
        ->orderBy('currency','ASC')
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('general_affairs.report.report_pr', array(
            'pr' => $detail_pr,
            'rate' => $exchange_rate
        ));

        $pdf->save(public_path() . "/kantin/pr_list/PR".$request->get('no_pr_edit').".pdf");


        return redirect('/purchase_order_canteen')
        ->with('status', 'Purchase Requisition Berhasil Dirubah')
        ->with('page', 'Purchase Order Canteen');
    }
    catch(QueryException $e)
    {
        return redirect('/purchase_order_canteen')->with('error', $e->getMessage())
        ->with('page', 'Purchase Order Canteen');
    }
}

public function fetchPrKantinList(Request $request)
{
    $pr = CanteenPurchaseRequisition::select('canteen_purchase_requisitions.no_pr')->join('canteen_purchase_requisition_items', 'canteen_purchase_requisitions.no_pr', '=', 'canteen_purchase_requisition_items.no_pr')
    ->whereNull('sudah_po')
    ->whereNotNull('receive_date')
    ->distinct()
    ->get();

    $response = array(
        'status' => true,
        'pr' => $pr
    );

    return Response::json($response);
}

public function pilihPrKantin(Request $request)
{
    $html = array();
    $list_item = CanteenPurchaseRequisitionItem::where('no_pr', $request->no_pr)
    ->whereNull('sudah_po')
    ->get();

    $lists = "<option value=''>-- Pilih Item --</option>";
    foreach ($list_item as $item)
    {
        $lists .= "<option value='" . $item->item_code . "'>" . $item->item_desc . "</option>"; 

    }
    return json_encode($lists);
}

public function pogetitemkantin(Request $request)
{
    $html = array();
    $kode_item = CanteenPurchaseRequisitionItem::join('canteen_purchase_requisitions', 'canteen_purchase_requisition_items.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
    ->where('item_code', $request->item_code)
    ->where('canteen_purchase_requisition_items.no_pr', $request->no_pr)
    ->get();

    $last_price = CanteenPurchaseOrderDetail::select('goods_price')
    ->where('no_item', $request->item_code)
    ->orderBy('id','desc')
    ->get();

    if(count($last_price) > 0){
        $last = $last_price[0]->goods_price;
    }else{
        $last = 0;
    }

    foreach ($kode_item as $item)
    {
        $html = array(
            'item_code' => $item->item_code,
            'item_desc' => $item->item_desc,
            'item_request_date' => $item->item_request_date,
            'item_qty' => $item->item_qty,
            'item_uom' => $item->item_uom,
            'item_currency' => $item->item_currency,
            'item_price' => $item->item_price,
            'last_price' => $last,
            'no_budget' => $item->no_budget,
        );

    }

    return json_encode($html);
}

public function create_purchase_order_canteen(Request $request)
{
    $id = Auth::id();

    $lop = $request->get('lop');
    $nopo = $request->get('no_po1') . $request->get('no_po2');

    $total_dollar = 0;

    try
    {
        $last = substr($nopo, -2);

        $query = "SELECT * FROM `cost_centers_s4` where code = '$last'";
        $cost_center = DB::select($query);

        foreach ($cost_center as $cc) {
            $cost = $cc->cost_center;
        }

        $data = new CanteenPurchaseOrder([
            'remark' => $request->get('remark'), 
            'no_po' => $nopo, 
            'tgl_po' => $request->get('tgl_po') , 
            'supplier_code' => $request->get('supplier_code') , 
            'supplier_name' => $request->get('supplier_name') , 
            'supplier_due_payment' => $request->get('supplier_due_payment') , 
            'supplier_status' => $request->get('supplier_status') , 
            'material' => $request->get('material') , 
            'vat' => $request->get('price_vat') , 
            'transportation' => $request->get('transportation') , 
            'delivery_term' => $request->get('delivery_term') , 
            'holding_tax' => $request->get('holding_tax') , 
            'currency' => $request->get('currency') , 
            'buyer_id' => $request->get('buyer_id') , 
            'buyer_name' => $request->get('buyer_name') , 
            'authorized2' => $request->get('authorized2') , 
            'authorized2_name' => $request->get('authorized2_name') , 
            'file_pdf' => $nopo.'.pdf' , 
            'note' => $request->get('note') , 
            'cost_center' => $cost , 
            'posisi' => 'staff_pch', 
            'status' => 'pch', 
            'created_by' => $id
        ]);

        $data->save();

        for ($i = 1;$i <= $lop;$i++)
        {
            if($request->get('remark') == "Kantin"){
                $no_pr = "no_pr" . $i;
            }
            $no_item = "no_item" . $i;
            $nama_item = "nama_item" . $i;
            $item_budget = "item_budget" . $i;
            $delivery_date = "delivery_date" . $i;
            $qty = "qty" . $i;
            $uom = "uom" . $i;
            $goods_price = "goods_price" . $i;
            $last_price = "last_price" . $i;
            $service_price = "service_price" . $i;
            $konversi_dollar = "konversi_dollar" . $i;
            $gl_number = "gl_number" . $i;

            $data2 = new CanteenPurchaseOrderDetail([
                'no_po' => $nopo, 
                'no_pr' => $request->get($no_pr) , 
                'no_item' => $request->get($no_item) , 
                'nama_item' => $request->get($nama_item) , 
                'budget_item' => $request->get($item_budget) , 
                'delivery_date' => $request->get($delivery_date) , 
                'qty' => $request->get($qty) , 
                'qty_receive' => 0, 
                'uom' => $request->get($uom) , 
                'goods_price' => $request->get($goods_price) , 
                'last_price' => $request->get($last_price) , 
                'service_price' => $request->get($service_price) , 
                'konversi_dollar' => $request->get($konversi_dollar) , 
                'gl_number' => $request->get($gl_number) ,
                'created_by' => $id
            ]);

            $data2->save();

                //Update Status Sudah PO

            if($request->get('remark') == "Kantin"){
                $data3 = CanteenPurchaseRequisitionItem::where('item_code', $request->get($no_item))
                ->where('no_pr', $request->get($no_pr))
                ->update(['sudah_po' => 'true', ]);
            }

                //Update Harga + Currency Di Master Item
            if ($request->get($goods_price) != 0) {
                $data4 = CanteenItem::where('kode_item', $request->get($no_item))
                ->update([
                    'harga' => $request->get($goods_price),
                    'currency' => $request->get('currency')
                ]);
            }
            else if ($request->get($service_price) != 0) {
                $data4 = CanteenItem::where('kode_item', $request->get($no_item))
                ->update([
                    'harga' => $request->get($service_price), 
                    'currency' => $request->get('currency')
                ]);
            }

                //Get Total Amount From Budget Log

            $data5 = CanteenBudgetHistory::where('budget', $request->get($item_budget))
            ->where('category_number',$request->get($no_pr))
            ->where('no_item',$request->get($nama_item))
            ->first();

            $amount = $data5->amount;

            $getbulan = AccBudget::select('budget_no', 'periode')
            ->where('budget_no', $request->get($item_budget))
            ->first();

            if ($getbulan->periode == "FY200") {
                $bulan = strtolower(date('M'));
            }
            else{
                $bulan = "apr";
            }

            $sisa_bulan = $bulan.'_sisa_budget';

                //get Data Budget Based On Periode Dan Nomor
            $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();

                //Tambahkan Budget Dengan Yang Ada Di Log
            $totalPlusPR = $budgetdata->$sisa_bulan + $amount;

            $updatebudget = AccBudget::where('budget_no',$request->get($item_budget))
            ->update([
                $sisa_bulan => $totalPlusPR
            ]);

                //get Data Budget Based On Periode Dan Nomor
            $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();

                //Get Amount Di PO
            $total_dollar = $request->get($konversi_dollar);

            $totalminusPO = $budgetdata->$sisa_bulan - $total_dollar;

            if ($totalminusPO < 0) {

                    //Tambahkan Budget Dengan Yang Ada Di Log
                $totalMinPR = $budgetdata->$sisa_bulan - $amount;

                $updatebudget = AccBudget::where('budget_no',$request->get($item_budget))
                ->update([
                    $sisa_bulan => $totalMinPR
                ]);

                return redirect('/purchase_order_canteen')->with('error', 'Total Melebihi Budget')
                ->with('page', 'Purchase Order Canteen');
            } 

                // Setelah itu update data budgetnya dengan yang actual
            $dataupdate = AccBudget::where('budget_no',$request->get($item_budget))
            ->update([
                $sisa_bulan => $totalminusPO
            ]);

            $updatebudgetlog = CanteenBudgetHistory::where('budget', $request->get($item_budget))
            ->where('category_number',$request->get($no_pr))
            ->where('no_item',$request->get($nama_item))
            ->update([
                'budget_month_po' => $bulan,
                'po_number' => $nopo,
                'amount_po' => $total_dollar,
                'status' => 'PO'
            ]);
        }

        if($request->get('remark') == "Kantin"){
            $detail_po = CanteenPurchaseOrder::select('canteen_purchase_orders.*','acc_suppliers.*','canteen_purchase_order_details.*','canteen_purchase_requisitions.department')
            ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
            ->leftJoin('acc_suppliers', 'canteen_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
            ->leftJoin('canteen_purchase_requisitions', 'canteen_purchase_order_details.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
            ->where('canteen_purchase_orders.id', '=', $data->id)
            ->get();
        }

        $pr = CanteenPurchaseOrder::select('no_pr')
        ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
        ->where('canteen_purchase_orders.id', '=', $data->id)
        ->distinct()
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.report.report_po_kantin', array(
            'po' => $detail_po,
            'pr' => $pr
        ));

        $pdf->save(public_path() . "/kantin/po_list/".$detail_po[0]->no_po.".pdf");

        if($request->get('remark') == "Kantin"){
            return redirect('/purchase_order_canteen')
            ->with('status', 'Purchase Order Kantin Berhasil Dibuat')
            ->with('page', 'Purchase Order Canteen');
        }
    }
    catch(QueryException $e)
    {
        return redirect('/purchase_order_canteen')->with('error', $e->getMessage())
        ->with('page', 'Purchase Order Canteen');
    }
}

public function edit_purchase_order_canteen(Request $request)
{

    $purchase_order = CanteenPurchaseOrder::find($request->get('id'));
    $purchase_order_detail = CanteenPurchaseOrder::join('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')->where('canteen_purchase_orders.id', '=', $request->get('id'))
    ->get();

    $response = array(
        'status' => true,
        'purchase_order' => $purchase_order,
        'purchase_order_detail' => $purchase_order_detail
    );
    return Response::json($response);
}

public function update_purchase_order_canteen(Request $request)
{
    $id = Auth::id();

    $lop2 = $request->get('lop2');
    $po_data = CanteenPurchaseOrder::find($request->get('id_edit'));
    $lop = explode(',', $request->get('looping'));

    try
    {
            //Update PO
        $data3 = CanteenPurchaseOrder::where('no_po', $request->get('no_po_edit'))
        ->update([
            'supplier_code' => $request->get('supplier_code_edit') , 
            'supplier_name' => $request->get('supplier_name_edit') , 
            'supplier_due_payment' => $request->get('supplier_due_payment_edit') , 
            'supplier_status' => $request->get('supplier_status_edit') , 
            'material' => $request->get('material_edit') , 
            'vat' => $request->get('price_vat_edit') , 
            'transportation' => $request->get('transportation_edit') , 
            'delivery_term' => $request->get('delivery_term_edit') , 
            'holding_tax' => $request->get('holding_tax_edit') , 
            'currency' => $request->get('currency_edit') , 
            'note' => $request->get('note_edit') 
        ]);

        // if ($po_data->posisi == "pch") {
        //     $data5 = CanteenPurchaseOrder::where('no_po', $request->get('no_po_edit'))
        //     ->update([
        //         'revised' => 'true', 
        //         'revised_date' => date('Y-m-d'),
        //         'posisi' => 'staff_pch',
        //         'status' => 'pch',
        //         'approval_authorized2' => null,
        //         'date_approval_authorized2' => null
        //     ]);
        // }



        foreach ($lop as $lp)
        {
            $no_pr = "no_pr" . $lp;
            $no_item = "no_item" . $lp;
            $nama_item = "nama_item" . $lp;
            $item_budget = "item_budget" . $lp;
            $delivery_date = "delivery_date" . $lp;
            $qty = "qty" . $lp;
            $uom = "uom_edit" . $lp;
            $goods_price = "goods_price" . $lp;
            $last_price = "last_price" . $lp;
            $service_price = "service_price" . $lp;
            $konversi_dollar = "konversi_dollar" . $lp;
            $gl_number = "gl_edit" . $lp;

            $data2 = CanteenPurchaseOrderDetail::where('id', $lp)->update([
                'no_item' => $request->get($no_item) , 
                'nama_item' => $request->get($nama_item) , 
                'budget_item' => $request->get($item_budget) , 
                'delivery_date' => $request->get($delivery_date) , 
                'qty' => $request->get($qty) , 
                'uom' => $request->get($uom) , 
                'goods_price' => $request->get($goods_price) , 
                'last_price' => $request->get($last_price) , 
                'service_price' => $request->get($service_price) , 
                'konversi_dollar' => $request->get($konversi_dollar) , 
                'gl_number' => $request->get($gl_number) , 
                'created_by' => $id
            ]);

                 //Update Harga + Currency Di Master Item
            if ($request->get($goods_price) != 0) {
                $updateitempo = CanteenItem::where('kode_item', $request->get($no_item))
                ->update([
                    'harga' => $request->get($goods_price),
                    'currency' => $request->get('currency_edit')
                ]);
            }
            else if ($request->get($service_price) != 0) {
                $updateitempo = CanteenItem::where('kode_item', $request->get($no_item))
                ->update([
                    'harga' => $request->get($service_price), 
                    'currency' => $request->get('currency_edit')
                ]);
            }

            if ($data2) {

                $getbudgetlog = CanteenBudgetHistory::where('budget', $request->get($item_budget))
                ->where('po_number',$request->get('no_po_edit'))
                ->where('no_item',$request->get($nama_item))
                ->first();

                $counter = $getbudgetlog->amount_po;
                $date = $getbudgetlog->budget_month_po;

                $sisa_bulan = $date.'_sisa_budget';

                    //get Data Budget Based On Periode Dan Nomor
                $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();

                $totalOld = $budgetdata->$sisa_bulan + $counter;

                $updatebudget = AccBudget::where('budget_no',$request->get($item_budget))
                ->update([
                    $sisa_bulan => $totalOld
                ]);

                    //get Data Budget Based On Periode Dan Nomor
                $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget))->first();

                $total_dollar = $request->get($konversi_dollar);

                $totalNew = $budgetdata->$sisa_bulan - $total_dollar;

                $dataupdate = AccBudget::where('budget_no',$request->get($item_budget))
                ->update([
                    $sisa_bulan => $totalNew
                ]);

                $data5 = CanteenBudgetHistory::where('budget', $request->get($item_budget))
                ->where('po_number',$request->get('no_po_edit'))
                ->where('no_item',$request->get($nama_item))
                ->update([
                    'amount_po' => $request->get($konversi_dollar),
                    'created_by' => $id
                ]);
            }

        }

        for ($i = 2;$i <= $lop2;$i++)
        {
            $no_pr2 = "no_pr" . $i;
            $no_item2 = "no_item" . $i;
            $nama_item2 = "nama_item" . $i;
            $item_budget2 = "item_budget" . $i;
            $delivery_date2 = "delivery_date" . $i;
            $qty2 = "qty" . $i;
            $uom2 = "uom" . $i;
            $goods_price2 = "goods_price" . $i;
            $last_price2 = "last_price" . $i;
            $service_price2 = "service_price" . $i;
            $konversi_dollar2 = "konversi_dollar" . $i;
            $gl_number2 = "gl_number" . $i;

            $data = new CanteenPurchaseOrderDetail([
                'no_po' => $request->get('no_po_edit') , 
                'no_pr' => $request->get($no_pr2) , 
                'no_item' => $request->get($no_item2) , 
                'nama_item' => $request->get($nama_item2) , 
                'budget_item' => $request->get($item_budget2) , 
                'delivery_date' => $request->get($delivery_date2) , 
                'qty' => $request->get($qty2) , 
                'qty_receive' => 0 , 
                'uom' => $request->get($uom2) , 
                'goods_price' => $request->get($goods_price2) , 
                'last_price' => $request->get($last_price2) , 
                'service_price' => $request->get($service_price2) , 
                'konversi_dollar' => $request->get($konversi_dollar2) , 
                'gl_number' => $request->get($gl_number2) , 
                'created_by' => $id
            ]);

            $data->save();


            $data3 = CanteenPurchaseRequisitionItem::where('item_code', $request->get($no_item2))
            ->where('no_pr', $request->get($no_pr2))
            ->update([
                'sudah_po' => 'true'
            ]);


             //Get Total Amount From Budget Log

            $data5 = CanteenBudgetHistory::where('budget', $request->get($item_budget2))
            ->where('category_number',$request->get($no_pr2))
            ->where('no_item',$request->get($nama_item2))
            ->first();

            $amount = $data5->amount;

            $getbulan = AccBudget::select('budget_no', 'periode')
            ->where('budget_no', $request->get($item_budget2))
            ->first();

            if ($getbulan->periode == "FY200") {
                $bulan = strtolower(date('M'));
            }
            else{
                $bulan = "apr";
            }

            $sisa_bulan = $bulan.'_sisa_budget';

                //get Data Budget Based On Periode Dan Nomor
            $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget2))->first();

                //Tambahkan Budget Dengan Yang Ada Di Log
            $totalPlusPR = $budgetdata->$sisa_bulan + $amount;

            $updatebudget = AccBudget::where('budget_no',$request->get($item_budget2))
            ->update([
                $sisa_bulan => $totalPlusPR
            ]);

                //get Data Budget Based On Periode Dan Nomor
            $budgetdata = AccBudget::where('budget_no','=',$request->get($item_budget2))->first();

                //Get Amount Di PO
            $total_dollar = $request->get($konversi_dollar2);

            $totalminusPO = $budgetdata->$sisa_bulan - $total_dollar;

                // Setelah itu update data budgetnya dengan yang actual
            $dataupdate = AccBudget::where('budget_no',$request->get($item_budget2))
            ->update([
                $sisa_bulan => $totalminusPO
            ]);

            $updatebudgetlog = CanteenBudgetHistory::where('budget', $request->get($item_budget2))
            ->where('category_number',$request->get($no_pr2))
            ->where('no_item',$request->get($nama_item2))
            ->update([
                'budget_month_po' => $bulan,
                'po_number' => $request->get('no_po_edit'),
                'amount_po' => $total_dollar,
                'status' => 'PO'
            ]);

        }

        $detail_po = CanteenPurchaseOrder::select('canteen_purchase_orders.*','acc_suppliers.*','canteen_purchase_order_details.*')
        ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
        ->leftJoin('acc_suppliers', 'canteen_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
        ->leftJoin('canteen_purchase_requisitions', 'canteen_purchase_order_details.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
        ->where('canteen_purchase_orders.no_po', '=', $request->get('no_po_edit'))
        ->get();

        $pr = CanteenPurchaseOrder::select('no_pr')
        ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
        ->where('canteen_purchase_orders.no_po', '=', $request->get('no_po_edit'))
        ->distinct()
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.report.report_po_kantin', array(
            'po' => $detail_po,
            'pr' => $pr
        ));

        $pdf->save(public_path() . "/kantin/po_list/".$detail_po[0]->no_po.".pdf");

        if ($po_data->remark == "Kantin"){
            return redirect('/purchase_order_canteen')
            ->with('status', 'Purchase Order Canteen Berhasil Dirubah')
            ->with('page', 'Purchase Order Canteen');
        }
    }
    catch(QueryException $e)
    {
        return redirect('/purchase_order_canteen')->with('error', $e->getMessage())
        ->with('page', 'Purchase Order Canteen');
    }
}

public function report_purchase_order_canteen($id){

    $po = CanteenPurchaseOrder::find($id);

    if($po->remark == "Kantin"){

        if (date('Y-m-d', strtotime($po->tgl_po)) > "2022-04-30") {
            $detail_po = CanteenPurchaseOrder::select('canteen_purchase_orders.*','acc_suppliers.*','canteen_purchase_order_details.*','canteen_purchase_requisitions.department')
            ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
            ->leftJoin('acc_suppliers', 'canteen_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
            ->leftJoin('canteen_purchase_requisitions', 'canteen_purchase_order_details.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
            ->where('canteen_purchase_orders.id', '=', $id)
            ->get();
        }else{
            $detail_po = CanteenPurchaseOrder::select('canteen_purchase_orders.*','acc_suppliers_olds.*','canteen_purchase_order_details.*','canteen_purchase_requisitions.department')
            ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
            ->leftJoin('acc_suppliers_olds', 'canteen_purchase_orders.supplier_code', '=', 'acc_suppliers_olds.vendor_code')
            ->leftJoin('canteen_purchase_requisitions', 'canteen_purchase_order_details.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
            ->where('canteen_purchase_orders.id', '=', $id)
            ->get();
        }
    }

    $pr = CanteenPurchaseOrder::select('no_pr')
    ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
    ->where('canteen_purchase_orders.id', '=', $id)
    ->distinct()
    ->get();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('accounting_purchasing.report.report_po_kantin', array(
        'po' => $detail_po,
        'pr' => $pr
    ));

    $path = "kantin/po_list/" . $detail_po[0]->no_po . ".pdf";
    return $pdf->stream($detail_po[0]->no_po. " (".$detail_po[0]->supplier_name.").pdf");
}

public function delete_item_po_canteen(Request $request)
{
    try
    {
        $item = CanteenPurchaseOrderDetail::find($request->get('id'));

        $data3 = CanteenPurchaseRequisitionItem::where('item_code', $item->no_item)
        ->where('no_pr', $item->no_pr)
        ->update(['sudah_po' => null ]);        

        $budget_log = CanteenBudgetHistory::where('no_item', '=', $item->nama_item)
        ->where('po_number', '=', $item->no_po)
        ->first();


        $sisa_bulan = $budget_log->budget_month_po.'_sisa_budget';        
        $budget = AccBudget::where('budget_no', $budget_log->budget)->first();

            $total = $budget->$sisa_bulan + $budget_log->amount_po; //add total

            $dataupdate = AccBudget::where('budget_no', $budget_log->budget)
            ->update([
                $sisa_bulan => $total
            ]);

            $update_budget_log = CanteenBudgetHistory::where('no_item', '=', $item->nama_item)
            ->where('po_number', '=', $item->no_po)
            ->update([
                'budget_month_po' => null,
                'po_number' => null,
                'amount_po' => null,
                'status' => 'PR'
            ]);

            $budget = AccBudget::where('budget_no', $budget_log->budget)->first();

            $totalAfterMinusPR = $budget->$sisa_bulan - $budget_log->amount;

            $dataupdate = AccBudget::where('budget_no', $budget_log->budget)
            ->update([
                $sisa_bulan => $totalAfterMinusPR
            ]);

            $master = CanteenPurchaseOrderDetail::where('id', '=', $request->get('id'))->delete();

        }
        catch(QueryException $e)
        {
            return redirect('/purchase_order_canteen')->with('error', $e->getMessage())
            ->with('page', 'Purchase Order Canteen');
        }
    }


    public function po_send_email_canteen(Request $request){
        $po = CanteenPurchaseOrder::find($request->get('id'));

        try{
            if ($po->posisi == "staff_pch")
            {
                $po->posisi = "manager_pch";

                $mailto = "select distinct email from canteen_purchase_orders join users on canteen_purchase_orders.authorized2 = users.username where canteen_purchase_orders.id = '" . $request->get('id') . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }
                $po->save();


                $isimail = "
                SELECT canteen_purchase_orders.*,
                canteen_purchase_order_details.nama_item,
                canteen_purchase_order_details.budget_item,
                canteen_purchase_order_details.delivery_date,
                canteen_purchase_order_details.goods_price,
                canteen_purchase_order_details.service_price,
                canteen_purchase_order_details.qty,
                canteen_purchase_order_details.uom
                FROM
                canteen_purchase_orders
                JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po 
                WHERE
                canteen_purchase_orders.id = ".$request->get('id')."";

                $po_isi = db::select($isimail);

                Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'canteen_purchase_order'));

                $response = array(
                  'status' => true,
                  'datas' => "Berhasil"
              );

                return Response::json($response);
            }
            else{

            }


        } catch (Exception $e) {
           $response = array(
              'status' => false,
              'datas' => "Gagal"
          );

           return Response::json($response);
       }
   }

   public function po_resend_email_canteen(Request $request){
    $po = CanteenPurchaseOrder::find($request->get('id'));

    try{
        if ($po->posisi == "manager_pch")
        {
            $mailto = "select distinct email from canteen_purchase_orders join users on canteen_purchase_orders.authorized2 = users.username where canteen_purchase_orders.id = '" . $request->get('id') . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $isimail = "
            SELECT canteen_purchase_orders.*,
            canteen_purchase_order_details.nama_item,
            canteen_purchase_order_details.budget_item,
            canteen_purchase_order_details.delivery_date,
            canteen_purchase_order_details.goods_price,
            canteen_purchase_order_details.service_price,
            canteen_purchase_order_details.qty,
            canteen_purchase_order_details.uom
            FROM
            canteen_purchase_orders
            JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po 
            WHERE
            canteen_purchase_orders.id = ".$request->get('id')."";

            $po_isi = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'canteen_purchase_order'));

            $response = array(
              'status' => true,
              'datas' => "Berhasil"
          );

            return Response::json($response);
        }
    } catch (Exception $e) {
       $response = array(
          'status' => false,
          'datas' => "Gagal"
      );

       return Response::json($response);
   }
}

public function cancel_purchase_order_canteen(Request $request)
{
    try
    {
        $po = CanteenPurchaseOrder::find($request->get('id'));
        $date = date('Y-m-d');

        $budget_log = CanteenBudgetHistory::where('po_number', '=', $po->no_po)
        ->get();

        if ($budget_log != null) {

            foreach ($budget_log as $log) {
                $sisa_bulan = $log->budget_month_po.'_sisa_budget';
                $budget = AccBudget::where('budget_no', $log->budget)->first();

                    $total = $budget->$sisa_bulan + $log->amount_po; //add total PO
                    $dataupdate = AccBudget::where('budget_no', $log->budget)->update([
                        $sisa_bulan => $total
                    ]);

                    //get Data Budget Based On Periode Dan Nomor
                    $budgetdata = AccBudget::where('budget_no', $log->budget)->first();

                    $totalNew = $budgetdata->$sisa_bulan - $log->amount; //minus amount PR

                    $dataupdate = AccBudget::where('budget_no', $log->budget)
                    ->update([
                        $sisa_bulan => $totalNew
                    ]);
                }

                $data5 = CanteenBudgetHistory::where('po_number', $po->no_po)
                ->update([
                    'budget_month_po' => null,
                    'po_number' => null,
                    'amount_po' => null,
                    'status' => 'PR',
                    'created_by' => Auth::id()
                ]);
            }

            if($po->remark == "Kantin"){
                $data3 = CanteenPurchaseOrderDetail::where('no_po', $po->no_po)
                ->select('*')
                ->get();
                
                foreach ($data3 as $datapr) {
                    $updatepr = CanteenPurchaseRequisitionItem::where('item_code', $datapr->no_item)
                    ->where('no_pr', $datapr->no_pr)
                    ->update(['sudah_po' => null ]);
                }
            }

            $delete_po_item = CanteenPurchaseOrderDetail::where('no_po', '=', $po->no_po)->delete();
            $delete_po = CanteenPurchaseOrder::where('no_po', '=', $po->no_po)->delete();

            $response = array(
                'status' => true,
            );

            return Response::json($response);

        }
        catch(QueryException $e)
        {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );

            return Response::json($response);
        }

    }

    public function poapprovalmanagercanteen($id){
        $po = CanteenPurchaseOrder::find($id);
        try{
            if ($po->posisi == "manager_pch")
            {
                $po->posisi = 'pch';
                $po->approval_authorized2 = "Approved";
                $po->date_approval_authorized2 = date('Y-m-d H:i:s');
                $po->status = "sap";

                $mailto = "select distinct email from vendor_mails join canteen_purchase_orders on canteen_purchase_orders.supplier_code = vendor_mails.vendor_code where canteen_purchase_orders.id = '" . $id . "'";
                $mails = DB::select($mailto);

                foreach ($mails as $mail)
                {
                    $mailtoo = $mail->email;
                }

                $po->save();

                if($po->remark == "Kantin"){
                    $detail_po = CanteenPurchaseOrder::select('canteen_purchase_orders.*','acc_suppliers.*','canteen_purchase_order_details.*','canteen_purchase_requisitions.department')
                    ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
                    ->leftJoin('acc_suppliers', 'canteen_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
                    ->leftJoin('canteen_purchase_requisitions', 'canteen_purchase_order_details.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
                    ->where('canteen_purchase_orders.id', '=', $id)
                    ->get();
                }

                $pr = CanteenPurchaseOrder::select('no_pr')
                ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
                ->where('canteen_purchase_orders.id', '=', $id)
                ->distinct()
                ->get();

                $pdf = \App::make('dompdf.wrapper');
                $pdf->getDomPDF()->set_option("enable_php", true);
                $pdf->setPaper('A4', 'potrait');


                $pdf->loadView('accounting_purchasing.report.report_po_kantin', array(
                    'po' => $detail_po,
                    'pr' => $pr
                ));

                $pdf->save(public_path() . "/kantin/po_list/".$detail_po[0]->no_po.".pdf");

                $isimail = "
                SELECT canteen_purchase_orders.*,
                canteen_purchase_order_details.nama_item,
                canteen_purchase_order_details.budget_item,
                canteen_purchase_order_details.delivery_date,
                canteen_purchase_order_details.goods_price,
                canteen_purchase_order_details.service_price,
                canteen_purchase_order_details.qty,
                canteen_purchase_order_details.uom,
                vendor_mails.`name`
                FROM
                canteen_purchase_orders
                JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po 
                LEFT JOIN vendor_mails ON canteen_purchase_orders.supplier_code = vendor_mails.vendor_code
                WHERE
                canteen_purchase_orders.id = ".$id."
                ";

                $po_isi = db::select($isimail);

                $cc = [
                    'm.hamzah@music.yamaha.com',
                    'shega.erik.wicaksono@music.yamaha.com',
                    'amelia.novrinta@music.yamaha.com'
                ];

                Mail::to($mailtoo)->cc($cc)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'vendor_canteen_purchase_order'));

                // Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'canteen_purchase_order'));

                $message = 'PO Kantin dengan Nomor '.$po->no_po;
                $message2 ='Berhasil di approve';
            }
            else{
                $message = 'PO Kantin dengan Nomor. '.$po->no_po;
                $message2 ='Sudah di approve/reject';
            }

            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $po->no_pr,
                'message' => $message,
                'message2' => $message2,
            ))->with('page', 'Approval');

        } catch (Exception $e) {
            return view('accounting_purchasing.verifikasi.pr_message', array(
                'head' => $po->no_pr,
                'message' => 'Error',
                'message2' => $e->getMessage(),
            ))->with('page', 'Approval');
        }
    }


   //Monitoring PR PO

    public function monitoringPOCanteen(){
        return view('accounting_purchasing.display.po_canteen_monitoring',  
            array(
              'title' => 'Purchase Order Canteen Monitoring', 
              'title_jp' => 'PO管理',
          )
        )->with('page', 'Purchase Order Canteen Monitoring');
    }

    public function fetchMonitoringPOCanteen(Request $request){

      $datefrom = date("Y-m-d",  strtotime('-30 days'));
      $dateto = date("Y-m-d");

      $last = CanteenPurchaseOrder::where('status','=','pch')
      ->orderBy('tanggal', 'asc')
      ->select(db::raw('date(tgl_po) as tanggal'))
      ->first();

      if(strlen($request->get('datefrom')) > 0){
        $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
    }
    else{
        if($last){
          $tanggal = date_create($last->tanggal);
          $now = date_create(date('Y-m-d'));
          $interval = $now->diff($tanggal);
          $diff = $interval->format('%a%');

          if($diff > 30){
            $datefrom = date('Y-m-d', strtotime($last->tanggal));
        }
    }
}


if(strlen($request->get('dateto')) > 0){
    $dateto = date('Y-m-d', strtotime($request->get('dateto')));
}

              //per tgl
$data = db::select("
    select date.week_date, coalesce(belum_diterima.total, 0) as jumlah_belum, coalesce(sudah_diterima.total, 0) as jumlah_sudah from 
    (select week_date from weekly_calendars 
    where date(week_date) >= '".$datefrom."'
    and date(week_date) <= '".$dateto."') date
    left join
    (select date(tgl_po) as date, count(id) as total from canteen_purchase_orders
    where date(tgl_po) >= '".$datefrom."' and date(tgl_po) <= '".$dateto."' and canteen_purchase_orders.deleted_at is null and posisi = 'pch' and `status` = 'sap'
    group by date(tgl_po)) sudah_diterima
    on date.week_date = sudah_diterima.date
    left join
    (select date(tgl_po) as date, count(id) as total from canteen_purchase_orders
    where date(tgl_po) >= '".$datefrom."' and date(tgl_po) <= '".$dateto."' and canteen_purchase_orders.deleted_at is null and `status` != 'sap'
    group by date(tgl_po)) belum_diterima
    on date.week_date = belum_diterima.date
    WHERE belum_diterima.total != 0 or sudah_diterima.total != 0
    order by week_date asc
    ");

$year = date('Y');

$response = array(
    'status' => true,
    'datas' => $data,
    'year' => $year
);

return Response::json($response);
}

public function detailMonitoringPOCanteen(Request $request){

  $tanggal = $request->get("tanggal");
  $status = $request->get("status");
  $tglfrom = $request->get("tglfrom");
  $tglto = $request->get("tglto");

  $status_sign = "";

  if ($status == "PO Incompleted") {
      $status_sign = "and status != 'sap'";
  }
  else if ($status == "PO Completed") {
      $status_sign = "and posisi = 'pch' and status = 'sap'";
  }


  $qry = "SELECT * FROM canteen_purchase_orders WHERE deleted_at IS NULL and DATE_FORMAT(tgl_po,'%Y-%m-%d') = '".$tanggal."' ".$status_sign." order by id DESC";
  $po = DB::select($qry);

  return DataTables::of($po)

  ->editColumn('tgl_po', function ($po)
  {
    return date('Y-m-d', strtotime($po->tgl_po));
})


  ->editColumn('status', function ($po)
  {
    $id = $po->id;

    if ($po->posisi == "staff_pch")
    {
        return '<label class="label label-danger">Staff Purchasing</label>';
    }

    else if ($po->posisi == "manager_pch")
    {
        return '<label class="label label-warning">Diverifikasi Manager</label>';
    }

    else if ($po->posisi == "pch")
    {
        return '<label class="label label-success">Sudah Diverifikasi</label>';
    }

})
  ->rawColumns(['status' => 'status'])
  ->make(true);
}

public function fetchtablePOCanteen(Request $request)
{
  $datefrom = $request->get('datefrom');
  $dateto = $request->get('dateto');

  if ($datefrom == "") {
      $datefrom = date('Y-m-d', strtotime(carbon::now()->subMonth(11)));
  }

  if ($dateto == "") {
      $dateto = date('Y-m-d', strtotime(carbon::now()));
  }

  $data = db::select("

    SELECT
    t1.*,IF(t1.goods_price != 0,sum( t1.goods_price * t1.qty ),sum( t1.service_price * t1.qty )) AS amount 
    FROM
    (
        SELECT
        canteen_purchase_orders.*,
        date(canteen_purchase_orders.tgl_po) as po_date,
        canteen_purchase_order_details.budget_item,
        canteen_purchase_order_details.goods_price,
        canteen_purchase_order_details.service_price,
        canteen_purchase_order_details.qty 
        FROM
        canteen_purchase_orders
        JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po 
        WHERE
        canteen_purchase_orders.`status` != 'sap' 
        AND canteen_purchase_orders.deleted_at IS NULL 
        AND DATE_FORMAT( tgl_po, '%Y-%m-%d' ) BETWEEN  '".$datefrom."' AND '".$dateto."' 
        ORDER BY
        tgl_po ASC 
        ) t1
        GROUP BY t1.no_po");

    $response = array(
        'status' => true,
        'datas' => $data
    );

    return Response::json($response); 
}

public function verifikasi_purchase_order_canteen($id)
{
    $po = CanteenPurchaseOrder::find($id);

    $path = '/kantin/po_list/' . $po->file_pdf;            
    $file_path = asset($path);

    return view('accounting_purchasing.verifikasi.po_verifikasi_canteen', array(
        'po' => $po,
        'file_path' => $file_path,
    ))->with('page', 'Purchase Order Canteen');
}


public function approval_purchase_order_canteen(Request $request, $id)
{
    $approve = $request->get('approve');
    if ($approve == "1") {
        $po = CanteenPurchaseOrder::find($id);

        if ($po->posisi == "manager_pch")
        {

            $po->posisi = 'pch';
            $po->approval_authorized2 = "Approved";
            $po->date_approval_authorized2 = date('Y-m-d H:i:s');
            $po->status = "sap";

            $mailto = "select distinct email from vendor_mails join canteen_purchase_orders on canteen_purchase_orders.supplier_code = vendor_mails.vendor_code where canteen_purchase_orders.id = '" . $id . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }
        }

        $po->save();

        if($po->remark == "Kantin"){
            $detail_po = CanteenPurchaseOrder::select('canteen_purchase_orders.*','acc_suppliers.*','canteen_purchase_order_details.*','canteen_purchase_requisitions.department')
            ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
            ->leftJoin('acc_suppliers', 'canteen_purchase_orders.supplier_code', '=', 'acc_suppliers.vendor_code')
            ->leftJoin('canteen_purchase_requisitions', 'canteen_purchase_order_details.no_pr', '=', 'canteen_purchase_requisitions.no_pr')
            ->where('canteen_purchase_orders.id', '=', $id)
            ->get();
        }

        $pr = CanteenPurchaseOrder::select('no_pr')
        ->leftJoin('canteen_purchase_order_details', 'canteen_purchase_orders.no_po', '=', 'canteen_purchase_order_details.no_po')
        ->where('canteen_purchase_orders.id', '=', $id)
        ->distinct()
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');


        $pdf->loadView('accounting_purchasing.report.report_po_kantin', array(
            'po' => $detail_po,
            'pr' => $pr
        ));

        $pdf->save(public_path() . "/kantin/po_list/".$detail_po[0]->no_po.".pdf");

        $isimail = "
        SELECT canteen_purchase_orders.*,
        canteen_purchase_order_details.nama_item,
        canteen_purchase_order_details.budget_item,
        canteen_purchase_order_details.delivery_date,
        canteen_purchase_order_details.goods_price,
        canteen_purchase_order_details.service_price,
        canteen_purchase_order_details.qty,
        canteen_purchase_order_details.uom,
        vendor_mails.`name`
        FROM
        canteen_purchase_orders
        JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po 
        LEFT JOIN vendor_mails ON canteen_purchase_orders.supplier_code = vendor_mails.vendor_code
        WHERE
        canteen_purchase_orders.id = ".$id."";

        $po_isi = db::select($isimail);

        $cc = [
            'm.hamzah@music.yamaha.com',
            'shega.erik.wicaksono@music.yamaha.com',
            'amelia.novrinta@music.yamaha.com'
        ];

        Mail::to($mailtoo)->cc($cc)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($po_isi, 'vendor_canteen_purchase_order'));

        return redirect('/canteen/purchase_order/verifikasi/' . $id)->with('status', 'Purchase Order Approved')
        ->with('page', 'Purchase Order Canteen');
    }
    else
    {
        return redirect('/canteen/purchase_order/verifikasi/' . $id)->with('error', 'Purchase Order Not Approved')
        ->with('page', 'Purchase Order Canteen');
    }
}

public function reject_purchase_order_canteen(Request $request, $id)
{
    $alasan = $request->get('alasan');

    $po = CanteenPurchaseOrder::find($id);

    if ($po->posisi == "manager_pch")
    {
        $po->reject = $alasan;
        $po->datereject = date('Y-m-d H:i:s');
        $po->posisi = "staff_pch";
        $po->approval_authorized2 = null;
        $po->date_approval_authorized2 = null;
    }

    $po->save();

    $isimail = "
    SELECT canteen_purchase_orders.*,
    canteen_purchase_order_details.nama_item,
    canteen_purchase_order_details.budget_item,
    canteen_purchase_order_details.delivery_date,
    canteen_purchase_order_details.goods_price,
    canteen_purchase_order_details.service_price,
    canteen_purchase_order_details.qty,
    canteen_purchase_order_details.uom
    FROM
    canteen_purchase_orders
    JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po 
    WHERE
    canteen_purchase_orders.id = ".$po->id."";

    $tolak = db::select($isimail);

    $mails = "select distinct email from canteen_purchase_orders join users on canteen_purchase_orders.buyer_id = users.username where canteen_purchase_orders.id ='" . $po->id . "'";
    $mailtoo = DB::select($mails);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'canteen_purchase_order'));
    return redirect('/canteen/purchase_order/verifikasi/' . $id)->with('status', 'PO Not Approved')
    ->with('page', 'Purchase Order Canteen');
}

public function fetch_history_pembelian_canteen(Request $request){
    $history = CanteenPurchaseOrder::whereNull('canteen_purchase_orders.deleted_at');

    if($request->get('keyword') != null){
        $history = $history->where('nama_item', 'like', '%' . $request->get('keyword') . '%');
    }
    $history = $history->join('canteen_purchase_order_details','canteen_purchase_orders.no_po','=','canteen_purchase_order_details.no_po');
    $history = $history->select('canteen_purchase_orders.supplier_name','canteen_purchase_order_details.no_po','canteen_purchase_order_details.nama_item','canteen_purchase_order_details.goods_price','canteen_purchase_order_details.service_price','canteen_purchase_orders.tgl_po','canteen_purchase_orders.currency');
    $history = $history->orderBy('canteen_purchase_orders.tgl_po', 'desc');
    $history = $history->get();

    $response = array(
        'status' => true,
        'history' => $history
    );
    return Response::json($response);
}

public function porejectKatin(Request $request, $id)
{
    $po = CanteenPurchaseOrder::find($id);

    if ($po->posisi == "manager_pch")
    {
        $po->datereject = date('Y-m-d H:i:s');
        $po->posisi = "staff_pch";
        $po->approval_authorized2 = null;
        $po->date_approval_authorized2 = null;
    }
    $po->save();

    $isimail = "
    SELECT canteen_purchase_orders.*,
    canteen_purchase_order_details.nama_item,
    canteen_purchase_order_details.budget_item,
    canteen_purchase_order_details.delivery_date,
    canteen_purchase_order_details.goods_price,
    canteen_purchase_order_details.service_price,
    canteen_purchase_order_details.qty,
    canteen_purchase_order_details.uom
    FROM
    canteen_purchase_orders
    JOIN canteen_purchase_order_details ON canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po 
    WHERE
    canteen_purchase_orders.id = ".$po->id."";

    $tolak = db::select($isimail);

        //kirim email ke Buyer
    $mails = "select distinct email from canteen_purchase_orders join users on canteen_purchase_orders.buyer_id = users.username where canteen_purchase_orders.id ='" . $po->id . "'";
    $mailtoo = DB::select($mails);


    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'canteen_purchase_order'));

    $message = 'PO dengan Nomor. '.$po->no_po;
    $message2 ='Tidak Disetujui';

    return view('accounting_purchasing.verifikasi.pr_message', array(
        'head' => $po->no_po,
        'message' => $message,
        'message2' => $message2,
    ))->with('page', 'Approval');
}

public function exportPOKantin(Request $request){

    $time = date('d-m-Y H;i;s');

    $tanggal = "";

    if (strlen($request->get('datefrom')) > 0)
    {
        $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
        $tanggal = "and tgl_po >= '" . $datefrom . " 00:00:00' ";
        if (strlen($request->get('dateto')) > 0)
        {
            $dateto = date('Y-m-d', strtotime($request->get('dateto')));
            $tanggal = $tanggal . "and tgl_po  <= '" . $dateto . " 23:59:59' ";
        }
    }

    $po_detail = db::select(
        "
        Select canteen_purchase_order_details.id,canteen_purchase_orders.no_po, canteen_purchase_orders.remark, canteen_purchase_orders.note, canteen_purchase_order_details.no_pr, canteen_purchase_orders.tgl_po, canteen_purchase_orders.supplier_code , canteen_purchase_orders.supplier_name, canteen_purchase_orders.currency, canteen_purchase_orders.material, canteen_purchase_orders.buyer_name, canteen_purchase_order_details.no_item, canteen_purchase_order_details.nama_item, canteen_purchase_order_details.delivery_date, canteen_purchase_order_details.qty, canteen_purchase_order_details.uom, canteen_purchase_order_details.goods_price, canteen_purchase_order_details.service_price, canteen_purchase_order_details.budget_item, canteen_purchase_orders.cost_center, canteen_purchase_order_details.gl_number, acc_purchase_requisitions.emp_name, acc_investments.applicant_name from canteen_purchase_orders left join canteen_purchase_order_details on canteen_purchase_orders.no_po = canteen_purchase_order_details.no_po left join acc_purchase_requisitions on canteen_purchase_order_details.no_pr = acc_purchase_requisitions.no_pr left join acc_investments on canteen_purchase_order_details.no_pr = acc_investments.reff_number WHERE canteen_purchase_orders.deleted_at IS NULL " . $tanggal . " order by delivery_date,canteen_purchase_orders.no_po,id ASC
        ");

    $data = array(
        'po_detail' => $po_detail
    );

    ob_clean();

    Excel::create('PO Kantin List '.$time, function($excel) use ($data){
        $excel->sheet('Location', function($sheet) use ($data) {
          return $sheet->loadView('accounting_purchasing.purchase_order_excel_canteen', $data);
      });
    })->export('xlsx');
}

// Cash Payment

public function IndexSuspend(){

    $title = "Request Suspense Payment";
    $title_jp = "";

    $emp = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
    ->first();

    return view('accounting_purchasing.cash_payment.index_suspend', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'employee' => $emp
    ));
}

public function fetchSuspend(){
    $suspend = db::select("SELECT * FROM acc_suspends order by id desc");

    $suspend_data = db::select("SELECT acc_suspends.* FROM acc_suspends where posisi = 'acc' order by id asc ");

    $response = array(
        'status' => true,
        'suspend' => $suspend,
        'suspend_data' => $suspend_data
    );
    return Response::json($response);
}

public function fetchSuspendMonitoring(Request $request)
{

    $data = db::select("
        SELECT
        count( id ) AS jumlah,
        MONTHNAME(submission_date) as bulan
        FROM
        acc_suspends
        GROUP BY
        monthname(submission_date)
        ORDER BY
        submission_date
        ");

    $response = array(
        'status' => true,
        'datas' => $data,
    );

    return Response::json($response); 
}

public function fetchSuspendDetail(Request $request){

    $suspend = AccSuspend::find($request->get('id'));

    $items = AccSuspendDetail::select('acc_suspend_details.*')->join('acc_suspends', 'acc_suspend_details.id_suspend', '=', 'acc_suspends.id')
    ->where('acc_suspends.id', '=', $request->get('id'))->get();

    $response = array(
        'status' => true,
        'suspend' => $suspend,
        'items' => $items,
    );
    return Response::json($response);
}

public function createSuspend(Request $request){
    try{
        $manager = null;
        $manager_name = null;

        $staff_acc = "PI1505001";
        $staff_acc_name = "Afifatuz Yulaichah";

        // $staff_acc = "PI1903018";
        // $staff_acc_name = "Mujahid Maruf";

        $manager_acc = null;
        $manager_acc_name = null;

        $direktur = "PI9709001";
        $tujuan_upload = 'files/cash_payment/suspend';

        $file = $request->file('file_attach');

        if ($file != null || $file != "") {
            $nama = $file->getClientOriginalName();
            $filename = pathinfo($nama, PATHINFO_FILENAME);
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename = md5($filename.date('YmdHisa')).'.'.$extension;
            $file->move($tujuan_upload,$filename);
        }else{
            $filename = null;
        }

        if($request->get('department') == "Production Engineering Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Maintenance Department' and position LIKE 'manager%'");
        }

        //Jika Pch / Proc maka pak imron
        else if($request->get('department') == "Purchasing Control Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Procurement Department' and position LIKE 'manager%'");
        }

        //Jika GA pak arief
        else if($request->get('department') == "General Affairs Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Human Resources Department' and position LIKE 'manager%'");
        }

        //Jika EI maka Assy
        else if($request->get('department') == "Educational Instrument (EI) Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Woodwind Instrument - Assembly (WI-A) Department' and position LIKE 'manager%'");
        }

        else
        {
            // Get Manager
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = '". $request->input('department') ."' and position LIKE 'manager%'");
        }

        if ($manag != null)
        {
            foreach ($manag as $mg)
            {
                $manager = $mg->employee_id;
                $manager_name = $mg->name;
            }
        }

        $manag_acc = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Accounting Department' and position  LIKE 'manager%'");

        if ($manag_acc != null)
        {
            foreach ($manag_acc as $mg_acc)
            {
                $manager_acc = $mg_acc->employee_id;
                $manager_acc_name = $mg_acc->name;
            }
        }

        $suspend = new AccSuspend([
            'submission_date' => $request->input('submission_date'),
            'title' => $request->input('title'),
            'currency' => $request->input('currency'),
            'amount' => $request->input('amount'),
            'file' => $filename,
            'pdf' => 'Suspend '.$request->input('title'). ' '.date('d-M-y', strtotime($request->input('submission_date'))).'.pdf',
            'posisi' => 'user', 
            'status' => 'approval', 
            'manager' => $manager,
            'manager_name' => $manager_name,
            'staff_acc' => $staff_acc,
            'staff_acc_name' => $staff_acc_name,
            'manager_acc' => $manager_acc,
            'manager_acc_name' => $manager_acc_name,
            'direktur' => $direktur,
            'created_by' => $request->input('emp_id'),
            'created_name' => $request->input('emp_name'),
            'department' => $request->input('department')
        ]);

        $suspend->save();
        $detail_amount = json_decode($request->input('amount_detail'));

        for ($i = 0;$i < count($detail_amount);$i++)
        {

            $remark = $detail_amount[$i]->detail;
            $no_pr = $detail_amount[$i]->no_pr;

            $detail_suspend = new AccSuspendDetail([
                'id_suspend' => $suspend->id,
                'remark' => $request->input('category'),
                'no_pr' => $no_pr,
                'detail' => $remark,
                'amount' => $detail_amount[$i]->amount,
                'created_by' => $request->input('emp_id'),
                'created_name' => $request->input('emp_name')
            ]);

            $detail_suspend->save();

            $updatepr = AccPurchaseRequisitionItem::where('no_pr', $no_pr)
            ->where('item_desc',$remark)
            ->update([
                'suspend' => $suspend->id, 
            ]);
        }

        $suspend_data = AccSuspend::select('acc_suspends.*','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_detail')
        ->leftJoin('acc_suspend_details', 'acc_suspends.id', '=', 'acc_suspend_details.id_suspend')
        ->where('acc_suspends.id', '=', $suspend->id)
        ->get();

        // $suspend_data = AccSuspend::where('id','=',$suspend->id)->first();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.cash_payment.report_suspend', array(
            'suspend' => $suspend_data,
            'id' => $suspend->id
        ));

        $pdf->save(public_path() . "/cash_list/suspend/Suspend ".$request->input('title'). " ".date('d-M-y', strtotime($request->input('submission_date'))).".pdf");

        $response = array(
            'status' => true,
            'message' => 'New Suspend Successfully Added'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function editSuspend(Request $request){
    try{
        $suspend = AccSuspend::where('id', '=', $request->get('id_edit'))->first();

        $file = $request->file('file_attach');
        $tujuan_upload = 'files/cash_payment/suspend';

        if ($file != null || $file != "") {
            $nama = $file->getClientOriginalName();
            $filename = pathinfo($nama, PATHINFO_FILENAME);
            $extension = pathinfo($nama, PATHINFO_EXTENSION);
            $filename = md5($filename.date('YmdHisa')).'.'.$extension;
            $file->move($tujuan_upload,$filename);
        }else{
            $filename = $suspend->file;
        }

        $suspend->submission_date = $request->input('submission_date');
        $suspend->title = $request->input('title');
        $suspend->category = $request->input('category');
        $suspend->currency = $request->input('currency');
        $suspend->amount = $request->input('amount');
        $suspend->pdf = 'Suspend '.$request->input('title'). ' '.date('d-M-y', strtotime($request->input('submission_date'))).'.pdf';
        $suspend->file = $filename;
        $suspend->created_by = $request->input('emp_id');
        $suspend->created_name = $request->input('emp_name');
        $suspend->save();

        $suspend_data = AccSuspend::select('acc_suspends.*','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_detail')
        ->leftJoin('acc_suspend_details', 'acc_suspends.id', '=', 'acc_suspend_details.id_suspend')
        ->where('acc_suspends.id', '=', $request->get('id_edit'))
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.cash_payment.report_suspend', array(
            'suspend' => $suspend_data,
            'id' => $suspend->id
        ));

        $pdf->save(public_path() . "/cash_list/suspend/Suspend ".$request->input('title'). " ".date('d-M-y', strtotime($request->input('submission_date'))).".pdf");

        $response = array(
            'status' => true,
            'message' => 'Suspend Updated'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function reportSuspend($id){

    $suspend = AccSuspend::select('acc_suspends.*','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_detail')
    ->leftJoin('acc_suspend_details', 'acc_suspends.id', '=', 'acc_suspend_details.id_suspend')
    ->where('acc_suspends.id', '=', $id)
    ->get();

    // $suspend = AccSuspend::find($id);

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('accounting_purchasing.cash_payment.report_suspend', array(
        'suspend' => $suspend,
        'id' => $id
    ));
    return $pdf->stream("Suspend ".$suspend[0]->title. " ".date('d-M-y', strtotime($suspend[0]->submission_date)).".pdf");
}

public function emailSuspend(Request $request){
    $suspend = AccSuspend::find($request->get('id'));

    try{
        if ($suspend->posisi == "user")
        {
            $mails = "select distinct email from acc_suspends join users on acc_suspends.manager = users.username where acc_suspends.id = ".$request->get('id');
            $mailtoo = DB::select($mails);

            $suspend->posisi = "manager";
            $suspend->save();

            $isimail = "select acc_suspends.*, acc_suspend_details.no_pr, acc_suspend_details.detail, acc_suspend_details.amount as amount_detail from acc_suspends left join acc_suspend_details on acc_suspends.id = acc_suspend_details.id_suspend where acc_suspends.id = ".$request->get('id');

            $suspend_payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($suspend_payment, 'suspend'));

            $response = array(
              'status' => true,
              'datas' => "Berhasil"
          );

            return Response::json($response);
        }
    } 
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'datas' => "Gagal"
      );
        return Response::json($response);
    }
}

public function suspendapprovalmanager($id){
    $suspend = AccSuspend::find($id);
    try{
        if ($suspend->posisi == "manager")
        {
            $suspend->posisi = "staff_acc";
            $suspend->status_manager = "Approved/".date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_suspends join users on acc_suspends.staff_acc = users.username where acc_suspends.id = '".$id."'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $suspend->save();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $suspend_data = AccSuspend::select('acc_suspends.*','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_detail')
            ->leftJoin('acc_suspend_details', 'acc_suspends.id', '=', 'acc_suspend_details.id_suspend')
            ->where('acc_suspends.id', '=', $id)
            ->get();

            $pdf->loadView('accounting_purchasing.cash_payment.report_suspend', array(
                'suspend' => $suspend_data,
                'id' => $id
            ));

            $pdf->save(public_path() . "/cash_list/suspend/Suspend ".$suspend->title. " ".date('d-M-y', strtotime($suspend->submission_date)).".pdf");

            $isimail = "select acc_suspends.*, acc_suspend_details.no_pr, acc_suspend_details.detail, acc_suspend_details.amount as amount_detail from acc_suspends left join acc_suspend_details on acc_suspends.id = acc_suspend_details.id_suspend where acc_suspends.id = ".$id;

            // $isimail = "select * from acc_suspends where acc_suspends.id = ".$id;
            $suspend_payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($suspend_payment, 'suspend'));

            $message = 'Suspense Payment '.$suspend->title;
            $message2 ='Successfully Approved';
            
        }
        else{
            $message = 'Suspense Payment '.$suspend->title;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $suspend->title,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Suspend');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $suspend->title,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Suspend');
    }
}

public function suspendapprovalstaffacc($id){
    $suspend = AccSuspend::find($id);
    try{
        if ($suspend->posisi == "staff_acc")
        {
            $suspend->posisi = "manager_acc";
            $suspend->status_staff_acc = "Approved/".date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_suspends join users on acc_suspends.manager_acc = users.username where acc_suspends.id = '" . $id . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $suspend->save();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');


            $suspend_data = AccSuspend::select('acc_suspends.*','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_detail')
            ->leftJoin('acc_suspend_details', 'acc_suspends.id', '=', 'acc_suspend_details.id_suspend')
            ->where('acc_suspends.id', '=', $id)
            ->get();

            $pdf->loadView('accounting_purchasing.cash_payment.report_suspend', array(
                'suspend' => $suspend_data,
                'id' => $id
            ));

            $pdf->save(public_path() . "/cash_list/suspend/Suspend ".$suspend->title. " ".date('d-M-y', strtotime($suspend->submission_date)).".pdf");


            $isimail = "select acc_suspends.*, acc_suspend_details.no_pr, acc_suspend_details.detail, acc_suspend_details.amount as amount_detail from acc_suspends left join acc_suspend_details on acc_suspends.id = acc_suspend_details.id_suspend where acc_suspends.id = ".$id;

            // $isimail = "select * from acc_suspends where acc_suspends.id = ".$id;
            $suspend_payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($suspend_payment, 'suspend'));

            $message = 'Suspense Payment '.$suspend->title;
            $message2 ='Successfully Approved';
            
        }
        else{
            $message = 'Suspense Payment '.$suspend->title;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $suspend->title,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Suspend');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $suspend->title,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Suspend');
    }
}

public function suspendapprovalmanageracc($id){
    $suspend = AccSuspend::find($id);
    try{
        if ($suspend->posisi == "manager_acc")
        {
            $suspend->posisi = "direktur";
            $suspend->status_manager_acc = "Approved/".date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_suspends join users on acc_suspends.direktur = users.username where acc_suspends.id = '" . $id . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $suspend->save();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $suspend_data = AccSuspend::select('acc_suspends.*','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_detail')
            ->leftJoin('acc_suspend_details', 'acc_suspends.id', '=', 'acc_suspend_details.id_suspend')
            ->where('acc_suspends.id', '=', $id)
            ->get();

            $pdf->loadView('accounting_purchasing.cash_payment.report_suspend', array(
                'suspend' => $suspend_data,
                'id' => $id
            ));

            $pdf->save(public_path() . "/cash_list/suspend/Suspend ".$suspend->title. " ".date('d-M-y', strtotime($suspend->submission_date)).".pdf");

            // $isimail = "select * from acc_suspends where acc_suspends.id = ".$id;
            $isimail = "select acc_suspends.*, acc_suspend_details.no_pr, acc_suspend_details.detail, acc_suspend_details.amount as amount_detail from acc_suspends left join acc_suspend_details on acc_suspends.id = acc_suspend_details.id_suspend where acc_suspends.id = ".$id;

            $suspend_payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($suspend_payment, 'suspend'));

            $message = 'Suspense Payment '.$suspend->title;
            $message2 ='Successfully Approved';
            
        }
        else{
            $message = 'Suspense Payment '.$suspend->title;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $suspend->title,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Suspend');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $suspend->title,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Suspend');
    }
}

public function suspendapprovaldirektur($id){
    $suspend = AccSuspend::find($id);
    try{
        if ($suspend->posisi == "direktur")
        {
            $suspend->posisi = 'acc';
            $suspend->status_direktur = "Approved/".date('Y-m-d H:i:s');
            $suspend->status = "received";

                //kirim email ke Mbak Laila & Mbak Afifah
            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and employee_syncs.department = 'Accounting Department' and (employee_id = 'PI0902001'  or employee_id = 'PI1505001')";
            $mailtoo = DB::select($mails);

            $suspend->save();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $suspend_data = AccSuspend::select('acc_suspends.*','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_detail')
            ->leftJoin('acc_suspend_details', 'acc_suspends.id', '=', 'acc_suspend_details.id_suspend')
            ->where('acc_suspends.id', '=', $id)
            ->get();

            $pdf->loadView('accounting_purchasing.cash_payment.report_suspend', array(
                'suspend' => $suspend_data,
                'id' => $id
            ));

            $pdf->save(public_path() . "/cash_list/suspend/Suspend ".$suspend->title. " ".date('d-M-y', strtotime($suspend->submission_date)).".pdf");

            $isimail = "select acc_suspends.*, acc_suspend_details.no_pr, acc_suspend_details.detail, acc_suspend_details.amount as amount_detail from acc_suspends left join acc_suspend_details on acc_suspends.id = acc_suspend_details.id_suspend where acc_suspends.id = ".$id;
            // $isimail = "select * from acc_suspends where acc_suspends.id = ".$id;
            $payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($payment, 'suspend'));

            $message = 'Suspense Payment '.$suspend->title;
            $message2 ='Successfully Approved';

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.cash_payment.report_suspend', array(
                'suspend' => $suspend_data,
                'id' => $id
            ));

            $pdf->save(public_path() . "/cash_list/suspend/Suspend ".$suspend->title. " ".date('d-M-y', strtotime($suspend->submission_date)).".pdf");
        }
        else{
            $message = 'Suspenses Payment '.$suspend->title;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $suspend->title,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Cash Payment');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $suspend->title,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Cash Payment');
    }
}

public function IndexSettlement(){

    $title = "Settlement";
    $title_jp = "";

    $emp = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
    ->first();

    $settlement = db::select("
       SELECT c.*
       FROM
       ( SELECT
           acc_suspends.id,
           acc_suspends.title,
           acc_purchase_requisitions.emp_id,
           acc_purchase_requisitions.emp_name,
           acc_purchase_requisition_items.item_currency,
           SUM(case when acc_suspend_details.settle is null then acc_suspend_details.amount else 0 end) as amount_belum_settle,
           SUM(case when acc_suspend_details.settle is not null then acc_suspend_details.amount else 0 end) as amount_sudah_settle
           FROM
           acc_suspends
           JOIN acc_suspend_details ON acc_suspends.id = acc_suspend_details.id_suspend
           JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr
           JOIN acc_purchase_requisition_items ON acc_suspend_details.no_pr = acc_purchase_requisition_items.no_pr 
           AND acc_suspend_details.detail = acc_purchase_requisition_items.item_desc 
           WHERE
           acc_suspends.posisi = 'acc'
           and acc_suspend_details.received_at is not null
           GROUP BY 
           id,
           acc_suspends.title,
           emp_id,
           emp_name,
           item_currency
           ORDER BY
           acc_suspends.id ASC) c
       where c.amount_belum_settle <> 0
       ");

    return view('accounting_purchasing.cash_payment.index_settlement', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'settlement' => $settlement,
        'employee' => $emp
    ));
}

public function fetchSettlement(){
    $settlement = db::select("SELECT
            *
        FROM
        acc_settlements
        order by id desc
        ");

    $response = array(
        'status' => true,
        'settlement' => $settlement
    );
    return Response::json($response);
}


public function fetchSuspendList(Request $request)
{
    $suspend = AccSuspend::select('acc_suspends.id','acc_suspends.title','acc_suspends.submission_date')->join('acc_suspend_details', 'acc_suspends.id', '=', 'acc_suspend_details.id_suspend')
    ->where('posisi','=','acc')
    ->distinct()
    ->get();

    $response = array(
        'status' => true,
        'suspend' => $suspend
    );

    return Response::json($response);
}

public function pilihSuspend(Request $request)
{
    $html = array();
    $list_item = AccPurchaseRequisitionItem::where('no_pr', $request->no_pr)
    ->whereNull('sudah_po')
    ->get();

    $lists = "<option value=''>-- Pilih Item --</option>";
    foreach ($list_item as $item)
    {
        $lists .= "<option value='" . $item->item_code . "'>" . $item->item_desc . "</option>"; 
        
    }
    return json_encode($lists);
}

public function suspendGetDetail(Request $request)
{
    $html = array();
    $kode_suspend = AccSuspend::select('id','amount')
    ->where('id', $request->id_suspend)
    ->get();
    
    foreach ($kode_suspend as $sus)
    {
        $html = array(
            'id' => $sus->id,
            'amount' => $sus->amount,
        );

    }

    return json_encode($html);
}

public function pilihPRSuspend(Request $request)
{
    $html = array();
    $list_item = AccPurchaseRequisitionItem::where('no_pr', $request->no_pr)
    ->whereNull('sudah_po')
    ->whereNull('suspend')
    ->get();

    $lists = "<option value=''>-- Pilih Item --</option>";
    foreach ($list_item as $item)
    {
        $lists .= "<option value='" . $item->item_desc . "'>" . $item->item_desc . "</option>"; 

    }
    return json_encode($lists);
}

public function prgetprice(Request $request)
{
    $html = array();
    $kode_item = AccPurchaseRequisitionItem::join('acc_purchase_requisitions', 'acc_purchase_requisition_items.no_pr', '=', 'acc_purchase_requisitions.no_pr')
    ->where('item_desc', $request->item_desc)
    ->where('acc_purchase_requisition_items.no_pr', $request->no_pr)
    ->get();

    foreach ($kode_item as $item)
    {
        $html = array(
            'item_price' => $item->item_amount,
        );

    }

    return json_encode($html);
}

public function createSettlement(Request $request){

    try{
        $manager = null;
        $manager_name = null;
        // $staff_acc = "PI1903018";
        // $staff_acc_name = "Mujahid Maruf";

        $staff_acc = "PI1505001";
        $staff_acc_name = "Afifatuz Yulaichah";
        $manager_acc = null;
        $manager_acc_name = null;
        $direktur = "PI9709001";

        $tujuan_upload = 'files/cash_payment/settlement';

        if($request->get('department') == "Production Engineering Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Maintenance Department' and position LIKE 'manager%'");
        }
        //Jika Pch / Proc maka pak imron
        else if($request->get('department') == "Purchasing Control Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Procurement Department' and position LIKE 'manager%'");
        }
        //Jika GA pak arief
        else if($request->get('department') == "General Affairs Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Human Resources Department' and position LIKE 'manager%'");
        }
        //Jika EI maka Assy
        else if($request->get('department') == "Educational Instrument (EI) Department")
        {
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Woodwind Instrument - Assembly (WI-A) Department' and position LIKE 'manager%'");
        }
        else
        {
            // Get Manager
            $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = '". $request->input('department') ."' and position LIKE 'manager%'");
        }

        if ($manag != null)
        {
            foreach ($manag as $mg)
            {
                $manager = $mg->employee_id;
                $manager_name = $mg->name;
            }
        }

        $manag_acc = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Accounting Department' and position LIKE 'manager%'");

        if ($manag_acc != null)
        {
            foreach ($manag_acc as $mg_acc)
            {
                $manager_acc = $mg_acc->employee_id;
                $manager_acc_name = $mg_acc->name;
            }
        }


        $settle = new AccSettlement([
            'submission_date' => $request->input('submission_date'),
            'title' => $request->input('title'),
            'currency' => $request->input('currency'),
            'amount' => $request->input('amount'),
            'pdf' => 'Settlement '.$request->input('title'). ' '.date('d-M-y', strtotime($request->input('submission_date'))).'.pdf',
            'posisi' => 'user', 
            'status' => 'approval', 
            'manager' => $manager,
            'manager_name' => $manager_name,
            'staff_acc' => $staff_acc,
            'staff_acc_name' => $staff_acc_name,
            'manager_acc' => $manager_acc,
            'manager_acc_name' => $manager_acc_name,
            'direktur' => $direktur,
            'created_by' => Auth::user()->username,
            'created_name' => Auth::user()->name
        ]);

        $settle->save();

        $detail_amount = json_decode($request->input('settlement_detail'));

        for ($i = 0;$i < count($detail_amount);$i++)
        {
            $detail_settle = new AccSettlementDetail([
                'id_settlement' => $settle->id,
                'id_settlement_user' => $detail_amount[$i]->id_settle,
                'description' => $detail_amount[$i]->description,
                'amount' => $detail_amount[$i]->amount,
                'nota' => $detail_amount[$i]->nota,
                'created_by' => Auth::user()->username,
                'created_name' => Auth::user()->name
            ]);

            $detail_settle->save();

            $data3 = AccSettlementUserDetail::where('id', $detail_amount[$i]->id_settle)
            ->update(['sudah_settle' => 'true']);
        }

        $settle_data = AccSettlement::select('acc_settlements.*','acc_settlement_user_details.description','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
        ->leftJoin('acc_settlement_details', 'acc_settlements.id', '=', 'acc_settlement_details.id_settlement')
        ->join('acc_settlement_user_details', function($join) {
         $join->on('acc_settlement_details.id_settlement_user', '=', 'acc_settlement_user_details.id');
         $join->on('acc_settlement_details.description','=', 'acc_settlement_user_details.description');
     })
        ->join('acc_settlement_users', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
        ->join('acc_suspend_details', 'acc_settlement_users.id', '=', 'acc_suspend_details.settle')
        ->where('acc_settlements.id', '=', $settle->id)
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.cash_payment.report_settlement', array(
            'settlement' => $settle_data
        ));

        $pdf->save(public_path() . "/cash_list/settlement/Settlement ".$request->input('title'). " ".date('d-M-y', strtotime($request->input('submission_date'))).".pdf");

        $response = array(
            'status' => true,
            'message' => 'New Settlement Successfully Added'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function fetchSettlementList(Request $request)
{
    $settle = AccSettlementUser::select('acc_settlement_users.title','acc_settlement_users.submission_date','acc_settlement_users.created_name','acc_settlement_user_details.id as id_set','acc_settlement_user_details.id_settlement','acc_settlement_user_details.description','acc_settlement_user_details.amount','acc_settlement_user_details.nota')
    ->join('acc_settlement_user_details', 'acc_settlement_users.id', '=', 'acc_settlement_user_details.id_settlement')
    ->wherenull('sudah_settle')
    ->get();

    $response = array(
        'status' => true,
        'settle' => $settle
    );

    return Response::json($response);
}


public function indexAssetTransfer()
{
    $title = 'Asset Transfer Location';
    $title_jp = '??';

    $sec = db::select('SELECT section from employee_syncs where department = (SELECT department from employee_syncs where employee_id = "'.Auth::user()->username.'")');
        $sec_arr = [];

        foreach ($sec as $section) {
            array_push($sec_arr, $section->section);
        }

        $asset_list = FixedAssetitem::leftJOin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereIn('fixed_asset_items.section', $sec_arr)
        ->whereNull('retired_date')
        ->select('sap_number', 'fixed_asset_name', 'location', 'fixed_asset_items.section', 'pic', 'name')
        ->get();
    // FixedAssetRegistration::select('sap_id', 'asset_name', 'pic', 'location', 'created_by')
    // ->get();

        $section = EmployeeSync::select('section')->groupBy('section')->get();

    // $asset_pic = FixedAssetPic::select('employee_id', 'name', 'section', 'location')->get();
        $asset_pic = FixedAssetItem::leftJoin('employee_syncs', 'employee_syncs.employee_id', '=', 'fixed_asset_items.pic')
        ->whereNull('retired_date')
        ->select('fixed_asset_items.section', 'name', 'location', 'pic')
        ->get();

    // dd($asset_list);

        return view('fixed_asset.form.transfer_form', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'asset_list' => $asset_list,
            'section_list' => $section,
            'pic_list' => $asset_pic
        ))->with('page', 'Fixed Asset Transfer Location');  
    }

    public function reportFixedAsset(){
        $title = 'Report Fixed Asset';
        $title_jp = '';

        $dpt = EmployeeSync::select('department')->where('employee_id', '=', Auth::user()->username)->first();

        return view('fixed_asset.report_file.report_fixed_asset', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'my_dpt' => $dpt
        ))->with('page', 'Report Fixed Asset');
    }

    public function fetchReportFixedAsset(Request $request)
    {
        $lists = FixedAssetitem::select('*')
        ->get();

        $resume = FixedAssetitem::whereNull('retired_date')
        ->select('section', db::raw('count(id) as jml_asset'))
        ->groupBy('section')
        ->orderBy(db::raw('count(id)'))
        ->get();

        $dpt_list = db::select('SELECT department, section from employee_syncs where end_date is null group by department, section');

        $response = array(
          'status' => true,
          'lists' => $lists,
          'resume' => $resume,
          'dpt_lists' => $dpt_list,
      );
        return Response::json($response);
    }

    public function fetchReportFixedAssetDetail(Request $request)
    {
        try {
            $fixed_item = FixedAssetitem::where('sap_number', '=', $request->get('sap_number'))->first();

            $fixed_audit = FixedAssetAudit::where('sap_number', '=' ,$request->get('sap_number'))->where('period', '>=', date('Y-m-d', strtotime('2022-01-01')))->get();

            $response = array(
                'status' => true,
                'fixed_item' => $fixed_item,
                'fixed_audit' => $fixed_audit
            );
            return Response::json($response);
        } catch (\Exception $e) {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );
            return Response::json($response);
        }
    }

    public function updateVendorPhotoFixedAsset(Request $request)
    {
        try {
            $last_period = FixedAssetCheck::select('period')->orderBy('period','desc')->first();

            if ($request->get('period') != '') {
                $period = $request->get('period');
            } else if ($last_period){
                $period = $last_period->period;
            } else {
                $period = $request->get('period');
            }

            $asset_images = db::connection('ympimis_online')->table('fixed_asset_checks')
            ->where('period', $period)
            ->whereNotNull('result_images')
            ->select('result_images')
            ->get();


            $a = '';

            foreach ($asset_images as $ai) {
                $file = file_get_contents('http://10.109.52.1:887/miraidev_online/public/files/fixed_asset/asset_check/'.$ai->result_images);
                $save = file_put_contents('files/fixed_asset/asset_check/'.$ai->result_images,$file);
            }

            $response = array(
                'status' => true,
            );
            return Response::json($response);

        } catch (Exception $e) {
            $response = array(
                'status' => false,
                'message' => $e->getMessage()
            );
            return Response::json($response);
        }
    }

    public function indexDetailCheckAsset($status,$section,$location, $period)
    {
        $location = FixedAssetAudit::distinct()->select('location', 'asset_section')->get();
        $section = FixedAssetPic::select('section')->get();

        return view('fixed_asset.report_file.detail_audit',  
            array(
              'title' => 'Detail Check Audit', 
              'title_jp' => '',
              'location' => $location,
              'section' => $section,
          )
        )->with('page', 'Report Fixed Asset');
    }


    public function IndexSuspendControl(){

        $title = "Suspense Control";
        $title_jp = "";

        $emp = EmployeeSync::where('employee_id', Auth::user()->username)
        ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
        ->first();

        return view('accounting_purchasing.cash_payment.index_suspend_control', array(
            'title' => $title,
            'title_jp' => $title_jp,
            'employee' => $emp
        ));
    }

    public function fetchSuspendControl(){
        $suspend = db::select("SELECT DISTINCT acc_suspends.* FROM acc_suspends JOIN acc_suspend_details on acc_suspends.id = acc_suspend_details.id_suspend where posisi = 'acc' and received_at is null order by id asc");

        $response = array(
            'status' => true,
            'suspend' => $suspend
        );
        return Response::json($response);
    }

    public function fetchSuspendControlDetail(Request $request){
        $suspend = db::select("
            SELECT
            acc_suspends.id,
            acc_purchase_requisitions.emp_id,
            acc_purchase_requisitions.emp_name,
            acc_purchase_requisition_items.item_currency,
            SUM(acc_suspend_details.amount) as amount
            FROM
            acc_suspends
            JOIN acc_suspend_details ON acc_suspends.id = acc_suspend_details.id_suspend
            JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr
            JOIN acc_purchase_requisition_items ON acc_suspend_details.no_pr = acc_purchase_requisition_items.no_pr and acc_suspend_details.detail = acc_purchase_requisition_items.item_desc
            WHERE
            acc_suspends.id = '".$request->get('id')."'
            AND acc_suspends.posisi = 'acc'
            GROUP BY 
            id,
            emp_id,
            emp_name,
            item_currency
            ORDER BY
            acc_suspends.id DESC
            ");

        $response = array(
            'status' => true,
            'suspend' => $suspend
        );
        return Response::json($response);
    }

    public function fetchSuspendReportDetail(Request $request)
    {
      try {
        $suspend = DB::SELECT("
          SELECT
          acc_suspends.id,
          acc_suspends.title,
          acc_purchase_requisitions.no_pr,
          acc_purchase_requisitions.emp_name,
          acc_purchase_requisition_items.item_currency,
          acc_suspend_details.detail,
          acc_suspend_details.amount,
          acc_suspend_details.settle
          FROM
          acc_suspends
          JOIN acc_suspend_details ON acc_suspends.id = acc_suspend_details.id_suspend
          JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr
          JOIN acc_purchase_requisition_items ON acc_suspend_details.no_pr = acc_purchase_requisition_items.no_pr 
          AND acc_suspend_details.detail = acc_purchase_requisition_items.item_desc 
          WHERE
          acc_suspends.id = '".$request->get('id')."' 
          AND acc_purchase_requisitions.emp_name = '".$request->get('name')."'
          ORDER BY
          acc_suspends.id DESC
          ");

        $response = array(
          'status' => true,
          'suspend' => $suspend
      );
        return Response::json($response);
    } catch (\Exception $e) {
        $response = array(
          'status' => false,
          'message' => $e->getMessage()
      );
        return Response::json($response);
    }
}

public function giveSuspend(Request $request){
    $suspend = AccSuspend::find($request->get('id'));

    try{

        $stat = DB::SELECT("
            UPDATE acc_suspend_details
            JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr 
            SET received_at = '".date('Y-m-d H:i:s')."' 
            WHERE
            acc_suspend_details.id_suspend = '".$request->get('id')."' 
            AND acc_purchase_requisitions.emp_name = '".$request->get('name')."'
            ");

        $mails = "select distinct email from users where users.username = '".$request->get('emp_id')."'";
        $mailtoo = DB::select($mails);

        $isimail = "SELECT
        acc_suspends.*,
        acc_purchase_requisitions.no_pr,
        acc_purchase_requisitions.emp_id,
        acc_purchase_requisitions.emp_name,
        acc_purchase_requisition_items.item_currency,
        acc_suspend_details.detail,
        acc_suspend_details.amount as amount_detail
        FROM
        acc_suspends
        JOIN acc_suspend_details ON acc_suspends.id = acc_suspend_details.id_suspend
        JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr
        JOIN acc_purchase_requisition_items ON acc_suspend_details.no_pr = acc_purchase_requisition_items.no_pr 
        AND acc_suspend_details.detail = acc_purchase_requisition_items.item_desc 
        WHERE
        acc_suspends.id = '".$request->get('id')."' 
        and acc_purchase_requisitions.emp_id = '".$request->get('emp_id')."'
        ORDER BY acc_suspends.id DESC";

        $suspend_payment = db::select($isimail);

        Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($suspend_payment, 'suspend_money'));

        $response = array(
          'status' => true,
          'datas' => "Berhasil"
      );

        return Response::json($response);
    } 
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'datas' => "Gagal"
      );
        return Response::json($response);
    }
}

public function IndexSettlementUser(){

    $title = "Settlement User";
    $title_jp = "";


    $emp = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('employee_id', 'name', 'position', 'department', 'section', 'group')
    ->first();

    if (str_contains(Auth::user()->role_code, 'MIS')) {
        $settlement = db::select("
            SELECT
            acc_suspends.id,
            acc_suspends.title,
            acc_purchase_requisitions.emp_id,
            acc_purchase_requisitions.emp_name,
            acc_purchase_requisition_items.item_currency,
            SUM(case when acc_suspend_details.settle is null then acc_suspend_details.amount else 0 end) as amount_belum_settle,
            SUM(case when acc_suspend_details.settle is not null then acc_suspend_details.amount else 0 end) as amount_sudah_settle
            FROM
            acc_suspends
            JOIN acc_suspend_details ON acc_suspends.id = acc_suspend_details.id_suspend
            JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr
            JOIN acc_purchase_requisition_items ON acc_suspend_details.no_pr = acc_purchase_requisition_items.no_pr 
            AND acc_suspend_details.detail = acc_purchase_requisition_items.item_desc 
            WHERE
            acc_suspends.posisi = 'acc'
            and acc_suspend_details.received_at is not null
            GROUP BY 
            id,
            title,
            emp_id,
            emp_name,
            item_currency
            ORDER BY
            acc_suspends.id DESC
            ");
    }
    else{
        $settlement = db::select("
            SELECT
            acc_suspends.id,
            acc_suspends.title,
            acc_purchase_requisitions.emp_id,
            acc_purchase_requisitions.emp_name,
            acc_purchase_requisition_items.item_currency,
            SUM(case when acc_suspend_details.settle is null then acc_suspend_details.amount else 0 end) as amount_belum_settle,
            SUM(case when acc_suspend_details.settle is not null then acc_suspend_details.amount else 0 end) as amount_sudah_settle
            FROM
            acc_suspends
            JOIN acc_suspend_details ON acc_suspends.id = acc_suspend_details.id_suspend
            JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr
            JOIN acc_purchase_requisition_items ON acc_suspend_details.no_pr = acc_purchase_requisition_items.no_pr 
            AND acc_suspend_details.detail = acc_purchase_requisition_items.item_desc 
            WHERE
            emp_id = '".Auth::user()->username."'
            and acc_suspends.posisi = 'acc'
            and acc_suspend_details.received_at is not null
            GROUP BY 
            id,
            title,
            emp_id,
            emp_name,
            item_currency
            ORDER BY
            acc_suspends.id DESC

            ");
    }

    return view('accounting_purchasing.cash_payment.index_settlement_user', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'settlement' => $settlement,
        'employee' => $emp
    ));
}

public function fetchSettlementUser(){
    try{


        if (str_contains(Auth::user()->role_code, 'MIS')) {
            $settlement = db::select("SELECT * FROM acc_settlement_users order by id desc");
        }
        else{
            $settlement = db::select("SELECT * FROM acc_settlement_users where created_by = '".auth::user()->username."' order by id desc");
        }

        $response = array(
            'status' => true,
            'settlement' => $settlement,
        );
        return Response::json($response);
    } 
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'settlement' => "Gagal"
      );
        return Response::json($response);
    }
}

public function fetchSettlementUserDetail(Request $request)
{
  try {
    $settlement = DB::SELECT("
      SELECT
      acc_settlement_users.*,
      acc_settlement_user_details.id_settlement,
      acc_settlement_user_details.description,
      acc_settlement_user_details.amount as amount_settle,
      acc_settlement_user_details.nota,
      acc_settlement_user_details.sudah_settle
      FROM
      acc_settlement_users
      JOIN acc_settlement_user_details ON acc_settlement_users.id = acc_settlement_user_details.id_settlement
      WHERE
      acc_settlement_users.id = '".$request->get('id')."' 
      ORDER BY
      acc_settlement_users.id DESC
      
      ");

    $response = array(
      'status' => true,
      'settlement' => $settlement
  );
    return Response::json($response);
} catch (\Exception $e) {
    $response = array(
      'status' => false,
      'message' => $e->getMessage()
  );
    return Response::json($response);
}
}

public function fetchSuspendListUser(Request $request)
{

    if (str_contains(Auth::user()->role_code, 'MIS')) {

        $suspend_user = db::select("
            SELECT
            acc_suspends.id,
            acc_suspends.title,
            acc_purchase_requisitions.no_pr,
            acc_purchase_requisitions.emp_id,
            acc_purchase_requisitions.emp_name,
            acc_purchase_requisition_items.item_currency,
            acc_suspend_details.detail,
            acc_suspend_details.received_at,
            acc_suspend_details.amount 
            FROM
            acc_suspends
            JOIN acc_suspend_details ON acc_suspends.id = acc_suspend_details.id_suspend
            JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr
            JOIN acc_purchase_requisition_items ON acc_suspend_details.no_pr = acc_purchase_requisition_items.no_pr 
            AND acc_suspend_details.detail = acc_purchase_requisition_items.item_desc 
            WHERE
            acc_suspends.posisi = 'acc'
            and acc_suspend_details.received_at is not null
            and acc_suspend_details.settle is null
            ORDER BY
            acc_suspends.id DESC
            ");
    }
    else{

        $suspend_user = db::select("
            SELECT
            acc_suspends.id,
            acc_suspends.title,
            acc_purchase_requisitions.no_pr,
            acc_purchase_requisitions.emp_id,
            acc_purchase_requisitions.emp_name,
            acc_purchase_requisition_items.item_currency,
            acc_suspend_details.detail,
            acc_suspend_details.received_at,
            acc_suspend_details.amount 
            FROM
            acc_suspends
            JOIN acc_suspend_details ON acc_suspends.id = acc_suspend_details.id_suspend
            JOIN acc_purchase_requisitions ON acc_purchase_requisitions.no_pr = acc_suspend_details.no_pr
            JOIN acc_purchase_requisition_items ON acc_suspend_details.no_pr = acc_purchase_requisition_items.no_pr 
            AND acc_suspend_details.detail = acc_purchase_requisition_items.item_desc 
            WHERE
            emp_id = '".Auth::user()->username."'
            and acc_suspends.posisi = 'acc'
            and acc_suspend_details.received_at is not null
            and acc_suspend_details.settle is null
            ORDER BY
            acc_suspends.id DESC
            ");

        $settlement = db::select("SELECT * FROM acc_settlement_users where created_by = '".auth::user()->username."'");
    }



    $response = array(
        'status' => true,
        'suspend_user' => $suspend_user
    );

    return Response::json($response);
}

public function suspendGetDetailUser(Request $request)
{
    $html = array();

    $kode_suspend = AccSuspendDetail::select('id','amount')
    ->where('id_suspend', $request->id_suspend)
    ->where('detail', $request->detail)
    ->get();

    foreach ($kode_suspend as $sus)
    {
        $html = array(
            'id' => $sus->id,
            'amount' => $sus->amount,
        );

    }

    return json_encode($html);
}

public function createSettlementUser(Request $request){
    try{
        $tujuan_upload = 'files/cash_payment/settlement';

        $settle = new AccSettlementUser([
            'submission_date' => $request->input('submission_date'),
            'title' => $request->input('title'),
            'amount' => $request->input('amount'),
            'posisi' => 'user',
            'created_by' => $request->input('emp_id'),
            'created_name' => $request->input('emp_name')
        ]);

        $settle->save();

        $settlement_detail = json_decode($request->input('settlement_detail'));
        // $settlement_detail_file = $request->file('settlement_detail_file');

        for ($i = 0;$i < count($settlement_detail);$i++)
        {
            $a = $i + 1;
            $file = $request->file('nota_'.$a);
            
            $nama = $file->getClientOriginalName();

            $filename = pathinfo($nama, PATHINFO_FILENAME);
            $extension = pathinfo($nama, PATHINFO_EXTENSION);

            $filename = md5($filename.date('YmdHisa')).'.'.$extension;

            $file->move($tujuan_upload,$filename);

            $sd = new AccSettlementUserDetail([
                'id_settlement' => $settle->id,
                'description' => $settlement_detail[$i]->description,
                'amount' => $settlement_detail[$i]->amount_settle,
                'nota' => $filename,
                'created_by' => Auth::user()->username,
                'created_name' => Auth::user()->name
            ]); 

            $sd->save();
        }

        $suspend_detail = json_decode($request->input('suspend_detail'));


        for ($i = 0;$i < count($suspend_detail);$i++)
        {
            $suspend_item = explode("_", $suspend_detail[$i]->suspend);

            $sud = AccSuspendDetail::where('id_suspend', $suspend_item[0])
            ->where('detail',$suspend_item[1])
            ->update([
                'settle' => $settle->id, 
            ]);
        }

        $response = array(
            'status' => true,
            'message' => 'New Settlement Successfully Created'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function pilihSettlement(Request $request)
{
    $html = array();

    $list_item = AccSettlementUserDetail::where('id', $request->id_settlement)
    ->whereNull('sudah_settle')
    ->get();

    $lists = "<option value=''>-- Pilih Detail --</option>";
    foreach ($list_item as $item)
    {
        $lists .= "<option value='".$item->description."'>".$item->description."</option>"; 

    }
    return json_encode($lists);
}

public function settlementGetDetail(Request $request)
{

    $html = array();
    
    $kode_suspend = AccSettlementUserDetail::select('nota','amount')
    ->where('id', $request->id)
    ->where('description', $request->description)
    ->get();
    
    foreach ($kode_suspend as $sus)
    {
        $html = array(
            'amount' => $sus->amount,
            'nota' => $sus->nota,
        );

    }

    return json_encode($html);
}

public function reportSettlement($id){

    $settlement = AccSettlement::select('acc_settlements.*','acc_settlement_user_details.description','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
    ->leftJoin('acc_settlement_details', 'acc_settlements.id', '=', 'acc_settlement_details.id_settlement')
    ->leftJoin('acc_settlement_user_details', function($join) {
       $join->on('acc_settlement_details.id_settlement_user', '=', 'acc_settlement_user_details.id');
       // $join->on('acc_settlement_details.description','=', 'acc_settlement_user_details.description');
   })
    ->leftJoin('acc_settlement_users', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
    ->leftJoin('acc_suspend_details', function($join) {
       $join->on('acc_suspend_details.settle', '=', 'acc_settlement_user_details.id');
   })
    ->where('acc_settlements.id', '=', $id)
    ->get();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('accounting_purchasing.cash_payment.report_settlement', array(
        'settlement' => $settlement
    ));
    return $pdf->stream("Settlement ".$settlement[0]->title. " ".date('d-M-y', strtotime($settlement[0]->submission_date)).".pdf");
}

public function emailSettlement(Request $request){
    $settlement = AccSettlement::find($request->get('id'));

    try{
        if ($settlement->posisi == "user")
        {
            $mails = "select distinct email from acc_settlements join users on acc_settlements.manager = users.username where acc_settlements.id = ".$request->get('id');
            $mailtoo = DB::select($mails);

            $settlement->posisi = "manager";
            $settlement->save();

            $settlement_payment = AccSettlement::select('acc_settlements.*','acc_settlement_user_details.description','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
            ->leftJoin('acc_settlement_details', 'acc_settlements.id', '=', 'acc_settlement_details.id_settlement')
            ->leftJoin('acc_settlement_user_details', function($join) {
               $join->on('acc_settlement_details.id_settlement_user', '=', 'acc_settlement_user_details.id');
               // $join->on('acc_settlement_details.description','=', 'acc_settlement_user_details.description');
           })
            ->leftJoin('acc_settlement_users', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
            ->leftJoin('acc_suspend_details', function($join) {
               $join->on('acc_suspend_details.settle', '=', 'acc_settlement_user_details.id');
           })
            ->where('acc_settlements.id', '=', $id)
            ->get();

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($settlement_payment, 'settlement'));

            $response = array(
              'status' => true,
              'datas' => "Berhasil"
          );

            return Response::json($response);
        }
    } 
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'datas' => "Gagal"
      );
        return Response::json($response);
    }
}

public function settlementapprovalmanager($id){
    $settlement = AccSettlement::find($id);
    try{
        if ($settlement->posisi == "manager")
        {
            $settlement->posisi = "staff_acc";
            $settlement->status_manager = "Approved/".date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_settlements join users on acc_settlements.staff_acc = users.username where acc_settlements.id = '".$id."'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $settlement->save();

            $settlement_payment = AccSettlement::select('acc_settlements.*','acc_settlement_user_details.description','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
            ->leftJoin('acc_settlement_details', 'acc_settlements.id', '=', 'acc_settlement_details.id_settlement')
            ->leftJoin('acc_settlement_user_details', function($join) {
               $join->on('acc_settlement_details.id_settlement_user', '=', 'acc_settlement_user_details.id');
               // $join->on('acc_settlement_details.description','=', 'acc_settlement_user_details.description');
           })
            ->leftJoin('acc_settlement_users', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
            ->leftJoin('acc_suspend_details', function($join) {
               $join->on('acc_suspend_details.settle', '=', 'acc_settlement_user_details.id');
           })
            ->where('acc_settlements.id', '=', $id)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.cash_payment.report_settlement', array(
                'settlement' => $settlement_payment
            ));

            $pdf->save(public_path() . "/cash_list/settlement/Settlement ".$settlement_payment[0]->title. " ".date('d-M-y', strtotime($settlement_payment[0]->submission_date)).".pdf");

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($settlement_payment, 'settlement'));

            $message = 'Settlement Payment '.$settlement->title;
            $message2 ='Successfully Approved';
            
        }
        else{
            $message = 'Settlement Payment '.$settlement->title;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $settlement->title,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Suspend');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $settlement->title,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Suspend');
    }
}

public function settlementapprovalstaffacc($id){
    $settlement = AccSettlement::find($id);
    try{
        if ($settlement->posisi == "staff_acc")
        {
            $settlement->posisi = "manager_acc";
            $settlement->status_staff_acc = "Approved/".date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_settlements join users on acc_settlements.manager_acc = users.username where acc_settlements.id = '".$id."'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $settlement->save();

            $settlement_payment = AccSettlement::select('acc_settlements.*','acc_settlement_user_details.description','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
            ->leftJoin('acc_settlement_details', 'acc_settlements.id', '=', 'acc_settlement_details.id_settlement')
            ->leftJoin('acc_settlement_user_details', function($join) {
               $join->on('acc_settlement_details.id_settlement_user', '=', 'acc_settlement_user_details.id');
               // $join->on('acc_settlement_details.description','=', 'acc_settlement_user_details.description');
           })
            ->leftJoin('acc_settlement_users', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
            ->leftJoin('acc_suspend_details', function($join) {
               $join->on('acc_suspend_details.settle', '=', 'acc_settlement_user_details.id');
           })
            ->where('acc_settlements.id', '=', $id)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.cash_payment.report_settlement', array(
                'settlement' => $settlement_payment
            ));

            $pdf->save(public_path() . "/cash_list/settlement/Settlement ".$settlement_payment[0]->title. " ".date('d-M-y', strtotime($settlement_payment[0]->submission_date)).".pdf");

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($settlement_payment, 'settlement'));

            $message = 'Settlement Payment '.$settlement->title;
            $message2 ='Successfully Approved';
            
        }
        else{
            $message = 'Settlement Payment '.$settlement->title;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $settlement->title,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'settlement');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $settlement->title,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'settlement');
    }
}

public function settlementapprovalmanageracc($id){
    $settlement = AccSettlement::find($id);
    try{
        if ($settlement->posisi == "manager_acc")
        {
            $settlement->posisi = "direktur";
            $settlement->status_manager_acc = "Approved/".date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_settlements join users on acc_settlements.direktur = users.username where acc_settlements.id = '".$id."'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

            $settlement->save();

            $settlement_payment = AccSettlement::select('acc_settlements.*','acc_settlement_user_details.description','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
            ->leftJoin('acc_settlement_details', 'acc_settlements.id', '=', 'acc_settlement_details.id_settlement')
            ->leftJoin('acc_settlement_user_details', function($join) {
               $join->on('acc_settlement_details.id_settlement_user', '=', 'acc_settlement_user_details.id');
               // $join->on('acc_settlement_details.description','=', 'acc_settlement_user_details.description');
           })
            ->leftJoin('acc_settlement_users', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
            ->leftJoin('acc_suspend_details', function($join) {
               $join->on('acc_suspend_details.settle', '=', 'acc_settlement_user_details.id');
           })
            ->where('acc_settlements.id', '=', $id)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.cash_payment.report_settlement', array(
                'settlement' => $settlement_payment
            ));

            $pdf->save(public_path() . "/cash_list/settlement/Settlement ".$settlement_payment[0]->title. " ".date('d-M-y', strtotime($settlement_payment[0]->submission_date)).".pdf");

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($settlement_payment, 'settlement'));

            $message = 'Settlement Payment '.$settlement->title;
            $message2 ='Successfully Approved';
            
        }
        else{
            $message = 'Settlement Payment '.$settlement->title;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $settlement->title,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'settlement');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $settlement->title,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'settlement');
    }
}

public function emailSettlementUser(Request $request){
    $settlement = AccSettlementUser::find($request->get('id'));

    try{
        if ($settlement->posisi == "user")
        {

            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and (employee_id = 'PI1810020' or employee_id = 'PI1106002' or employee_id = 'PI0904006')";
            $mailtoo = DB::select($mails);

            $settlement->posisi = "admin";
            $settlement->save();

            $settlement_payment_user = AccSettlementUser::select('acc_settlement_users.*','acc_settlement_user_details.description','acc_settlement_user_details.amount as amount_settle','acc_settlement_user_details.nota')
            ->leftJoin('acc_settlement_user_details', 'acc_settlement_users.id', '=', 'acc_settlement_user_details.id_settlement')
            ->where('acc_settlement_users.id', '=', $request->get('id'))
            ->get();

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($settlement_payment_user, 'settlement_user'));

            $response = array(
              'status' => true,
              'datas' => "Berhasil"
          );

            return Response::json($response);
        }
    } 
    catch (Exception $e) {
        $response = array(
          'status' => false,
          'datas' => "Gagal"
      );
        return Response::json($response);
    }
}

public function settlementapprovaldirektur($id){
    $settlement = AccSettlement::find($id);
    try{
        if ($settlement->posisi == "direktur")
        {
            $settlement->posisi = 'acc';
            $settlement->status_direktur = "Approved/".date('Y-m-d H:i:s');
            $settlement->status = "received";

                //kirim email ke Mbak Laila & Mbak Afifah
            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and employee_syncs.department = 'Accounting Department' and (employee_id = 'PI0902001'  or employee_id = 'PI1505001')";
            $mailtoo = DB::select($mails);

            $settlement->save();

            $settlement_payment = AccSettlement::select('acc_settlements.*','acc_settlement_user_details.description','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
            ->leftJoin('acc_settlement_details', 'acc_settlements.id', '=', 'acc_settlement_details.id_settlement')
            ->leftJoin('acc_settlement_user_details', function($join) {
               $join->on('acc_settlement_details.id_settlement_user', '=', 'acc_settlement_user_details.id');
               // $join->on('acc_settlement_details.description','=', 'acc_settlement_user_details.description');
           })
            ->leftJoin('acc_settlement_users', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
            ->leftJoin('acc_suspend_details', function($join) {
               $join->on('acc_suspend_details.settle', '=', 'acc_settlement_user_details.id');
           })
            ->where('acc_settlements.id', '=', $id)
            ->get();

            $pdf = \App::make('dompdf.wrapper');
            $pdf->getDomPDF()->set_option("enable_php", true);
            $pdf->setPaper('A4', 'potrait');

            $pdf->loadView('accounting_purchasing.cash_payment.report_settlement', array(
                'settlement' => $settlement_payment
            ));

            $pdf->save(public_path() . "/cash_list/settlement/Settlement ".$settlement_payment[0]->title. " ".date('d-M-y', strtotime($settlement_payment[0]->submission_date)).".pdf");

            Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($settlement_payment, 'settlement'));

            $message = 'Settlement Payment '.$settlement->title;
            $message2 ='Successfully Approved';
        }
        else{
            $message = 'Settlement Payment '.$settlement->title;
            $message2 ='Already Approved / Rejected';
        }

        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $settlement->title,
            'message' => $message,
            'message2' => $message2,
        ))->with('page', 'Cash Payment');

    } catch (Exception $e) {
        return view('accounting_purchasing.verifikasi.pr_message', array(
            'head' => $settlement->title,
            'message' => 'Error',
            'message2' => $e->getMessage(),
        ))->with('page', 'Cash Payment');
    }
}

    //==================================//
    //  Report Settlement Accounting    //
    //==================================//
public function reportPettyCash()
{
    $title = 'Report Petty Cash Accounting';
    $title_jp = '';


    return view('accounting_purchasing.cash_payment.report_accounting', array(
        'title' => $title,
        'title_jp' => $title_jp,
    ))->with('page', 'Report Accounting')
    ->with('head', 'Report Accounting');
}

public function fetchReportPettyCash(Request $request)
{
 $settlement = AccSettlement::select('acc_settlements.*','acc_settlement_user_details.description','acc_settlement_user_details.nota','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
 ->leftJoin('acc_settlement_details', 'acc_settlements.id', '=', 'acc_settlement_details.id_settlement')
 ->join('acc_settlement_user_details', function($join) {
     $join->on('acc_settlement_details.id_settlement_user', '=', 'acc_settlement_user_details.id');
     $join->on('acc_settlement_details.description','=', 'acc_settlement_user_details.description');
 })
 ->join('acc_settlement_users', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
 ->join('acc_suspend_details', function($join) {
     $join->on('acc_suspend_details.settle', '=', 'acc_settlement_user_details.id_settlement');
     $join->on('acc_suspend_details.detail','=', 'acc_settlement_user_details.description');
 })
 ->get();

 return DataTables::of($settlement)
 ->editColumn('amount_suspend', function ($settlement)
 {
    return "Rp. ". number_format($settlement->amount_suspend,0,",",".");
})
 ->editColumn('amount_settle', function ($settlement)
 {
    return "Rp. ". number_format($settlement->amount_settle,0,",",".");
})
 ->addColumn('image', function ($settlement)
 {
    $nota = $settlement->nota;

    if (file_exists(public_path() .'/files/cash_payment/settlement/'.$nota)) {
        return '<a href="../files/cash_payment/settlement/' . $nota . '" target="_blank" class="fa fa-paperclip"></a>';
    }
    else if (file_exists(public_path() .'/files/cash_payment/settlement/'.$nota)) {
        return '<a href="../files/cash_payment/settlement/' . $nota . '" target="_blank" class="fa fa-paperclip"></a>';
    }
    else{
        return '-';
    }
})
 ->addColumn('status', function ($settlement)
 {
    if ($settlement->amount_suspend > $settlement->amount_settle) {
       return "+ Rp. ". number_format($settlement->amount_suspend - $settlement->amount_settle,2,",",".");
   }
   else if($settlement->amount_suspend < $settlement->amount_settle){
       return "- Rp. ". number_format($settlement->amount_suspend - $settlement->amount_settle,2,",",".");
   }
   else{
    return "Rp. 0 ";
}
})

 ->rawColumns(['image' => 'image','status' => 'status'])
 ->make(true);
}

public function fetchReportPettyCashSettlement(Request $request)
{
//  $settlement = AccSettlementUser::select('acc_settlement_users.submission_date','acc_settlement_user_details.description','acc_settlement_user_details.nota','acc_settlement_user_details.amount as amount_settle','acc_suspend_details.no_pr','acc_suspend_details.detail','acc_suspend_details.amount as amount_suspend')
//  ->join('acc_settlement_user_details', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
//  ->join('acc_suspend_details', function($join) {
//    $join->on('acc_suspend_details.settle', '=', 'acc_settlement_user_details.id_settlement');
//    $join->on('acc_suspend_details.detail','=', 'acc_settlement_user_details.description');
// })
//  ->get();

   $settlement = AccSettlementUser::select('acc_settlement_users.submission_date','acc_settlement_user_details.description','acc_settlement_user_details.nota','acc_settlement_user_details.amount as amount_settle')
   ->join('acc_settlement_user_details', 'acc_settlement_user_details.id_settlement', '=', 'acc_settlement_users.id')
   ->orderBy('acc_settlement_user_details.id','desc')
   ->get();

   $response = array(
      'status' => true,
      'settlement' => $settlement,
  );
   return Response::json($response);
}

public function fetchEmployeeByTag(Request $request)
{
   try {
      $emp = Employee::whereNull('end_date')
      ->where('tag', '=', $request->get('tag'))
      ->first();       

      if (count($emp) > 0) {
         $response = array(
            'status' => true,
            'datas' => $emp
        );
         return Response::json($response);
     } else {
          //      $emp = Employee::whereNull('end_date');
          // $emp = $emp->where('tag', '=', $request->get('tag'));
          // $emp = $emp->first(); 
         $response = array(
            'status' => false,
            'message' => 'Masukkan Tag Dengan Benar!'
        );
         return Response::json($response);
     }


 } catch (QueryException $e) {
  $response = array(
     'status' => false,
     'message' => $e->getMessage()
 );
  return Response::json($response);
}
}

public function budget_report(){

    $title = 'Budget Report';
    $title_jp = '';

    $dept = db::select("SELECT department_name as department FROM `departments`");

    $emp_dept = EmployeeSync::where('employee_id', Auth::user()->username)
    ->select('department')
    ->first();

    return view('accounting_purchasing.display.budget_report', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'department' => $dept,
        'emp_dept' => $emp_dept
    ))->with('page', 'Budget Report')
    ->with('head', 'Display');
}

public function fetch_budget_report(Request $request){
    $fy = $request->get('fy');

    $now_calendar = WeeklyCalendar::where('week_date', date('Y-m-d'))->first();
    if(strlen($fy) <= 0){
        $fy = $now_calendar->fiscal_year;
    }

    $start = WeeklyCalendar::where('fiscal_year', $fy)->orderBy('week_date', 'ASC')->first();
    $end = WeeklyCalendar::where('fiscal_year', $fy)->orderBy('week_date', 'DESC')->first();
    $end_resume = date("Y-m-d", strtotime("last day of previous month"));

    if($fy != $now_calendar->fiscal_year){
        $end_resume = $end->week_date;
    }

    $start_month = date('Y-m-01');
    $now = date('Y-m-d');

    $months = db::select("SELECT DISTINCT DATE_FORMAT(week_date,'%Y-%m') AS `month`, DATE_FORMAT(week_date,'%b-%Y') AS text  FROM weekly_calendars WHERE fiscal_year = '".$fy."' ORDER BY `month` ASC");

    $category = $request->get('category');

    if ($category != null) {
        $cat = 'and acc_budgets.category = "'.$category.'"';
    } else {
        $cat = '';
    }

    $department = $request->get('department');

    if ($department != null) {
        $dept = 'and acc_budgets.department = "'.$department.'"';
    } else {
        $dept = '';
    }

    $resume_budget = db::select('
        SELECT
        periode,
        SUM( apr_budget_awal ) AS apr_budget,
        SUM( may_budget_awal ) AS may_budget,
        SUM( jun_budget_awal ) AS jun_budget,
        SUM( jul_budget_awal ) AS jul_budget,
        SUM( aug_budget_awal ) AS aug_budget,
        SUM( sep_budget_awal ) AS sep_budget,
        SUM( oct_budget_awal ) AS oct_budget,
        SUM( nov_budget_awal ) AS nov_budget,
        SUM( dec_budget_awal ) AS dec_budget,
        SUM( jan_budget_awal ) AS jan_budget,
        SUM( feb_budget_awal ) AS feb_budget,
        SUM( mar_budget_awal ) AS mar_budget
        FROM
        acc_budgets
        where acc_budgets.deleted_at is null
        and periode = "'.$fy.'"
        '.$cat.'
        '.$dept.'
        and account_name != "Medical"
        and account_name != "Meal"
        and account_name != "Labour"
        GROUP BY periode
        ');

    $resume_forecast = db::select('
        SELECT
        periode,
        SUM( apr_after_adj ) AS apr_simulasi,
        SUM( may_after_adj ) AS may_simulasi,
        SUM( jun_after_adj ) AS jun_simulasi,
        SUM( jul_after_adj ) AS jul_simulasi,
        SUM( aug_after_adj ) AS aug_simulasi,
        SUM( sep_after_adj ) AS sep_simulasi,
        SUM( oct_after_adj ) AS oct_simulasi,
        SUM( nov_after_adj ) AS nov_simulasi,
        SUM( dec_after_adj ) AS dec_simulasi,
        SUM( jan_after_adj ) AS jan_simulasi,
        SUM( feb_after_adj ) AS feb_simulasi,
        SUM( mar_after_adj ) AS mar_simulasi
        FROM
        acc_budgets
        where acc_budgets.deleted_at is null
        and periode = "'.$fy.'"
        '.$cat.'
        '.$dept.'
        and account_name != "Medical"
        and account_name != "Meal"
        and account_name != "Labour"
        GROUP BY periode
        ');

    $act = db::select('
        SELECT a.bulan, SUM(a.Actual) as amount
        from
        (
            SELECT
            DATE_FORMAT( receive_date, "%Y-%m" ) AS bulan,
            ROUND( sum( acc_actuals.amount_dollar ), 2 ) AS Actual
            FROM
            acc_actuals
            LEFT JOIN acc_budgets ON acc_actuals.budget_no = acc_budgets.budget_no 
            WHERE
            DATE_FORMAT( receive_date, "%Y-%m" ) IS NOT NULL 
            and acc_budgets.periode = "'.$fy.'"
            '.$cat.'
            '.$dept.'
            and account_name != "Medical"
            and account_name != "Meal"
            and account_name != "Labour"
            GROUP BY
            DATE_FORMAT( receive_date, "%Y-%m" )

            UNION ALL

            SELECT
            DATE_FORMAT( post_date, "%Y-%m" ) AS bulan,
            ROUND( SUM( local_amount ), 2 ) AS Actual
            FROM
            acc_actual_logs
            LEFT JOIN acc_budgets ON acc_actual_logs.budget_no = acc_budgets.budget_no 
            WHERE
            DATE_FORMAT( post_date, "%Y-%m" ) IS NOT NULL 
            and acc_actual_logs.deleted_at IS NULL 
            and acc_budgets.periode = "'.$fy.'"
            '.$cat.'
            '.$dept.'
            and account_name != "Medical"
            and account_name != "Meal"
            and account_name != "Labour"
            GROUP BY
            DATE_FORMAT( post_date, "%Y-%m" )
            ) a
        GROUP BY a.bulan
        ');

    $response = array(
        'status' => true,
        'fy' => $fy,
        'months' => $months,
        'resume_budget' => $resume_budget,
        'resume_forecast' => $resume_forecast,
        'act' => $act

    );
    return Response::json($response);
}

public function fetch_budget_report_detail(Request $request){

    $fy = $request->get('fy');

    if ($request->get('bulan') == "" || $request->get('bulan') == null) {
        $bulan = date('Y-m', strtotime(date('Y-m-d',strtotime('-1 months'))));
        $title = date('M Y', strtotime(date('Y-m-d',strtotime('-1 months'))));    
    }
    else{
        $bulan = date('Y-m', strtotime($request->get('bulan')));
        $title = date('M Y', strtotime($request->get('bulan')));
    }

    $now_calendar = WeeklyCalendar::where('week_date', date('Y-m-d'))->first();
    if(strlen($fy) <= 0){
        $fy = $now_calendar->fiscal_year;
    }



    $category = $request->get('category');

    if ($category != null) {
        $cat = 'and acc_budgets.category = "'.$category.'"';
    } else {
        $cat = '';
    }

    $department = $request->get('department');

    if ($department != null) {
        $dept = 'and acc_budgets.department = "'.$department.'"';
    } else {
        $dept = '';
    }

    $data = db::select('
        SELECT a.account_name, a.bulan, SUM(a.Actual) as amount
        FROM
        (
            SELECT
            account_name,
            DATE_FORMAT( receive_date, "%Y-%m" ) AS bulan,
            COALESCE(ROUND( sum( acc_actuals.amount_dollar ),2),0) AS Actual
            FROM
            acc_actuals
            LEFT JOIN acc_budgets ON acc_actuals.budget_no = acc_budgets.budget_no 
            WHERE
            DATE_FORMAT( receive_date, "%Y-%m" ) IS NOT NULL 
            and acc_budgets.periode = "'.$fy.'"
            '.$cat.'
            '.$dept.'
            and account_name != "Medical"
            and account_name != "Meal"
            and account_name != "Labour"
            GROUP BY
            account_name,
            DATE_FORMAT( receive_date, "%Y-%m" )

            UNION ALL

            SELECT
            account_name,
            DATE_FORMAT( post_date, "%Y-%m" ) AS bulan,
            ROUND( SUM( local_amount ), 2 ) AS Actual
            FROM
            acc_actual_logs
            LEFT JOIN acc_budgets ON acc_actual_logs.budget_no = acc_budgets.budget_no 
            WHERE
            DATE_FORMAT( post_date, "%Y-%m" ) IS NOT NULL 
            and acc_actual_logs.deleted_at IS NULL 
            and acc_budgets.periode = "'.$fy.'"
            '.$cat.'
            '.$dept.'
            and account_name != "Medical"
            and account_name != "Meal"
            and account_name != "Labour"
            GROUP BY
            account_name,
            DATE_FORMAT( post_date, "%Y-%m")
            ) a
        GROUP BY a.account_name,a.bulan
        ORDER BY a.bulan
        ');

    $resume_forecast_cost_center = db::select('
        SELECT
        account_name,
        SUM( apr_after_adj ) AS apr_simulasi,
        SUM( may_after_adj ) AS may_simulasi,
        SUM( jun_after_adj ) AS jun_simulasi,
        SUM( jul_after_adj ) AS jul_simulasi,
        SUM( aug_after_adj ) AS aug_simulasi,
        SUM( sep_after_adj ) AS sep_simulasi,
        SUM( oct_after_adj ) AS oct_simulasi,
        SUM( nov_after_adj ) AS nov_simulasi,
        SUM( dec_after_adj ) AS dec_simulasi,
        SUM( jan_after_adj ) AS jan_simulasi,
        SUM( feb_after_adj ) AS feb_simulasi,
        SUM( mar_after_adj ) AS mar_simulasi
        FROM
        acc_budgets
        where acc_budgets.deleted_at is null
        and periode = "'.$fy.'"
        '.$cat.'
        '.$dept.'
        and account_name != "Medical"
        and account_name != "Meal"
        and account_name != "Labour"
        GROUP BY account_name
        ');

    $cost_center = db::select('
        SELECT DISTINCT 
        account_name 
        from acc_budgets 
        where periode = "'.$fy.'"
        '.$cat.'
        '.$dept.'
        and account_name != "Medical"
        and account_name != "Meal"
        and account_name != "Labour"
        order by account_name asc');

    $cost_center_note = db::select('
        SELECT DISTINCT 
        * 
        from acc_budget_notes');

    $response = array(
        'status' => true,
        'cost_center' => $cost_center,
        'cost_center_note' => $cost_center_note,
        'resume_forecast_cost_center' => $resume_forecast_cost_center,
        'data' => $data,
        'bulan' => $bulan,
        'title' => $title

    );
    return Response::json($response);
}

public function catatan(Request $request)
{

    if ($request->get('dept') == null || $request->get('dept') == "") {
        $note = AccBudgetNote::where('account_name',$request->get('account'))
        ->where('month_date',$request->get('bulan'))
        ->get();
    }else{
        $note = AccBudgetNote::where('department',$request->get('dept'))
        ->where('account_name',$request->get('account'))
        ->where('month_date',$request->get('bulan'))
        ->first();

    }

    $response = array(
        'status' => true,
        'note' => $note
    );
    return Response::json($response);
}

public function post_catatan(Request $request)
{
    try{
        $data2 = AccBudgetNote::firstOrNew([
            'department' => $request->get('dept'),
            'account_name' => $request->get('account'),
            'month_date' => $request->get('monthnote') 
        ]);

        $data2->note = $request->get('catatan');
        $data2->save();

        $response = array(
          'status' => true,
          'datas' => "Berhasil",
      );
        return Response::json($response);
    }
    catch (QueryException $e){
        $error_code = $e->errorInfo[1];
        if($error_code == 1062){
         $response = array(
          'status' => false,
          'datas' => "CPAR Already Exist",
      );
         return Response::json($response);
     }
     else{
         $response = array(
          'status' => false,
          'datas' => "Update CPAR Error.",
      );
         return Response::json($response);
     }
 }
}

public function getNotifPR()
{
    if (Auth::user() !== null) {
        $user = strtoupper(Auth::user()->username);
        $name = Auth::user()->name;
        $role = Auth::user()->role_code;

        $manager = DB::SELECT("SELECT manager from acc_purchase_requisitions where manager = '".$user."' AND posisi = 'manager' AND approvalm IS NULL AND deleted_at IS NULL");

        $dgm = DB::SELECT("SELECT dgm from acc_purchase_requisitions where dgm = '".$user."' AND posisi = 'dgm' AND approvaldgm IS NULL AND deleted_at IS NULL");

        $gm = DB::SELECT("SELECT gm from acc_purchase_requisitions where gm = '".$user."' AND posisi = 'gm' AND approvalgm IS NULL AND deleted_at IS NULL");

        $notif = 0;

        if (count($manager) > 0 || count($dgm) > 0 || count($gm) > 0) {
            $notif = count($manager) + count($dgm) + count($gm);
        }
        return $notif;
    }
}

public function getNotifPO()
{
    if (Auth::user() !== null) {
        $user = strtoupper(Auth::user()->username);
        $name = Auth::user()->name;
        $role = Auth::user()->role_code;

        $manager = DB::SELECT("SELECT authorized2 from acc_purchase_orders where authorized2 = '".$user."' AND posisi = 'manager_pch' AND approval_authorized2 IS NULL AND deleted_at IS NULL");

        $gm = DB::SELECT("SELECT authorized3 from acc_purchase_orders where authorized3 = '".$user."' AND posisi = 'dgm_pch' AND approval_authorized3 IS NULL AND deleted_at IS NULL");

        $notif = 0;

        if (count($manager) > 0 || count($gm) > 0) {
            $notif = count($manager) + count($gm);
        }
        return $notif;
    }
}

public function getNotifInvestment()
{
    if (Auth::user() !== null) {
        $user = strtoupper(Auth::user()->username);
        $name = Auth::user()->name;
        $role = Auth::user()->role_code;

        $acc_budget = DB::SELECT("SELECT approval_acc_budget FROM acc_investments WHERE posisi = 'acc_budget' AND deleted_at IS NULL");

        $acc_pajak = DB::SELECT("SELECT approval_acc_pajak FROM acc_investments WHERE posisi = 'acc_pajak' AND deleted_at IS NULL");

        $manager = DB::SELECT("SELECT approval_manager FROM acc_investments WHERE posisi = 'manager' AND SPLIT_STRING(approval_manager, '/', 1) = '".$user."' AND deleted_at IS NULL");

        $dgm = DB::SELECT("SELECT approval_dgm FROM acc_investments WHERE posisi = 'dgm' AND SPLIT_STRING(approval_dgm, '/', 1) = '".$user."' AND deleted_at IS NULL");

        $gm = DB::SELECT("SELECT approval_gm FROM acc_investments WHERE posisi = 'gm' AND SPLIT_STRING(approval_gm, '/', 1) = '".$user."' AND deleted_at IS NULL");

        $manager_acc = DB::SELECT("SELECT approval_manager_acc FROM acc_investments WHERE posisi = 'manager_acc' AND SPLIT_STRING(approval_manager_acc, '/', 1) = '".$user."' AND deleted_at IS NULL");

        $direktur_acc = DB::SELECT("SELECT approval_dir_acc FROM acc_investments WHERE posisi = 'direktur_acc' AND SPLIT_STRING(approval_dir_acc, '/', 1) = '".$user."' AND deleted_at IS NULL");

        $presdir = DB::SELECT("SELECT approval_presdir FROM acc_investments WHERE posisi = 'presdir' AND SPLIT_STRING(approval_presdir, '/', 1) = '".$user."' AND deleted_at IS NULL");

        $notif = 0;



        $budget = 0;
        $pajak = 0;

        if (count($acc_budget) > 0 && $user == "PI0902001") {
            $budget = count($acc_budget);
        }
        if (count($acc_pajak) > 0 && $user == "PI9802001") {
            $pajak = count($acc_pajak);
        }

        if ($budget > 0 || $pajak > 0 || count($manager) > 0 || count($dgm) > 0 || count($gm) > 0 || count($manager_acc) > 0 || count($direktur_acc) > 0 || count($presdir) > 0) {

            $notif = $budget + $pajak + count($manager) + count($dgm) + count($gm) + count($manager_acc) + count($direktur_acc) + count($presdir);

        }

        return $notif;
    }
}

public function getNotifPRCanteen()
{
    if (Auth::user() !== null) {
        $user = strtoupper(Auth::user()->username);
        $name = Auth::user()->name;
        $role = Auth::user()->role_code;

        $manager = DB::SELECT("SELECT manager from canteen_purchase_requisitions where manager = '".$user."' AND posisi = 'manager' AND approvalm IS NULL AND deleted_at IS NULL");

        $gm = DB::SELECT("SELECT gm from canteen_purchase_requisitions where gm = '".$user."' AND posisi = 'gm' AND approvalgm IS NULL AND deleted_at IS NULL");

        $notif = 0;

        if (count($manager) > 0 || count($gm) > 0) {
            $notif = count($manager) + count($gm);
        }
        return $notif;
    }
}

public function getNotifPOCanteen()
{
    if (Auth::user() !== null) {
        $user = strtoupper(Auth::user()->username);
        $name = Auth::user()->name;
        $role = Auth::user()->role_code;

        $manager = DB::SELECT("SELECT authorized2 from canteen_purchase_orders where authorized2 = '".$user."' AND posisi = 'manager_pch' AND approval_authorized2 IS NULL AND deleted_at IS NULL");

        $notif = 0;

        if (count($manager) > 0){
            $notif = count($manager);
        }
        return $notif;
    }
}

public function index_billing(){
  $title = 'E-Billing';
  $title_jp = '';

  return view('accounting_purchasing.billing.index_billing', array(
      'title' => $title,
      'title_jp' => $title_jp
  ))->with('page', 'Billing')->with('head', 'Billing');
}


public function billing_receive_material()
{
    $title = 'Receive Report Material YMES';
    $title_jp = '';

    return view('accounting_purchasing.billing.receive_material_ymes', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', 'Receive Material YMES')
    ->with('head', 'Receive Material YMES');
}

public function fetch_billing_receive_material(Request $request)
{
    $materials = db::connection('ymes')->table('vd_sap0120_010')
    ->join('vd_sap0050', function($join) {
     $join->on('vd_sap0120_010.po_no', '=', 'vd_sap0050.po_no');
     $join->on('vd_sap0120_010.item_code','=', 'vd_sap0050.item_code');
 })
    ->join('vm_supp0010','vd_sap0120_010.supplier_code','=','vm_supp0010.supplier_code')
    ->select('vd_sap0120_010.mat_doc','vd_sap0120_010.ref_doc_no','vd_sap0120_010.doc_header_text','vd_sap0120_010.slip_date','vd_sap0120_010.post_date','vd_sap0120_010.sap_input_date','vd_sap0120_010.sap_move_type','vd_sap0120_010.supplier_code','vm_supp0010.supplier_name','vd_sap0120_010.item_code','vd_sap0050.item_name','vd_sap0120_010.location_code','vd_sap0120_010.doc_text','vd_sap0120_010.dom_ccy_amt as local_amount','vd_sap0120_010.co_area_ccy as local_currency','amt as amount','vd_sap0050.co_area_ccy as currency','vd_sap0120_010.qty','vd_sap0120_010.unit_code','vd_sap0120_010.po_no','vd_sap0120_010.po_sub_no','vd_sap0050.po_grp')
    ->get();

    return DataTables::of($materials)
    ->editColumn('slip_date', function ($materials)
    {
        return date('d-m-Y', strtotime($materials->slip_date));
    })
    ->editColumn('post_date', function ($materials)
    {
        return date('d-m-Y', strtotime($materials->post_date));
    })
    ->editColumn('sap_input_date', function ($materials)
    {
        return date('d-m-Y', strtotime($materials->sap_input_date));
    })

    ->rawColumns(['slip_date' => 'slip_date'])
    ->make(true);
}

public function billing_receive_non_material()
{
    $title = 'Receive Report Non Material YMES';
    $title_jp = '';

    return view('accounting_purchasing.billing.receive_non_material_ymes', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', 'Receive Non Material YMES')
    ->with('head', 'Receive Non Material YMES');
}

public function fetch_billing_receive_non_material(Request $request)
{
    $materials = db::connection('ymes')->table('vd_sap0120_010')
    ->join('vd_sap0050', function($join) {
     $join->on('vd_sap0120_010.po_no', '=', 'vd_sap0050.po_no');
     $join->on('vd_sap0120_010.item_name','=', 'vd_sap0050.item_name');
 })
    ->join('vm_supp0010','vd_sap0120_010.supplier_code','=','vm_supp0010.supplier_code')
    ->select('vd_sap0120_010.ref_doc_no','vd_sap0120_010.doc_header_text','vd_sap0120_010.slip_date','vd_sap0120_010.post_date','vd_sap0120_010.sap_input_date','vd_sap0120_010.supplier_code','vm_supp0010.supplier_name','vd_sap0120_010.item_name','vd_sap0120_010.doc_text','vd_sap0120_010.dom_ccy_amt as local_amount','vd_sap0120_010.co_area_ccy as local_currency','vd_sap0120_010.une_qty','vd_sap0120_010.input_unit','vd_sap0120_010.po_no','vd_sap0120_010.po_sub_no','vd_sap0050.po_grp','vd_sap0050.po_rq_menber')
    ->get();

    return DataTables::of($materials)
    ->editColumn('slip_date', function ($materials)
    {
        return date('d-m-Y', strtotime($materials->slip_date));
    })
    ->editColumn('post_date', function ($materials)
    {
        return date('d-m-Y', strtotime($materials->post_date));
    })
    ->editColumn('sap_input_date', function ($materials)
    {
        return date('d-m-Y', strtotime($materials->sap_input_date));
    })

    ->rawColumns(['slip_date' => 'slip_date'])
    ->make(true);
}


public function index_bank()
{
    $title = 'Bank Data';
    $title_jp = '';

    return view('accounting_purchasing.billing.bank', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))
    ->with('page', 'Bank Data')
    ->with('head', 'Bank Data');
}

public function fetch_bank()
{
    try {
        $bank = db::select("
            SELECT
                        *
            FROM
            acc_rekenings
            WHERE deleted_at is null
            and not_active = 'FALSE'
            ORDER BY id desc
            ");

        $response = array(
            'status' => true,
            'bank' => $bank,
        );
        return Response::json($response);
    } catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage(),
        );
        return Response::json($response);
    }
}

public function index_cost_center()
{
    $title = 'Cost Center Data';
    $title_jp = '';

    return view('accounting_purchasing.billing.cost_center', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))
    ->with('page', 'Cost Center Data')
    ->with('head', 'Cost Center Data');
    
}

public function fetch_cost_center()
{
    try {
        $cost_center = db::select("
            SELECT
                        *
            FROM
            cost_centers_s4
            ORDER BY id desc
            ");

        $response = array(
            'status' => true,
            'cost_center' => $cost_center,
        );
        return Response::json($response);
    } catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage(),
        );
        return Response::json($response);
    }
}

public function index_gl_account()
{
    $title = 'GL Account Data';
    $title_jp = '';

    return view('accounting_purchasing.billing.gl_account', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))
    ->with('page', 'GL Account Data')
    ->with('head', 'GL Account Data');

}

public function fetch_gl_account()
{
    try {
        $gl_account = db::select("
            SELECT
                        *
            FROM
            acc_gl_accounts
            WHERE deleted_at is null
            ORDER BY id desc
            ");

        $response = array(
            'status' => true,
            'gl_account' => $gl_account,
        );
        return Response::json($response);
    } catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage(),
        );
        return Response::json($response);
    }
}


public function index_billing_tanda_terima($id){

    $title = "Tanda Terima";
    $title_jp = "領収書";

    $payment_term = AccInvoicePaymentTerm::select('*')->whereNull('deleted_at')
    ->distinct()
    ->get();
    
    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    // $no_po = AccInvoiceReceiveReport::select('no_po_sap')->whereNull('deleted_at')
    // ->distinct()
    // ->get();

    // $surat_jalan = AccInvoiceReceiveReport::select('invoice_no')->whereNull('deleted_at')
    // ->distinct()
    // ->get();

    return view('accounting_purchasing.billing.billing_tanda_terima', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'vendor' => $vendor,
        'payment_term' => $payment_term,
        'category' => $id
        // 'surat_jalan' => $surat_jalan
    ));

}

public function fetch_billing_tanda_terima(Request $request){

    $login = strtoupper(Auth::user()->username);

    if (str_contains(Auth::user()->role_code, 'MIS') || str_contains(Auth::user()->role_code, 'ACC')) {
        $invoice = db::select("SELECT
            *
            FROM
            acc_invoices
            where category = 'Billing'
            order by id desc
            ");
    }else{
        $invoice = db::select("SELECT
            *
            FROM
            acc_invoices
            where category = 'Billing'
            and created_by = '".$login."'
            order by id desc
            ");
    }



    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $payment_term = AccInvoicePaymentTerm::select('*')->whereNull('deleted_at')
    ->distinct()
    ->get();

    $response = array(
        'status' => true,
        'invoice' => $invoice,
        'vendor' => $vendor,
        'payment_term' => $payment_term
    );
    return Response::json($response);
}


public function fetch_billing_tanda_terima_ymes(Request $request){

    $invoice = db::select("SELECT
            *
        FROM
        acc_invoices
        where category = 'Billing'
        order by id desc
        ");

    // CHECK INVOICE
    $invoice_check = array();
    for ($j = 0; $j < count($invoice); $j++) {
        array_push($invoice_check, $invoice[$j]->surat_jalan);
    }

    if ($request->get('id') == "material") {
        $surat_jalan = db::connection('ymes')->table('vd_sap0120_010')
        ->leftjoin('vd_sap0050', function($join) {
         $join->on('vd_sap0120_010.po_no', '=', 'vd_sap0050.po_no');
         $join->on('vd_sap0120_010.po_sub_no','=', DB::raw("TRIM(LEADING '0' FROM vd_sap0050.po_sub_no)"));
     })
        ->join('vm_supp0010','vd_sap0120_010.supplier_code','=','vm_supp0010.supplier_code')
        ->select('vd_sap0120_010.supplier_code','vm_supp0010.supplier_name','vd_sap0120_010.doc_text')
        ->where('vd_sap0120_010.post_date','>=','2022-12-01')
        ->whereNotIn('vd_sap0120_010.doc_text',$invoice_check)
        ->distinct()
        ->get();

        $po = db::connection('ymes')->table('vd_sap0120_010')
        ->leftjoin('vd_sap0050', function($join) {
            $join->on('vd_sap0120_010.po_no', '=', 'vd_sap0050.po_no');
            $join->on('vd_sap0120_010.po_sub_no','=', DB::raw("TRIM(LEADING '0' FROM vd_sap0050.po_sub_no)"));
        })
        ->select('vd_sap0120_010.doc_text','vd_sap0120_010.po_no as po_rq_menber','vd_sap0050.co_area_ccy as currency','vd_sap0050.net_price','vd_sap0050.price_unit','vd_sap0120_010.post_date', 'vd_sap0120_010.une_qty','vd_sap0050.item_name','vd_sap0120_010.sap_move_type','vd_sap0120_010.po_sub_no','vd_sap0120_010.po_no','vd_sap0050.supplier_code')
        ->where('vd_sap0120_010.post_date','>=','2022-12-01')
        ->whereNotIn('vd_sap0120_010.doc_text',$invoice_check)
        ->get();
    }
    else if ($request->get('id') == "non_material") {
        $surat_jalan = db::connection('ymes')->table('vd_sap0120_010')
        ->join('vd_sap0050', function($join) {
            $join->on('vd_sap0120_010.po_no', '=', 'vd_sap0050.po_no');
            $join->on('vd_sap0120_010.po_sub_no','=', DB::raw("TRIM(LEADING '0' FROM vd_sap0050.po_sub_no)"));
        })
        ->leftjoin('vm_supp0010','vd_sap0120_010.supplier_code','=','vm_supp0010.supplier_code')
        ->select('vd_sap0120_010.supplier_code','vm_supp0010.supplier_name','vd_sap0120_010.doc_text','vd_sap0050.item_name','vd_sap0120_010.sap_move_type')
        ->where('vd_sap0120_010.post_date','>=','2022-12-01')
        ->whereNotIn('vd_sap0120_010.doc_text',$invoice_check)
        ->distinct()
        ->get();

        $po = db::connection('ymes')->table('vd_sap0120_010')
        ->leftjoin('vd_sap0050', function($join) {
            $join->on('vd_sap0120_010.po_no', '=', 'vd_sap0050.po_no');
            $join->on('vd_sap0120_010.po_sub_no','=', DB::raw("TRIM(LEADING '0' FROM vd_sap0050.po_sub_no)"));
        })
        ->select('vd_sap0120_010.doc_text','vd_sap0050.po_rq_menber','vd_sap0050.co_area_ccy as currency','vd_sap0050.net_price','vd_sap0050.price_unit','vd_sap0120_010.post_date', 'vd_sap0120_010.une_qty','vd_sap0050.item_name','vd_sap0120_010.sap_move_type','vd_sap0120_010.po_sub_no','vd_sap0120_010.po_no','vd_sap0050.supplier_code')
        ->where('vd_sap0120_010.post_date','>=','2022-12-01')
        ->whereNotIn('vd_sap0120_010.doc_text',$invoice_check)
        ->get();
    }


    $response = array(
        'status' => true,
        'surat_jalan' => $surat_jalan,
        'purchase_order' => $po
    );
    return Response::json($response);
}

public function create_billing_tanda_terima(Request $request){
    try{
        $invoice = new AccInvoice([
            'invoice_date' => $request->input('invoice_date'),
            'supplier_code' => $request->input('supplier_code'),
            'supplier_name' => $request->input('supplier_name'),
            'kwitansi' => $request->input('kwitansi'),
            'invoice_no' => $request->input('invoice_no'),
            'surat_jalan' => $request->input('surat_jalan'),
            'bap' => $request->input('bap'),
            'npwp' => $request->input('npwp'),
            'faktur_pajak' => $request->input('faktur_pajak'),
            'po_number' => $request->input('po_number'),
            'payment_term' => $request->input('payment_term'),
            'currency' => $request->input('currency'),
            'amount' => $request->input('amount'),
            'mirai_amount' => $request->input('mirai_amount'),
            'do_date' => $request->input('do_date'),
            'due_date' => $request->input('due_date'),
            'distribution_date' => $request->input('distribution_date'),
            'created_by' => Auth::user()->username,
            'created_name' => Auth::user()->name
        ]);

        $invoice->save();

        $response = array(
            'status' => true,
            'message' => 'New Invoice Successfully Added'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function fetch_billing_tanda_terima_detail(Request $request){
    $invoice = AccInvoice::find($request->get('id'));

    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $payment_term = AccInvoicePaymentTerm::select('*')->whereNull('deleted_at')
    ->distinct()
    ->get();

    $no_po = AccInvoiceReceiveReport::select('no_po_sap')->whereNull('deleted_at')
    ->distinct()
    ->get();

    $surat_jalan = AccInvoiceReceiveReport::select('invoice_no')->whereNull('deleted_at')
    ->distinct()
    ->get();

    $response = array(
        'status' => true,
        'invoice' => $invoice,
        'vendor' => $vendor,
        'payment_term' => $payment_term,
        'no_po' => $no_po,
        'surat_jalan' => $surat_jalan
    );
    return Response::json($response);
}

public function edit_billing_tanda_terima(Request $request){
    try{
        $invoice = AccInvoice::where('id', '=', $request->get('id_edit'))->first();

        $invoice->invoice_date = $request->input('invoice_date');
        $invoice->supplier_code = $request->input('supplier_code');
        $invoice->supplier_name = $request->input('supplier_name');
        $invoice->kwitansi = $request->input('kwitansi');
        $invoice->invoice_no = $request->input('invoice_no');
        $invoice->surat_jalan = $request->input('surat_jalan');
        $invoice->bap = $request->input('bap');
        $invoice->npwp = $request->input('npwp');
        $invoice->faktur_pajak = $request->input('faktur_pajak');
        $invoice->po_number = $request->input('po_number');
        $invoice->payment_term = $request->input('payment_term');
        $invoice->surat_jalan = $request->input('surat_jalan');
        $invoice->currency = $request->input('currency');
        $invoice->amount = $request->input('amount');
        $invoice->do_date = $request->input('do_date');
        $invoice->due_date = $request->input('due_date');
        $invoice->distribution_date = $request->input('distribution_date');
        $invoice->created_by = Auth::user()->username;
        $invoice->save();

        $response = array(
            'status' => true,
            'message' => 'Invoice Updated'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function delete_tanda_terima(Request $request)
{
    try
    {
        $delete_invoice = AccInvoice::where('id', '=', $request->get('id'))->delete();

        $response = array(
            'status' => true,
        );

        return Response::json($response);
    }
    catch(QueryException $e)
    {
        return redirect('/billing/tanda_terima')->with('error', $e->getMessage())
        ->with('page', 'Billing Tanda Terima');
    }
}

public function report_billing_tanda_terima($id){


    $inv = AccInvoice::find($id);

    if ($inv->invoice_date > "2022-05-11") {
        $invoice = AccInvoice::join('acc_suppliers','acc_invoices.supplier_code','=','acc_suppliers.vendor_code')
        ->where('acc_invoices.id','=',$id)->first();
    }
    else{
        $invoice = AccInvoice::join('acc_suppliers_olds','acc_invoices.supplier_code','=','acc_suppliers_olds.vendor_code')
        ->where('acc_invoices.id','=',$id)->first();
    }

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('accounting_purchasing.invoice.report_invoice', array(
        'invoice' => $invoice,
        'id' => $id
    ));
    return $pdf->stream("Tanda Terima ".$invoice->invoice_no. ".pdf");
}

public function export_billing_tanda_terima(Request $request){

    $time = date('d-m-Y H;i;s');
    $tanggal = "";

    if (strlen($request->get('datefrom')) > 0)
    {
        $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
        $tanggal = "and invoice_date >= '" . $datefrom . " 00:00:00' ";
        if (strlen($request->get('dateto')) > 0)
        {
            $dateto = date('Y-m-d', strtotime($request->get('dateto')));
            $tanggal = $tanggal . "and invoice_date  <= '" . $dateto . " 23:59:59' ";
        }
    }

    $tanda_terima = db::select(
        "Select acc_invoices.* from acc_invoices join acc_suppliers on acc_invoices.supplier_code = acc_suppliers.vendor_code WHERE acc_invoices.deleted_at IS NULL " . $tanggal . " order by acc_invoices.id ASC");
        // and acc_purchase_orders.posisi = 'pch' and acc_purchase_orders.`status` = 'not_sap' and no_po_sap is null 

    $data = array(
        'tanda_terima' => $tanda_terima
    );

    ob_clean();

    Excel::create('Tanda Terima List '.$time, function($excel) use ($data){
        $excel->sheet('Location', function($sheet) use ($data) {
          return $sheet->loadView('accounting_purchasing.invoice.invoice_excel', $data);
      });
    })->export('xlsx');
}


public function IndexBillingPaymentRequest($id){

    if ($id == "all") {
        $title = "Payment Request";
        $title_jp = "支払リクエスト";
        $category = 'Billing';
    }else if($id == "general"){
        $title = "General Payment Request";
        $title_jp = "支払リクエスト";
        $category = 'General';
    }

    // $employees = EmployeeSync::orderBy('department', 'asc')->get();

    $vendor = AccSupplier::select('acc_suppliers.*')->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $invoices = AccInvoice::select('id','invoice_no','supplier_code',DB::RAW("REPLACE(supplier_name,'\'','') AS `supplier_name`"),'payment_term','currency')
    ->whereNull('acc_invoices.deleted_at')
    ->whereNull('payment_status')
    ->where('category','=', $category)
    ->get();

    $payment_term = AccInvoicePaymentTerm::select('*')
    ->whereNull('deleted_at')
    ->distinct()
    ->get();

    return view('accounting_purchasing.billing.billing_payment_request', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'category' => $category,
        // 'employees' => $employees,
        'vendor' => $vendor,
        'payment_term' => $payment_term,
        'invoice' => $invoices
    ));
}

public function fetchBillingPaymentRequest(Request $request){

    $login = strtoupper(Auth::user()->username);

    if (str_contains(Auth::user()->role_code, 'MIS') || str_contains(Auth::user()->role_code, 'ACC')) {
        $payment = db::select(" 
            SELECT
            *
            FROM
            acc_payment_requests
            where category = '".$request->get('category')."'
            order by id desc ");
    } else {
        $payment = db::select("
            SELECT
            *
            FROM
            acc_payment_requests
            where category = '".$request->get('category')."'
            and created_by = '".$login."'
            order by id desc
            ");
    }


    $payment_term = AccInvoicePaymentTerm::select('*')
    ->whereNull('deleted_at')
    ->distinct()
    ->get();

    $response = array(
        'status' => true,
        'payment' => $payment,
        'payment_term' => $payment_term
    );
    return Response::json($response);
}

public function fetchBillingPaymentRequestDetail(Request $request)
{
    $html = array();
    $invoice = AccInvoice::where('id', $request->invoice)
    ->get();
    foreach ($invoice as $inv)
    {
        $html = array(
            'invoice' => $inv->invoice_no,
            'amount' => $inv->amount,
            'file' => $inv->file,
            'due_date' => $inv->due_date
        );

    }

    return json_encode($html);
}

public function checkBillingPaymentRequest(){
    $title = "Check Payment Request";
    $title_jp = "支払リクエスト";

    return view('accounting_purchasing.billing.check_payment_request', array(
        'title' => $title,
        'title_jp' => $title_jp
    ));
}

public function fetchCheckBillingPaymentRequestId(Request $request){

    $id = $request->get('id');

    $payment = AccPaymentRequest::select('acc_payment_requests.supplier_name','acc_payment_request_details.invoice','acc_payment_requests.currency','acc_payment_request_details.amount','acc_payment_request_details.ppn','acc_payment_request_details.pph','acc_payment_request_details.net_payment','acc_payment_requests.payment_term','acc_payment_requests.payment_due_date','acc_invoices.surat_jalan','acc_invoices.faktur_pajak','acc_invoices.po_number','acc_invoices.created_at as tt_date','acc_invoices.do_date','acc_invoices.invoice_date as inv_date','acc_payment_requests.payment_date as dist_date_pch','acc_payment_request_details.id as id_payment_detail','acc_invoices.file')
    ->join('acc_payment_request_details','acc_payment_requests.id','=','acc_payment_request_details.id_payment')
    ->leftJoin('acc_invoices','acc_payment_request_details.id_invoice','=','acc_invoices.id')
    ->where('acc_payment_requests.id','=',$id)
    ->get();

    $response = array(
        'status' => true,
        'payment' => $payment
    );
    return Response::json($response);
}

public function fetchCheckBillingPaymentRequest(){
    $payment = AccPaymentRequest::select('acc_payment_requests.supplier_name','acc_payment_request_details.invoice','acc_payment_requests.currency','acc_payment_request_details.amount','acc_payment_request_details.ppn','acc_payment_request_details.pph','acc_payment_request_details.net_payment','acc_payment_requests.payment_term','acc_payment_requests.payment_due_date','acc_invoices.surat_jalan','acc_invoices.faktur_pajak','acc_invoices.po_number','acc_invoices.created_at as tt_date','acc_invoices.do_date','acc_invoices.invoice_date as inv_date','acc_payment_requests.payment_date as dist_date_pch','acc_payment_requests.status_gm','acc_payment_request_details.id as id_payment_detail','acc_invoices.file')
    ->join('acc_payment_request_details','acc_payment_requests.id','=','acc_payment_request_details.id_payment')
    ->leftJoin('acc_invoices','acc_payment_request_details.id_invoice','=','acc_invoices.id')
    ->where('acc_payment_requests.posisi','=','acc')
    ->whereNull('acc_payment_request_details.acc_payment')
    ->get();

    $response = array(
        'status' => true,
        'payment' => $payment
    );
    return Response::json($response);
}


public function fetchCheckBillingPaymentRequestAfter(){
    $payment = AccPaymentRequest::select('acc_payment_requests.supplier_name','acc_payment_request_details.invoice','acc_payment_requests.currency','acc_payment_request_details.amount','acc_payment_request_details.ppn','acc_payment_request_details.pph','acc_payment_request_details.net_payment','acc_payment_requests.payment_term','acc_payment_requests.payment_due_date','acc_invoices.surat_jalan','acc_invoices.faktur_pajak','acc_invoices.po_number','acc_invoices.created_at as tt_date','acc_invoices.do_date','acc_invoices.invoice_date as inv_date','acc_payment_requests.payment_date as dist_date_pch','acc_payment_requests.status_gm','acc_payment_request_details.id as id_payment_detail','acc_invoices.file','acc_payment_request_details.acc_payment')
    ->join('acc_payment_request_details','acc_payment_requests.id','=','acc_payment_request_details.id_payment')
    ->join('acc_invoices','acc_payment_request_details.id_invoice','=','acc_invoices.id')
    ->where('acc_payment_requests.posisi','=','acc')
    ->whereNotNull('acc_payment_request_details.acc_payment')
    ->whereNull('acc_payment_request_details.status_jurnal')
    ->get();

    $response = array(
        'status' => true,
        'payment' => $payment
    );
    return Response::json($response);
}

public function createBillingPaymentRequest(Request $request){
    try{

        $manager = null;
        $manager_name = null;
        $dgm = null;
        $gm = null;
        $gm_name = null;

        // if($request->get('department') == "Purchasing Control Department")
        // {
        //     $manag = db::select("SELECT employee_id, name, position, section FROM employee_syncs where end_date is null and department = 'Procurement Department' and position LIKE 'manager%'");
        // }

        $deptuser = "";

        $department = DB::table('employee_syncs')
        ->select('department')
        ->where('employee_id', strtoupper(Auth::user()->username))
        ->first();

        if ($department->department == "Purchasing Control Department") {
            $deptuser = "Procurement Department";
        }else{
            $deptuser = $department->department;
        }

        $manag = DB::table('employee_syncs')
        ->where('department',$deptuser)
        ->where('position','manager')
        ->get();

        if ($manag != null)
        {
            foreach ($manag as $mg)
            {
                $manager = $mg->employee_id;
                $manager_name = $mg->name;
            }

            $gm = 'PI0109004';
            $gm_name = 'Budhi Apriyanto';
        }
        else{
            $manager = null;
            $manager_name = null;
            $gm = null;
        }

        $id = 0;

        $nomor = DB::select("SELECT id FROM `acc_payment_requests` ORDER BY id DESC LIMIT 1");

        if ($nomor != null){
            $id = (int)$nomor[0]->id + 1;
        }
        else{
            $id = 1;
        }
        $payment = new AccPaymentRequest([
            'category' => $request->input('category'),
            'payment_date' => $request->input('payment_date'),
            'supplier_code' => $request->input('supplier_code'),
            'supplier_name' => $request->input('supplier_name'),
            'currency' => $request->input('currency'),
            'payment_term' => $request->input('payment_term'),
            'payment_due_date' => $request->input('payment_due_date'),
            'amount' => $request->input('amount'),
            'kind_of' => $request->input('kind_of'),
            'attach_document' => $request->input('attach_document'),
            'pdf' => 'Payment '.$request->input('supplier_name').' '.date('d-M-y', strtotime($request->input('payment_date'))).' ('.$id.').pdf',
            'posisi' => 'user',
            'status' => 'approval',
            'manager' => $manager,
            'manager_name' => $manager_name,
            'gm' => $gm,
            'gm_name' => $gm_name,
            'created_by' => Auth::user()->username,
            'created_name' => Auth::user()->name
        ]);

        $payment->save();

        for ($i = 1;$i < $request->input('jumlah');$i++)
        {
            $payment_detail = new AccPaymentRequestDetail([
                'id_payment' => $payment->id,
                'id_invoice' => $request->get('invoice'.$i),
                'invoice' => $request->get('invoice_number'.$i),
                'amount' => $request->get('amount'.$i),
                'ppn' => $request->get('ppn'.$i),
                'typepph' => $request->get('typepph'.$i),
                'amount_service' => $request->get('amount_service'.$i),
                'pph' => $request->get('pph'.$i),
                'net_payment' => $request->get('amount_final'.$i),
                'created_by' => Auth::user()->username,
                'created_name' => Auth::user()->name
            ]);

            $payment_detail->save();

            $update_invoice = AccInvoice::where('id',$request->get('invoice'.$i))->update([
                'payment_status' => 'payment'
            ]);

        }

        $payment_data = AccPaymentRequest::where('id','=',$payment->id)->first();
        $payment_detail = AccPaymentRequestDetail::select('*')
        ->where('id_payment',$payment->id)
        ->whereNull('deleted_at')
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
            'payment' => $payment_data,
            'payment_detail' => $payment_detail,
            'id' => $id
        ));

        $pdf->save(public_path() . "/payment_list/Payment ".$request->input('supplier_name'). " ".date('d-M-y', strtotime($request->input('payment_date')))." (".$payment->id.").pdf");

        $response = array(
            'status' => true,
            'message' => 'New Payment Request Successfully Added'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function deletePaymentRequest(Request $request)
{
    try {
        $payment = AccPaymentRequest::find($request->get('id'));

        $payment_item = AccPaymentRequestDetail::where('id_payment', '=', $payment->id)->get();

        foreach ($payment_item as $pi) {
            $update_invoice = AccInvoice::where('id',$pi->id_invoice)->update([
                'payment_status' => null
            ]);
        }

        $delete_payment_item = AccPaymentRequestDetail::where('id_payment', '=', $payment->id)->delete();
        $delete_payment = AccPaymentRequest::where('id', '=', $payment->id)->delete();

        $response = array(
          'status' => true,
          'datas' => "Berhasil",
      );
        return Response::json($response);
    }
    catch(QueryException $e)
    {
        return redirect('/billing/payment_request')->with('error', $e->getMessage())
        ->with('page', 'Payment Request');
    }
}


public function indexPaymentRequestMonitoring(){
    return view('accounting_purchasing.billing.monitoring_payment_request',
        array(
          'title' => 'Monitoring Payment Request',
          'title_jp' => ''
      ))->with('page', 'Monitoring Payment Request');
}

public function fetchPaymentRequestMonitoring(Request $request){

//   $datefrom = date("Y-m-d",  strtotime('-30 days'));
//   $dateto = date("Y-m-d");

//   $last = AccPaymentRequest::where('posisi','<>','acc')
//   ->orderBy('tanggal', 'asc')
//   ->select(db::raw('date(payment_date) as tanggal'))
//   ->first();

//   if(strlen($request->get('datefrom')) > 0){
//     $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
// }
// else{
//     if($last){
//       $tanggal = date_create($last->tanggal);
//       $now = date_create(date('Y-m-d'));
//       $interval = $now->diff($tanggal);
//       $diff = $interval->format('%a%');

//       if($diff > 30){
//         $datefrom = date('Y-m-d', strtotime($last->tanggal));
//     }
// }
// }

    $tanggal = "";

    if (strlen($request->get('date_from')) > 0)
    {
        $date_from = date('Y-m-d', strtotime($request->get('date_from')));
        $tanggal = "and payment_due_date >= '" . $date_from . "'";
        if (strlen($request->get('date_to')) > 0)
        {
            $date_to = date('Y-m-d', strtotime($request->get('date_to')));
            $tanggal = $tanggal . "and payment_due_date  <= '" . $date_to . "'";
        }
    }
        //per tgl
    $data = db::select("
     SELECT
     count( id ) AS jumlah,
     monthname( payment_due_date ) AS bulan,
     YEAR ( payment_due_date ) AS tahun,
     sum( CASE WHEN posisi = 'acc' THEN 1 ELSE 0 END ) AS Signed,
     sum( CASE WHEN posisi <> 'acc' THEN 1 ELSE 0 END ) AS NotSigned
     FROM
     acc_payment_requests
     WHERE
     acc_payment_requests.deleted_at IS NULL
     ".$tanggal."
     GROUP BY
     bulan,
     tahun
     ORDER BY
     tahun,
     MONTH ( payment_due_date ) ASC
     ");

    $year = date('Y');

    $response = array(
        'status' => true,
        'datas' => $data,
        'year' => $year
    );

    return Response::json($response);
}


public function detailPaymentRequestMonitoring(Request $request){

  $bulan = $request->get("bulan");
  $status = $request->get("status");
  $tglfrom = $request->get("tglfrom");
  $tglto = $request->get("tglto");

  $status_sign = "";

  if ($status == "Incompleted") {
      $status_sign = "and status != 'finished'";
  }
  else if ($status == "Completed") {
      $status_sign = "and posisi = 'finished'";
  }


  $qry = "SELECT * FROM acc_payment_requests WHERE deleted_at IS NULL and MONTHNAME(payment_due_date) = '".$bulan."' ".$status_sign." order by id DESC";
  $po = DB::select($qry);

  return DataTables::of($po)

  ->editColumn('status', function ($po)
  {
    $id = $po->id;

    if ($po->posisi == "user")
    {
        return '<label class="label label-danger">Staff Purchasing</label>';
    }

    else if ($po->posisi == "manager")
    {
        return '<label class="label label-warning">Diverifikasi Manager</label>';
    }

    else if ($po->posisi == "gm")
    {
        return '<label class="label label-primary">Diverifikasi GM Support</label>';
    }

    else if ($po->posisi == "acc_verif")
    {
        return '<label class="label label-primary">Diverifikasi Accounting</label>';
    }

    else if ($po->posisi == "acc")
    {
        return '<label class="label label-success">Sudah Diterima Accounting</label>';
    }

})
  ->addColumn('action', function ($po)
  {
    $id = $po->id;
    return '
    <a href="../../report/payment_request/' . $id . '" target="_blank" class="btn btn-danger btn-xs"  data-toggle="tooltip" title="Payment Report PDF"><i class="fa fa-file-pdf-o"></i> Report</a>
    ';   
})
  ->rawColumns(['status' => 'status', 'action' => 'action'])
  ->make(true);
}


public function fetchtablePaymentRequest(Request $request)
{
  $datefrom = date("Y-m-d",  strtotime('-30 days'));
  $dateto = date("Y-m-d");

  $last = AccPaymentRequest::where('posisi','<>','acc')
  ->orderBy('tanggal', 'asc')
  ->select(db::raw('date(payment_date) as tanggal'))
  ->first();

  if(strlen($request->get('datefrom')) > 0){
    $datefrom = date('Y-m-d', strtotime($request->get('datefrom')));
}else{
    if($last){
      $tanggal = date_create($last->tanggal);
      $now = date_create(date('Y-m-d'));
      $interval = $now->diff($tanggal);
      $diff = $interval->format('%a%');

      if($diff > 30){
        $datefrom = date('Y-m-d', strtotime($last->tanggal));
    }
}
}


if(strlen($request->get('dateto')) > 0){
    $dateto = date('Y-m-d', strtotime($request->get('dateto')));
}



$data = db::select("
    SELECT
    acc_payment_requests.*
    FROM
    acc_payment_requests
    WHERE
    acc_payment_requests.`posisi` <> 'acc'
    AND acc_payment_requests.deleted_at IS NULL
    AND DATE_FORMAT( payment_date, '%Y-%m-%d' ) BETWEEN '".$datefrom."'
    AND '".$dateto."'
    ORDER BY FIELD(posisi, 'user','manager','gm','acc_verif') ASC
    ");

$response = array(
    'status' => true,
    'datas' => $data
);

return Response::json($response);
}


public function verifikasi_payment_request($id)
{
    $payment = AccPaymentRequest::find($id);
    $payment_detail = AccPaymentRequestDetail::select('*')
    ->where('id_payment',$id)
    ->whereNull('deleted_at')
    ->get();

    $path = '/payment_list/Payment '.$payment->supplier_name. ' '.date('d-M-y', strtotime($payment->payment_date)).' ('.$id.').pdf';
    $file_path = asset($path);

    $array_file = array();

    foreach($payment_detail as $py){
        $invoice = AccInvoice::select('*')
        ->where('id',$py->id_invoice)
        ->whereNull('deleted_at')
        ->first();

        $invoice_path = '/files/invoice/'.$invoice->file;
        $file_invoice_path = asset($invoice_path);
        array_push($array_file, [
            'file' => $file_invoice_path,
            'invoice' => $py->invoice
        ]);
    }

    return view('accounting_purchasing.billing.verifikasi_payment_request', array(
        'payment' => $payment,
        'payment_detail' => $payment_detail,
        'invoice_file' => $array_file,
        'file_path' => $file_path,
    ))->with('page', 'Payment Request');
}

public function approval_payment_request(Request $request, $id)
{
    $approve = $request->get('approve');

    if ($approve == "1") {

        $pr = AccPaymentRequest::find($id);

        if ($pr->posisi == "manager")
        {

            $pr->posisi = "gm";
            $pr->status_manager = "Approved/".date('Y-m-d H:i:s');

            $mailto = "select distinct email from acc_payment_requests join users on acc_payment_requests.gm = users.username where acc_payment_requests.id = '" . $id . "'";
            $mails = DB::select($mailto);

            foreach ($mails as $mail)
            {
                $mailtoo = $mail->email;
            }

        }


        else if ($pr->posisi == "gm")
        {
            $pr->posisi = 'acc_verif';
            $pr->status_gm = "Approved/".date('Y-m-d H:i:s');

            $mails = "select distinct email from employee_syncs join users on employee_syncs.employee_id = users.username where end_date is null and employee_syncs.department = 'Accounting Department' and (employee_id = 'PI0902001'  or employee_id = 'PI1505001')";
            $mailtoo = DB::select($mails);

            $pr->save();
        }

        else if ($pr->posisi == "acc_verif")
        {
            $pr->posisi = 'acc';
            $pr->status_gm = "Approved/".date('Y-m-d H:i:s');
            $pr->status = "finished";

            $payment_detail = AccPaymentRequestDetail::select('*')
            ->where('id_payment',$id)
            ->whereNull('deleted_at')
            ->get();

            foreach($payment_detail as $payment){
                $updatePayment = AccInvoice::where('id','=',$payment->id_invoice)
                ->update([
                    'payment_status' => 'payment_acc'
                ]);
            }


            $pr->save();
        }

        $pr->save();

        $payment_detail = AccPaymentRequestDetail::select('*')
        ->where('id_payment',$id)
        ->whereNull('deleted_at')
        ->get();

        $pdf = \App::make('dompdf.wrapper');
        $pdf->getDomPDF()->set_option("enable_php", true);
        $pdf->setPaper('A4', 'potrait');

        $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
            'payment' => $pr,
            'payment_detail' => $payment_detail,
            'id' => $id
        ));

        $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");

        if ($pr->posisi != "acc") {
            $isimail = "select acc_payment_requests.*, acc_payment_request_details.id_invoice, acc_payment_request_details.invoice, acc_payment_request_details.amount as amount_detail, net_payment,acc_invoices.file as attach_file,acc_invoices.mirai_amount from acc_payment_requests join acc_payment_request_details on acc_payment_requests.id = acc_payment_request_details.id_payment join acc_invoices on acc_payment_request_details.id_invoice = acc_invoices.id where acc_payment_requests.id = ".$id;
            $payment = db::select($isimail);

            Mail::to($mailtoo)->bcc(['rio.irvansyah@music.yamaha.com'])->send(new SendEmail($payment, 'payment_request'));
        }


        return redirect('/payment_request/verifikasi/' . $id)->with('status', 'Payment Request Approved')
        ->with('page', 'Payment Request');
    }
    else
    {
        return redirect('/payment_request/verifikasi/' . $id)->with('error', 'Payment Request Not Approved')
        ->with('page', 'Payment Request');
    }
}

public function reject_payment_request(Request $request, $id)
{
    $alasan = $request->get('alasan');

    $pr = AccPaymentRequest::find($id);

    if ($pr->posisi == "manager"  || $pr->posisi == "gm" || $pr->posisi == "acc_verif")
    {
        $pr->alasan = $alasan;
        $pr->datereject = date('Y-m-d H:i:s');
        $pr->posisi = "user";
        $pr->status_manager = null;
        $pr->status_gm = null;
    }

    $pr->save();

    $payment_detail = AccPaymentRequestDetail::select('*')
    ->where('id_payment',$id)
    ->whereNull('deleted_at')
    ->get();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('accounting_purchasing.billing.report_payment_request', array(
        'payment' => $pr,
        'payment_detail' => $payment_detail,
        'id' => $id
    ));

    $pdf->save(public_path() . "/payment_list/Payment ".$pr->supplier_name. " ".date('d-M-y', strtotime($pr->payment_date))." (".$id.").pdf");

    $isimail = "select * from acc_payment_requests where acc_payment_requests.id = ".$id;
    $tolak = db::select($isimail);

            //kirim email ke User
    $mails = "select distinct email from acc_payment_requests join users on acc_payment_requests.created_by = users.username where acc_payment_requests.id ='" . $id . "'";
    $mailtoo = DB::select($mails);

    Mail::to($mailtoo)->bcc(['ympi-mis-ML@music.yamaha.com'])->send(new SendEmail($tolak, 'payment_request'));

    $message = 'Payment Request '.$pr->supplier_name;
    $message2 = 'Not Approved';

    return view('accounting_purchasing.verifikasi.pr_message', array(
        'head' => 'Payment Request',
        'message' => $message,
        'message2' => $message2,
    ))->with('page', 'Payment Request');
}


public function postAccountingPaymentRequest(Request $request)
{
    try {
        $id_user = Auth::id();

        $id = explode(',',$request->get('id_payment'));
        $payment = explode(',',$request->get('payment'));
        $stat = 0;

        for ($i=0; $i < count($id); $i++) {
            $cek_jurnal = AccPaymentRequestDetail::where('acc_payment','=',$payment[$i])
            ->whereNotNull('status_jurnal')
            ->get();

            if(count($cek_jurnal) > 0){
                $stat++;
            }
        }

        if ($stat > 0) {
            $response = array(
                'status' => false,
                'message' => 'ID Payment ini sudah ada'
            );
            return Response::json($response);
        }
        else{
            for ($i=0; $i < count($id); $i++) {

                if ($payment[$i] == "") {
                    $payment[$i] = null;
                }

                $audit_all = AccPaymentRequestDetail::where('id',$id[$i])
                ->update([
                    'acc_payment' => $payment[$i],
                    'created_by' => $id_user
                ]);
            }

            $response = array(
                'status' => true,
                'message' => 'Berhasil Dikonfirmasi'
            );
            return Response::json($response);
        }

    }

    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function send_document(Request $request)
{
    try{
        $pr = AccPaymentRequest::find($request->get("id"));
        $pr->status_document = 'document';
        $pr->save();

        $response = array(
          'status' => true,
          'datas' => "Berhasil",
      );
        return Response::json($response);
    }
    catch (QueryException $e){
        $error_code = $e->errorInfo[1];
        if($error_code == 1062){
           $response = array(
              'status' => false,
              'datas' => "NO PO Already Exist",
          );
           return Response::json($response);
       }
       else{
           $response = array(
              'status' => false,
              'datas' => "Update NO PO Error.",
          );
           return Response::json($response);
       }
   }
}

public function indexJurnalPayment()
{
    $title = 'Accounting Payment Jurnal';
    $title_jp = '';

    $vendor = AccSupplier::select('acc_suppliers.*')
    ->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    $bank = db::select("
        SELECT
                *
        FROM
        acc_rekenings
        WHERE deleted_at is null
        and not_active = 'FALSE'
        ORDER BY id desc
        ");

    $vendor_jurnal = DB::select('
        SELECT DISTINCT
        supplier_code,
        supplier_name
        FROM
        `acc_payment_requests`
        JOIN acc_payment_request_details ON acc_payment_requests.id = acc_payment_request_details.id_payment
        WHERE
        acc_payment IS NOT NULL
        AND status_jurnal IS NULL
        ');

    return view('accounting_purchasing.billing.jurnal', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'vendor' => $vendor,
        'bank' => $bank,
        'vendor_jurnal' => $vendor_jurnal
    ))->with('page', 'Billing Jurnal')
    ->with('head', 'Billing Jurnal');
}

public function fetchJurnalPayment(){
    $jurnal = db::select("SELECT * FROM acc_jurnals WHERE deleted_at IS NULL order by id desc");

    $response = array(
        'status' => true,
        'jurnal' => $jurnal
    );
    return Response::json($response);
}

public function getBank(Request $request)
{
    $html = array();
        // $vendor_code = AccSupplier::where('vendor_code', $request->supplier_code)
        // ->get();

    $bank = db::select("
        SELECT
                *
        FROM
        acc_rekenings
        WHERE id = '".$request->id."'
        and not_active = 'FALSE'
        ORDER BY id desc
        ");

    foreach ($bank as $bank)
    {
        $html = array(
            'vendor' => $bank->vendor,
            'currency' => $bank->currency,
            'branch' => $bank->branch,
            'rekening_no' => $bank->rekening_no,
            'rekening_nama' => $bank->rekening_nama,
            'internal' => $bank->internal,
            'ln' => $bank->ln,
            'bank_charge' => $bank->bank_charge,
            'switch_code' => $bank->switch_code
        );
    }
    return json_encode($html);
}

public function getIDPayment(Request $request){
    try {
        if ($request->get('supplier_code') != null) {
            $payment = AccPaymentRequest::select('acc_payment_request_details.acc_payment as payment_id')
            ->join('acc_payment_request_details','acc_payment_requests.id','=','acc_payment_request_details.id_payment')
            ->where('acc_payment_requests.supplier_name','=',$request->get('supplier_code'))
            ->whereNotNull('acc_payment_request_details.acc_payment')
            ->whereNotNull('acc_payment_request_details.status_list_payment')
            ->distinct()
            ->get();

            $vendor = AccSupplier::select('supplier_name')
            ->where('supplier_name','=',$request->get('supplier_code'))
            ->first();

        }else{
            $payment = null;
        }

        if (count($payment) > 0) {
            $response = array(
                'status' => true,
                'message' => 'Success',
                'payment' => $payment,
                'vendor' => $vendor
            );
            return Response::json($response);
        }else{
            $response = array(
                'status' => false,
                'message' => 'No ID Payment Data',
                'payment' => ''
            );
            return Response::json($response);
        }
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function fetchInvoiceVerification(Request $request){
    try {
        if ($request->get('id_payment') != null) {
            $invoice = AccPaymentRequest::select('acc_payment_requests.supplier_name','acc_payment_requests.currency','acc_payment_request_details.invoice','acc_payment_request_details.id_invoice','acc_payment_request_details.amount','acc_payment_request_details.amount_service','acc_payment_request_details.ppn','acc_payment_request_details.pph','acc_payment_request_details.net_payment')
            ->join('acc_payment_request_details','acc_payment_requests.id','=','acc_payment_request_details.id_payment')
            ->where('acc_payment_request_details.acc_payment','=',$request->get('id_payment'))
            ->whereNotNull('acc_payment_request_details.acc_payment')
            ->get();
        }else{
            $invoice = null;
        }

        if (count($invoice) > 0) {
            $response = array(
                'status' => true,
                'message' => 'Success',
                'invoice' => $invoice
            );
            return Response::json($response);
        }else{
            $response = array(
                'status' => false,
                'message' => 'No ID Payment Data',
                'payment' => ''
            );
            return Response::json($response);
        }
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}



public function createJurnal(Request $request){
    try{
        $jurnal = new AccJurnal([
            'jurnal_date' => $request->input('jurnal_date'),
            'supplier_code' => $request->input('supplier_code'),
            'supplier_name' => $request->input('supplier_code'),
            'bank_id' => $request->input('bank_id'),
            'bank_branch' => $request->input('bank_branch'),
            'bank_beneficiary_name' => $request->input('bank_beneficiary_name'),
            'bank_beneficiary_no' => $request->input('bank_beneficiary_no'),
            'currency' => $request->input('currency'),
            'internal' => $request->input('internal'),
            'foreign' => $request->input('foreign'),
            'switch_code' => $request->input('switch_code'),
            'bank_charge' => $request->input('bank_charge'),
            'invoice' => $request->input('invoice'),
            'remark' => $request->input('remark'),
            'exchange_method' => $request->input('exchange_method'),
            'contract_number' => $request->input('contract_number'),
            'iban' => $request->input('iban'),
            'purpose_remit' => $request->input('purpose_remit'),
            'id_payment' => $request->input('id_payment'),
            'amount_bank_charge' => $request->input('amount_bank_charge'),
            'amount' => $request->input('amount'),
            'created_by' => Auth::user()->username,
            'created_name' => Auth::user()->name
        ]);

        $jurnal->save();


        for ($i = 0;$i < $request->input('total_baris_invoice');$i++)
        {
            $jurnal_invoice = new AccJurnalInvoice([
                'jurnal_id' => $jurnal->id,
                'payment_id' => $request->get('id_payment'),
                'supplier_name' => $request->get('invoice_supplier_name_'.$i),
                'invoice_no' => $request->get('invoice_number_'.$i),
                'currency' => $request->get('invoice_currency_'.$i),
                'amount' => $request->get('invoice_amount_'.$i),
                'ppn' => $request->get('invoice_ppn_'.$i),
                'pph' => $request->get('invoice_pph_'.$i),
                'net_payment' => $request->get('net_payment_'.$i),
                'created_by' => Auth::user()->username
            ]);

            $jurnal_invoice->save();

            $update_status = AccPaymentRequestDetail::where('acc_payment',$request->get('id_payment'))
            ->where('id_invoice',$request->get('invoice_id_'.$i))
            ->update([
                'status_jurnal' => 'true'
            ]);
        }

        for ($i = 0;$i < $request->input('total_baris_jurnal');$i++)
        {
            $jurnal_detail = new AccJurnalDetail([
                'jurnal_id' => $jurnal->id,
                'seq_id' => $request->get('seq_'.$i),
                'reference' => $request->get('reference_'.$i),
                'cost_center' => $request->get('cost_center_'.$i),
                'type' => $request->get('type_'.$i),
                'gl_account' => $request->get('gl_account_'.$i),
                'gl_desc' => $request->get('gl_desc_'.$i),
                'currency' => $request->get('currency_'.$i),
                'amount' => $request->get('amount_'.$i),
                'note' => $request->get('note_'.$i),
                'created_by' => Auth::user()->username
            ]);

            $jurnal_detail->save();
        }

        $response = array(
            'status' => true,
            'message' => 'New Jurnal Successfully Added'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}

public function indexReportJurnal()
{
    $title = 'Maintain List Bank';
    $page = 'Maintain List Bank';
    $title_jp = '';

    return view('accounting_purchasing.billing.list_bank', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', $page)->with('head', $page);
}

public function fetchReportJurnal(Request $request)
{
    try {
        $date_from = $request->get('date_from');
        $date_to = $request->get('date_to');
        if ($date_from == "") {
         if ($date_to == "") {
          $first = date('Y-m-d');
          $last = date('Y-m-d');
      }else{
          $first = date('Y-m-d');
          $last = $date_to;
      }
  }else{
     if ($date_to == "") {
      $first = $date_from;
      $last = date('Y-m-d');
  }else{
      $first = $date_from;
      $last = $date_to;
  }
}

$jurnal = AccJurnal::select('acc_jurnals.*')
->where('jurnal_date','>=',$first)
->where('jurnal_date','<=',$last);

if($request->get('currency') != null){
  $curr =  explode(",", $request->get('currency'));
  $jurnal = $jurnal->whereIn('acc_jurnals.currency',$curr);
}

$jurnal = $jurnal->orderby('jurnal_date','desc')->get();

$response = array(
    'status' => true,
    'jurnal' => $jurnal,
    'message' => 'Success Input Data'
);
return Response::json($response);
} catch (\Exception $e) {
    $response = array(
        'status' => false,
        'message' => $e->getMessage(),
    );
    return Response::json($response);
}
}

public function exportJurnal(Request $request){

    $time = date('d-m-Y H;i;s');

    $tanggal = "";
    $currency = "";

    if (strlen($request->get('date_from')) > 0)
    {
        $date_from = date('Y-m-d', strtotime($request->get('date_from')));
        $tanggal = "and jurnal_date >= '" . $date_from . "'";
        if (strlen($request->get('date_to')) > 0)
        {
            $date_to = date('Y-m-d', strtotime($request->get('date_to')));
            $tanggal = $tanggal . "and jurnal_date  <= '" . $date_to . "'";
        }
    }

    if($request->get('currency') != null){
          // $curr =  explode(",", $request->get('currency'));
      $currency = "and acc_jurnals.currency IN ('".$request->get('currency')."')";
  }

  $jurnal_detail = db::select(
    "Select acc_rekenings.settle_acc_no,acc_jurnals.supplier_name,acc_rekenings.rekening_nama,acc_rekenings.address_vendor,acc_rekenings.city,acc_rekenings.country,acc_rekenings.rekening_no,acc_jurnals.currency,acc_rekenings.sector_select ,acc_jurnals.contract_number,acc_jurnals.exchange_method, acc_rekenings.bank_name, acc_rekenings.bank_branch, acc_rekenings.bank_city_country, acc_jurnals.swift_code, acc_jurnals.iban, acc_rekenings.resident, acc_rekenings.citizenship, acc_rekenings.relation, acc_jurnals.purpose_remit, acc_rekenings.bank_charge,acc_jurnals.amount,acc_jurnals.jurnal_date,acc_jurnals.remark from acc_jurnals JOIN acc_rekenings on acc_jurnals.bank_id = acc_rekenings.id WHERE acc_jurnals.deleted_at IS NULL ".$tanggal." ".$currency." order by acc_jurnals.id ASC");

  $data = array(
    'jurnal_detail' => $jurnal_detail
);

  ob_clean();

  Excel::create('Jurnal List '.$time, function($excel) use ($data){
    $excel->sheet('Location', function($sheet) use ($data) {
      return $sheet->loadView('accounting_purchasing.billing.jurnal_excel', $data);
  });
})->export('xlsx');
}

public function get_jurnal_type(Request $request)
{
    $jurnal_type = DB::select('
        SELECT
                *
        FROM
        `acc_jurnal_types`
        WHERE
        deleted_at IS NULL
        ');

    return json_encode($jurnal_type);
}

public function get_gl_account(Request $request)
{
    $gl_account = DB::select('
        SELECT
                *
        FROM
        `acc_gl_accounts`
        WHERE
        deleted_at IS NULL
        ');

    return json_encode($gl_account);
}

public function get_cost_center(Request $request)
{
    $cost_centers = DB::select('
        SELECT
                *
        FROM
        `acc_cost_centers`
        WHERE
        deleted_at IS NULL
        ');

    return json_encode($cost_centers);
}

public function indexInvoiceMonitoring($id)
{
    $title = 'Invoice Monitoring';
    $title_jp = '';

    $vendor = AccSupplier::select('acc_suppliers.vendor_code','acc_suppliers.supplier_name')
    ->whereNull('acc_suppliers.deleted_at')
    ->distinct()
    ->get();

    return view('accounting_purchasing.billing.monitoring_invoice', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'vendor' => $vendor,
        'id' => $id
    ))->with('page', $title)->with('Head', $title);
}

public function fetchInvoiceMonitoring(Request $request)
{
    $id = $request->get('id');

    $first = '2022-12-01';
    $now = date("Y-m");
    $end = date("Y-m-t", strtotime($now));
    $vendor = "";

    if (strlen($request->get('vendor')) > 0) {
        $vendor = "and receive.supplier_code = '".$request->get('vendor')."'";
    }

    if ($id == "material") {
        $all_invoice = db::connection('ymes')
        ->select("
            SELECT
            DISTINCT
            doc_text,
            post_date,
            receive.supplier_code,
            to_char(post_date, 'YYYY-MM') as bulan,
            vm_supp0010.supplier_name
            FROM
            vd_sap0120_010 AS receive
            JOIN vm_supp0010
            ON receive.supplier_code = vm_supp0010.supplier_code 
            WHERE
            receive.post_date >= '" . $first . "' 
            AND receive.post_date <= '" . $end . "' 
            AND LENGTH(receive.item_code) > 0
            ".$vendor."
            ORDER BY 
            post_date ASC"
        );
    }else if($id == "non_material"){
        $all_invoice = db::connection('ymes')
        ->select("
            SELECT
            DISTINCT
            doc_text,
            post_date,
            receive.supplier_code,
            to_char(post_date, 'YYYY-MM') as bulan,
            vm_supp0010.supplier_name
            FROM
            vd_sap0120_010 AS receive 
            JOIN vm_supp0010
            ON receive.supplier_code = vm_supp0010.supplier_code
            WHERE
            receive.post_date >= '" . $first . "' 
            AND receive.post_date <= '" . $end . "' 
            AND LENGTH(receive.item_name) > 0
            ".$vendor."
            ORDER BY 
            post_date ASC
            ");
    }


    $actual_invoice = db::SELECT("SELECT DISTINCT invoice_no, surat_jalan, supplier_code, supplier_name from acc_invoices where deleted_at is null and invoice_date >= '2022-10-01'");

    $response = array(
        'status' => true,
        'all_invoice' => $all_invoice,
        'actual_invoice' => $actual_invoice
    );
    return Response::json($response);

}


public function indexDisposalNonAsset()
{
    $title = 'Non Fixed Asset - Disposal Application';
    $title_jp = '';

    $section = DB::SELECT("SELECT DISTINCT section from employee_syncs");

    $asset_list = AccReceive::select('no_po','no_pr','no_item','nama_item','qty','qty_receive','date_receive','surat_jalan')
    ->whereNull('status_disposal')
    ->where('status','=','Barang Modal')
    ->get();

    return view('fixed_asset.non_fixed_asset.disposal_non_fixed_asset', array(
        'title' => $title,
        'title_jp' => $title_jp,
        'list_non_asset' => $asset_list,
        'section' => $section
    ))->with('page', 'Non Fixed Asset Disposal');
}


public function fetchDisposalNonAsset(Request $request){

    $asset_dispo = FixedAssetNonDisposal::select('fixed_asset_non_disposals.id', 'fixed_asset_non_disposals.form_number','fixed_asset_non_disposals.fixed_asset_id', 'fixed_asset_non_disposals.form_number', 'fixed_asset_non_disposals.fixed_asset_name', 'fixed_asset_non_disposals.clasification_id', 'fixed_asset_non_disposals.section_control', 'fixed_asset_non_disposals.pic_incharge', 'fixed_asset_non_disposals.new_pic_app', 'fixed_asset_non_disposals.mode', 'fixed_asset_non_disposals.status', 'fixed_asset_non_disposals.last_status', db::raw('DATE_FORMAT(fixed_asset_non_disposals.created_at,"%Y-%m-%d") as create_at'), 'created_by');

    if($request->get('mode')){
        $asset_dispo = $asset_dispo->where('mode', '=', $request->get('mode'));
    }

    if($request->get('form_id')){
        $asset_dispo = $asset_dispo->where('form_number', '=', $request->get('form_id'));
    }

    $asset_dispo = $asset_dispo->get();

    $list_receive = AccReceive::select('no_po','no_pr','no_item','nama_item','qty','qty_receive','date_receive','surat_jalan')
    ->whereNull('status_disposal')
    ->where('status','=','Barang Modal')
    ->get();

    $response = array(
        'status' => true,
        'datas' => $asset_dispo,
        'list_receive' => $list_receive
    );
    return Response::json($response);
}


public function postDisposalNonAsset(Request $request)
{
    $file = $request->file('asset_picture');
    $tujuan_upload = 'files/fixed_asset/disposal_non';

    if ($file != null || $file != "") {
        $nama = $file->getClientOriginalName();
        $extension = pathinfo($nama, PATHINFO_EXTENSION);
        $filename = $request->get('asset_id').'.'.$extension;

        $file->move($tujuan_upload,$filename);
    }else{
        $filename = "";
    }

    $pic_incharge = 'Logistic Department';

    $pic_disposal = EmployeeSync::whereNull('end_date')->where('department', '=', $pic_incharge)
    ->where('position', 'like','Foreman%')
    ->select('employee_id', 'name')
    ->first();

    //Approval
    $emp_pic = EmployeeSync::where('employee_id', '=', $asset_reg->pic)->select('employee_id', 'name', 'position', 'section', 'department', 'division')->first();

    // JIKA Leader
    if (str_contains($emp_pic->position,'Leader')) {
        $pic = db::select("SELECT users.username as employee_id, users.name from send_emails LEFT JOIN users on send_emails.email = users.email where remark = '".$emp_pic->section."' AND users.deleted_at is null");

        $pic_app = $pic->employee_id.'/'.$pic->name;
    } else {
        $pic_app = $emp_pic->employee_id.'/'.$emp_pic->name;
    }

    $fa_app = 'PI0905001/Ismail Husen';

    $manager_pic = DB::select('SELECT username, name from send_emails left join users on send_emails.email = users.email where send_emails.remark = "'.$emp_pic->department.'"');
    $manager_app = $manager_pic[0]->username.'/'.$manager_pic[0]->name;

    $manager_disp = DB::select('SELECT username, name from send_emails left join users on send_emails.email = users.email where send_emails.remark = "'.$pic_incharge.'"');
    $manager_disposal_app = $manager_disp[0]->username.'/'.$manager_disp[0]->name;


    $acc_manager = EmployeeSync::whereNull('end_date')->where('department', '=', 'Accounting Department')
    ->where('position', 'like', 'Manager%')
    ->select('employee_id', 'name')
    ->first();
    $acc_manager_app = $acc_manager->employee_id.'/'.$acc_manager->name;

    $pic_disposal_app = $pic_disposal->employee_id.'/'.$pic_disposal->name;

    $tahun = date('y');
    $bulan = date('m');

    $query = "SELECT form_number FROM `fixed_asset_disposals` where DATE_FORMAT(created_at, '%y') = '$tahun' and month(created_at) = '$bulan' order by form_number DESC LIMIT 1";
    $nomorurut = DB::select($query);

    if ($nomorurut != null)
    {
        $nomor = substr($nomorurut[0]->form_number, -3);
        $nomor = $nomor + 1;
        $nomor = sprintf('%03d', $nomor);
    }
    else
    {
        $nomor = "001";
    }

    $result['tahun'] = $tahun;
    $result['bulan'] = $bulan;
    $result['no_urut'] = $nomor;

    $form_number = 'FAD'.$result['tahun'].$result['bulan'].$result['no_urut'];

    $asset_disposal = new FixedAssetNonDisposal([
        'disposal_request_date' => date('Y-m-d'),
        'form_number' => $form_number,
        'fixed_asset_id' => $request->get('asset_id'),
        'fixed_asset_name' => $request->get('asset_name'),
        'clasification_id' => $asset_reg->classification_category,
        'section_control' => $request->get('section'),
        'reason' => $request->get('disposal_reason'),
        'reason_jp' => $request->get('disposal_reason_jp'),
        'new_picture' => $filename,
        'pic_incharge' => $pic_incharge,
        'mode' => $request->get('mode'),
        'quotation_file' => $filename_q,
        'status' => 'created',
        'pic_app' => $pic_app,
        'fa_app' => $fa_app,
        'manager_app' => $manager_app,
        'manager_disposal_app' => $manager_disposal_app,
        'manager_acc_app' => $acc_manager_app,
        'new_pic_app' => $pic_disposal_app,
        'created_by' => Auth::user()->username
    ]);
    $asset_disposal->save();

    // ---------------------- REPORT PDF --------------------

    $disposal = FixedAssetNonDisposal::where('form_number', '=', $form_number)
    ->select('fixed_asset_disposals.form_number', 'fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.new_picture', 'fixed_asset_disposals.registration_amount', 'fixed_asset_disposals.registration_date', 'fixed_asset_disposals.vendor', 'fixed_asset_disposals.book_value', 'fixed_asset_disposals.invoice_number', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'fixed_asset_disposals.disposal_request_date', 'fixed_asset_disposals.pic_app', 'fixed_asset_disposals.fa_app', 'fixed_asset_disposals.manager_app', 'fixed_asset_disposals.manager_disposal_app', 'fixed_asset_disposals.manager_acc_app', 'fixed_asset_disposals.new_pic_app', db::raw('DATE_FORMAT(fixed_asset_disposals.pic_app_date, "%d-%m-%Y") as pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.fa_app_date, "%d-%m-%Y") as fa_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_app_date, "%d-%m-%Y") as manager_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_disposal_app_date, "%d-%m-%Y") as manager_disposal_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.manager_acc_app_date, "%d-%m-%Y") as manager_acc_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.new_pic_app_date, "%d-%m-%Y") as new_pic_app_date'), db::raw('DATE_FORMAT(fixed_asset_disposals.created_at, "%d %b %Y") as create_at'), db::raw('fixed_asset_disposals.clasification_id as category'))
    ->first();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setOptions(['isHtml5ParserEnabled' => true, 'isRemoteEnabled' => true]);    
    $pdf->setPaper('A4', 'potrait');

    $pdf->loadView('fixed_asset.report_file.disposal_report', array(
        'datas' => $disposal
    ));

    $pdf->save(public_path() . "/files/fixed_asset/report_disposal/Disposal_".$form_number.".pdf");

    // --------------   Email ------------------

    $data_fixed_asset = FixedAssetDisposal::where('fixed_asset_disposals.id', '=', $asset_disposal->id)
    ->select('fixed_asset_disposals.id', 'fixed_asset_disposals.form_number','fixed_asset_disposals.fixed_asset_id', 'fixed_asset_disposals.fixed_asset_name', 'fixed_asset_disposals.section_control', 'fixed_asset_disposals.reason', 'fixed_asset_disposals.reason_jp','fixed_asset_disposals.clasification_id', 'fixed_asset_disposals.pic_incharge', 'fixed_asset_disposals.mode', 'quotation_file', db::raw('DATE_FORMAT("fixed_asset_disposals.created_at", "%d-%m-%Y") as request_date'), 'fixed_asset_disposals.status', db::raw('DATE_FORMAT(fixed_asset_disposals.disposal_request_date, "%d-%m-%Y") as disposal_request_date'), 'dgm_app', 'reject_status', 'comment')
    ->first();

    $data = [
        'datas' => $data_fixed_asset
    ];

    $get_pos = EmployeeSync::where('employee_id', '=', $emp_pic->employee_id)->select('position', 'section')->first();

    // JIKA Leader
    if (str_contains($get_pos->position,'Leader')) {
        $mail = db::select("SELECT email from send_emails where remark = '".$get_pos->section."'");

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
    } else {
        $mail = db::select("SELECT email from users where username = '".$emp_pic->employee_id."'");

        Mail::to($mail)->bcc(['nasiqul.ibat@music.yamaha.com'])->send(new SendEmail($data, 'fixed_asset_disposal'));
    }

    $response = array(
        'status' => true,
    );
    return Response::json($response);
}

public function indexFixedAssetMap(){

    $location = FixedAssetitem::select('location')
    ->where('remark','=','YMPI')
    ->orderBy('location', 'asc')
    ->distinct()
    ->get();

    return view('fixed_asset.fixed_asset_map', array(
       'title' => 'Fixed Asset Map',
       'title_jp' => '',
       'location' => $location
   ))->with('page', 'Fixed Asset Map');
}


public function fetchFixedAssetMap(Request $request){

    $asset = FixedAssetitem::where('location', 'like', '%' . $request->get('location') . '%')
    ->where('remark','=','YMPI')
    ->orderBy('location', 'asc')
    ->distinct()
    ->get();

    $response = array(
        'status' => true,
        'location' => $request->get('location'),
        'asset' => $asset
    );
    return Response::json($response);
}

public function canteen_cancel_item(){

    $title = "Cancel Item Kantin";
    $title_jp = "";

    return view('accounting_purchasing.kantin.cancel_item_kantin', array(
        'title' => $title,
        'title_jp' => $title_jp
    ));
}

public function fetch_cancel_kantin(){

    $invoice = db::select("SELECT
            *
        FROM
        acc_invoices
        Where category = 'General'
        order by id desc
        ");

    $response = array(
        'status' => true,
        'invoice' => $invoice
    );
    return Response::json($response);
}


public function indexBillingListPayment(){
    $payment = AccPaymentRequest::select(DB::RAW("REPLACE(acc_payment_requests.supplier_name,'\'','') AS `supplier_name`"),'acc_payment_request_details.invoice','acc_payment_requests.currency','acc_payment_request_details.amount','acc_payment_request_details.ppn','acc_payment_request_details.pph','acc_payment_request_details.net_payment','acc_payment_requests.payment_term','acc_payment_requests.payment_due_date','acc_invoices.surat_jalan','acc_invoices.faktur_pajak','acc_invoices.po_number','acc_invoices.invoice_date as tt_date','acc_payment_requests.payment_date as dist_date_pch','acc_payment_requests.status_gm','acc_payment_request_details.id as id_payment_detail','acc_invoices.file','acc_payment_request_details.acc_payment')
    ->join('acc_payment_request_details','acc_payment_requests.id','=','acc_payment_request_details.id_payment')
    ->join('acc_invoices','acc_payment_request_details.id_invoice','=','acc_invoices.id')
    ->where('acc_payment_requests.posisi','=','acc')
    ->whereNotNull('acc_payment_request_details.acc_payment')
    ->whereNull('acc_payment_request_details.status_jurnal')
    ->whereNull('acc_payment_request_details.status_list_payment')
    ->get();

    return view('accounting_purchasing.billing.billing_list_payment', array(
        'title' => 'Create List Payment Here',
        'title_jp' => '',
        'payment' => $payment
    ));
}


public function fetchBillingListPayment(Request $request){
    $login = strtoupper(Auth::user()->username);

    $payment = db::select(" 
        SELECT
        *
        FROM
        acc_payment_lists
        order by id desc
        ");

    $response = array(
        'status' => true,
        'payment' => $payment,
    );
    return Response::json($response);
}

public function createBillingListPayment(Request $request){
    try{

        $payment = db::table('acc_payment_lists')
        ->insertGetId([
            'payment_id' => $request->get('payment_id'),
            'supplier_name' => $request->get('supplier_name'),
            'payment_due_date' => $request->get('payment_due_date'),
            'currency' => $request->get('currency'),
            'created_by' => Auth::user()->username,
            'created_name' => Auth::user()->name,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ]);

        $update_invoice = DB::table('acc_payment_request_details')->select('supplier_name','acc_payment','payment_due_date','currency')
        ->join('acc_payment_requests','acc_payment_requests.id','=','acc_payment_request_details.id_payment')
        ->where('acc_payment',$request->get('payment_id'))
        ->where('supplier_name',$request->get('supplier_name'))
        ->where('payment_due_date',$request->get('payment_due_date'))
        ->where('currency',$request->get('currency'))
        ->update([
            'status_list_payment' => $payment,
            'acc_payment_request_details.updated_at' => date('Y-m-d H:i:s')
        ]);

        $response = array(
            'status' => true,
            'message' => 'New Payment List Successfully Added'
        );
        return Response::json($response);
    }
    catch (\Exception $e) {
        $response = array(
            'status' => false,
            'message' => $e->getMessage()
        );
        return Response::json($response);
    }
}


public function reportPaymentList($id){
    $payment = db::table('acc_payment_lists')
    ->where('id', '=', $id)
    ->first();

    $payment_detail = AccPaymentRequest::select('acc_payment_requests.supplier_name','acc_payment_request_details.invoice','acc_payment_requests.currency','acc_payment_request_details.amount','acc_payment_request_details.ppn','acc_payment_request_details.pph','acc_payment_request_details.net_payment','acc_payment_requests.payment_term','acc_payment_requests.payment_due_date','acc_invoices.surat_jalan','acc_invoices.faktur_pajak','acc_invoices.po_number','acc_invoices.invoice_date as tt_date','acc_payment_requests.payment_date as dist_date_pch','acc_payment_requests.status_gm','acc_payment_request_details.id as id_payment_detail','acc_invoices.file','acc_payment_request_details.acc_payment','acc_payment_request_details.status_jurnal')
    ->join('acc_payment_request_details','acc_payment_requests.id','=','acc_payment_request_details.id_payment')
    ->join('acc_invoices','acc_payment_request_details.id_invoice','=','acc_invoices.id')
    ->where('status_list_payment',$id)
    ->get();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'landscape');

    $pdf->loadView('accounting_purchasing.billing.report_payment_list', array(
        'payment' => $payment,
        'payment_detail' => $payment_detail,
        'id' => $id
    ));
    return $pdf->stream("Payment ".$payment->supplier_name. " ".date('d-M-y', strtotime($payment->payment_due_date))." ".$payment->currency." ".$payment->payment_id.".pdf");
}


public function indexUploadJurnal()
{
    $title = 'Upload Jurnal';
    $page = 'Upload Jurnal';
    $title_jp = '';

    return view('accounting_purchasing.billing.upload_jurnal', array(
        'title' => $title,
        'title_jp' => $title_jp
    ))->with('page', $page)->with('head', $page);
}

public function fetchUploadJurnal(Request $request)
{
    try {
        $date_from = $request->get('date_from');
        $date_to = $request->get('date_to');
        if ($date_from == "") {
         if ($date_to == "") {
          $first = date('Y-m-d');
          $last = date('Y-m-d');
      }else{
          $first = date('Y-m-d');
          $last = $date_to;
      }
  }else{
     if ($date_to == "") {
      $first = $date_from;
      $last = date('Y-m-d');
  }else{
      $first = $date_from;
      $last = $date_to;
  }
}

$jurnal = AccJurnal::select('acc_jurnal_details.*','acc_jurnals.*')
->leftJoin('acc_jurnal_details','acc_jurnals.id','=','acc_jurnal_details.jurnal_id')
->where('jurnal_date','>=',$first)
->where('jurnal_date','<=',$last);
$jurnal = $jurnal->orderby('jurnal_date','desc')->get();

$response = array(
    'status' => true,
    'jurnal' => $jurnal,
    'message' => 'Success Input Data'
);
return Response::json($response);
} catch (\Exception $e) {
    $response = array(
        'status' => false,
        'message' => $e->getMessage(),
    );
    return Response::json($response);
}
}

public function exportUploadJurnal(Request $request){

    $time = date('d-m-Y H;i;s');

    $tanggal = "";
    $currency = "";

    if (strlen($request->get('date_from')) > 0)
    {
        $date_from = date('Y-m-d', strtotime($request->get('date_from')));
        $tanggal = "and jurnal_date >= '" . $date_from . "'";
        if (strlen($request->get('date_to')) > 0)
        {
            $date_to = date('Y-m-d', strtotime($request->get('date_to')));
            $tanggal = $tanggal . "and jurnal_date  <= '" . $date_to . "'";
        }
    }

    if($request->get('currency') != null){
          // $curr =  explode(",", $request->get('currency'));
      $currency = "and acc_jurnals.currency IN ('".$request->get('currency')."')";
  }

  $jurnal_detail = db::select(
    "Select acc_rekenings.settle_acc_no,acc_jurnals.supplier_name,acc_rekenings.rekening_nama,acc_rekenings.address_vendor,acc_rekenings.city,acc_rekenings.country,acc_rekenings.rekening_no,acc_jurnals.currency,acc_rekenings.sector_select ,acc_jurnals.contract_number,acc_jurnals.exchange_method, acc_rekenings.bank_name, acc_rekenings.bank_branch, acc_rekenings.bank_city_country, acc_jurnals.swift_code, acc_jurnals.iban, acc_rekenings.resident, acc_rekenings.citizenship, acc_rekenings.relation, acc_jurnals.purpose_remit, acc_rekenings.bank_charge,acc_jurnals.amount,acc_jurnals.jurnal_date,acc_jurnals.remark from acc_jurnals JOIN acc_rekenings on acc_jurnals.bank_id = acc_rekenings.id WHERE acc_jurnals.deleted_at IS NULL ".$tanggal." ".$currency." order by acc_jurnals.id ASC");

  $data = array(
    'jurnal_detail' => $jurnal_detail
);

  ob_clean();

  Excel::create('Jurnal List '.$time, function($excel) use ($data){
    $excel->sheet('Location', function($sheet) use ($data) {
      return $sheet->loadView('accounting_purchasing.billing.jurnal_excel', $data);
  });
})->export('xlsx');
}

public function reportJurnal($id){

    $jurnal = db::table('acc_jurnals')
    ->where('id', '=', $id)
    ->first();

    $jurnal_invoice = AccJurnal::select('acc_jurnal_invoices.*')
    ->join('acc_jurnal_invoices','acc_jurnals.id','=','acc_jurnal_invoices.jurnal_id')
    ->where('jurnal_id',$id)
    ->get();

    $jurnal_detail = AccJurnal::select('acc_jurnal_details.*')
    ->join('acc_jurnal_details','acc_jurnals.id','=','acc_jurnal_details.jurnal_id')
    ->where('jurnal_id',$id)
    ->get();

    $pdf = \App::make('dompdf.wrapper');
    $pdf->getDomPDF()->set_option("enable_php", true);
    $pdf->setPaper('A4', 'landscape');

    $pdf->loadView('accounting_purchasing.billing.report_jurnal', array(
        'jurnal' => $jurnal,
        'jurnal_invoice' => $jurnal_invoice,
        'jurnal_detail' => $jurnal_detail,
        'id' => $id
    ));
    return $pdf->stream("Jurnal ".$jurnal->supplier_name. " ".date('d-M-y', strtotime($jurnal->jurnal_date))." ".$jurnal->currency.".pdf");
}


public function verifikasi_final_payment($id)
{
    $payment = AccPaymentRequest::find($id);
    $payment_detail = AccPaymentRequestDetail::select('*')
    ->where('id_payment',$id)
    ->whereNull('deleted_at')
    ->get();

    $path = '/payment_list/Payment '.$payment->supplier_name. ' '.date('d-M-y', strtotime($payment->payment_date)).' ('.$id.').pdf';
    $file_path = asset($path);

    $array_file = array();

    foreach($payment_detail as $py){
        $invoice = AccInvoice::select('*')
        ->where('id',$py->id_invoice)
        ->whereNull('deleted_at')
        ->first();

        $invoice_path = '/files/invoice/'.$invoice->file;
        $file_invoice_path = asset($invoice_path);
        array_push($array_file, [
            'file' => $file_invoice_path,
            'invoice' => $py->invoice
        ]);
    }

    return view('accounting_purchasing.billing.verifikasi_final_payment', array(
        'payment' => $payment,
        'payment_detail' => $payment_detail,
        'invoice_file' => $array_file,
        'file_path' => $file_path,
    ))->with('page', 'Payment Request');
}

}

